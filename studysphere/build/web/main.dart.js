// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const _internal = dart_sdk._internal;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const html = dart_sdk.html;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const async$ = flutter_sdk.src__widgets__async;
  const framework = flutter_sdk.src__widgets__framework;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const scroll_controller = flutter_sdk.src__widgets__scroll_controller;
  const binding = flutter_sdk.src__scheduler__binding;
  const curves = flutter_sdk.src__animation__curves;
  const scaffold = flutter_sdk.src__material__scaffold;
  const bottom_navigation_bar = flutter_sdk.src__material__bottom_navigation_bar;
  const bottom_navigation_bar_item = flutter_sdk.src__widgets__bottom_navigation_bar_item;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const basic = flutter_sdk.src__widgets__basic;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const alignment = flutter_sdk.src__painting__alignment;
  const container = flutter_sdk.src__widgets__container;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const text$ = flutter_sdk.src__widgets__text;
  const text_style = flutter_sdk.src__painting__text_style;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const input_border = flutter_sdk.src__material__input_border;
  const icon_button = flutter_sdk.src__material__icon_button;
  const icons = flutter_sdk.src__material__icons;
  const app_bar = flutter_sdk.src__material__app_bar;
  const image = flutter_sdk.src__widgets__image;
  const card = flutter_sdk.src__material__card;
  const flex = flutter_sdk.src__rendering__flex;
  const animation_controller = flutter_sdk.src__animation__animation_controller;
  const tween = flutter_sdk.src__animation__tween;
  const transitions = flutter_sdk.src__widgets__transitions;
  const ticker_provider = flutter_sdk.src__widgets__ticker_provider;
  const animation = flutter_sdk.src__animation__animation;
  const binding$ = flutter_sdk.src__widgets__binding;
  const list_tile = flutter_sdk.src__material__list_tile;
  const progress_indicator = flutter_sdk.src__material__progress_indicator;
  const circle_avatar = flutter_sdk.src__material__circle_avatar;
  const image_resolution = flutter_sdk.src__painting__image_resolution;
  const box_border = flutter_sdk.src__painting__box_border;
  const borders = flutter_sdk.src__painting__borders;
  const table_border = flutter_sdk.src__rendering__table_border;
  const decoration = flutter_sdk.src__painting__decoration;
  const proxy_box = flutter_sdk.src__rendering__proxy_box;
  const page_view = flutter_sdk.src__widgets__page_view;
  const change_notifier = flutter_sdk.src__foundation__change_notifier;
  const value_listenable_builder = flutter_sdk.src__widgets__value_listenable_builder;
  const date_format = flutter_sdk.src__intl__date_format;
  const gesture_detector = flutter_sdk.src__widgets__gesture_detector;
  const layout_builder = flutter_sdk.src__widgets__layout_builder;
  const key = flutter_sdk.src__foundation__key;
  const box = flutter_sdk.src__rendering__box;
  const animated_size = flutter_sdk.src__widgets__animated_size;
  const scroll_physics = flutter_sdk.src__widgets__scroll_physics;
  const string_scanner = flutter_sdk.src__string_scanner;
  const canonicalized_map = flutter_sdk.src__canonicalized_map;
  const drag_details = flutter_sdk.src__gestures__drag_details;
  const implicit_animations = flutter_sdk.src__widgets__implicit_animations;
  const date = flutter_sdk.src__material__date;
  const span_exception = flutter_sdk.src__span_exception;
  const theme = flutter_sdk.src__material__theme;
  const platform$ = flutter_sdk.src__foundation__platform;
  const button = flutter_sdk.src__cupertino__button;
  const ink_well = flutter_sdk.src__material__ink_well;
  const table = flutter_sdk.src__widgets__table;
  const queue_list = flutter_sdk.src__queue_list;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var http = Object.create(dart.library);
  var schedule_menu = Object.create(dart.library);
  var community_tab = Object.create(dart.library);
  var loading_screen = Object.create(dart.library);
  var profile_page = Object.create(dart.library);
  var client$ = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var request$ = Object.create(dart.library);
  var response$ = Object.create(dart.library);
  var streamed_request = Object.create(dart.library);
  var base_client = Object.create(dart.library);
  var base_request = Object.create(dart.library);
  var base_response = Object.create(dart.library);
  var byte_stream = Object.create(dart.library);
  var multipart_file = Object.create(dart.library);
  var multipart_request = Object.create(dart.library);
  var streamed_response = Object.create(dart.library);
  var table_calendar = Object.create(dart.library);
  var browser_client = Object.create(dart.library);
  var http_parser = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var multipart_file_stub = Object.create(dart.library);
  var boundary_characters = Object.create(dart.library);
  var calendar_builders = Object.create(dart.library);
  var calendar_style = Object.create(dart.library);
  var days_of_week_style = Object.create(dart.library);
  var header_style = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var table_calendar$ = Object.create(dart.library);
  var table_calendar_base = Object.create(dart.library);
  var authentication_challenge = Object.create(dart.library);
  var case_insensitive_map = Object.create(dart.library);
  var chunked_coding = Object.create(dart.library);
  var http_date = Object.create(dart.library);
  var media_type = Object.create(dart.library);
  var simple_gesture_detector = Object.create(dart.library);
  var calendar_header = Object.create(dart.library);
  var cell_content = Object.create(dart.library);
  var calendar_core = Object.create(dart.library);
  var scan = Object.create(dart.library);
  var utils$0 = Object.create(dart.library);
  var decoder = Object.create(dart.library);
  var encoder = Object.create(dart.library);
  var custom_icon_button = Object.create(dart.library);
  var format_button = Object.create(dart.library);
  var calendar_page = Object.create(dart.library);
  var typed_data$ = Object.create(dart.library);
  var charcodes = Object.create(dart.library);
  var typed_queue = Object.create(dart.library);
  var typed_buffers = Object.create(dart.library);
  var typed_buffer = Object.create(dart.library);
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $substring = dartx.substring;
  var $map = dartx.map;
  var $addAll = dartx.addAll;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $_set = dartx._set;
  var $toLowerCase = dartx.toLowerCase;
  var $hashCode = dartx.hashCode;
  var $cast = dartx.cast;
  var $forEach = dartx.forEach;
  var $entries = dartx.entries;
  var $replaceAll = dartx.replaceAll;
  var $responseType = dartx.responseType;
  var $onLoad = dartx.onLoad;
  var $response = dartx.response;
  var $asUint8List = dartx.asUint8List;
  var $responseHeaders = dartx.responseHeaders;
  var $onError = dartx.onError;
  var $join = dartx.join;
  var $buffer = dartx.buffer;
  var $indexOf = dartx.indexOf;
  var $keys = dartx.keys;
  var $contains = dartx.contains;
  var $isNotEmpty = dartx.isNotEmpty;
  var $every = dartx.every;
  var $toList = dartx.toList;
  var $take = dartx.take;
  var $floor = dartx.floor;
  var $abs = dartx.abs;
  var $truncate = dartx.truncate;
  var $modulo = dartx['%'];
  var $split = dartx.split;
  var $replaceAllMapped = dartx.replaceAllMapped;
  var $_equals = dartx._equals;
  var $toRadixString = dartx.toRadixString;
  var $toUpperCase = dartx.toUpperCase;
  var $codeUnits = dartx.codeUnits;
  var $setRange = dartx.setRange;
  var $fillRange = dartx.fillRange;
  var $rightShift = dartx['>>'];
  var $sublist = dartx.sublist;
  var $isEmpty = dartx.isEmpty;
  var $elementSizeInBytes = dartx.elementSizeInBytes;
  var $offsetInBytes = dartx.offsetInBytes;
  var $insertAll = dartx.insertAll;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    BuildContextAndAsyncSnapshotToWidget: () => (T$.BuildContextAndAsyncSnapshotToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, async$.AsyncSnapshot])))(),
    MapOfString$String: () => (T$.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    JSArrayOfMapOfString$String: () => (T$.JSArrayOfMapOfString$String = dart.constFn(_interceptors.JSArray$(T$.MapOfString$String())))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    BuildContextAndintToAlign: () => (T$.BuildContextAndintToAlign = dart.constFn(dart.fnType(basic.Align, [framework.BuildContext, core.int])))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToText: () => (T$.BuildContextAndWidgetNToText = dart.constFn(dart.fnType(text$.Text, [framework.BuildContext, T$.WidgetN()])))(),
    FutureOfResponse: () => (T$.FutureOfResponse = dart.constFn(async.Future$(response$.Response)))(),
    ClientToFutureOfResponse: () => (T$.ClientToFutureOfResponse = dart.constFn(dart.fnType(T$.FutureOfResponse(), [client$.Client])))(),
    FutureOfString: () => (T$.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    ClientToFutureOfString: () => (T$.ClientToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [client$.Client])))(),
    FutureOfUint8List: () => (T$.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    ClientToFutureOfUint8List: () => (T$.ClientToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [client$.Client])))(),
    DateTimeTobool: () => (T$.DateTimeTobool = dart.constFn(dart.fnType(core.bool, [core.DateTime])))(),
    DateTimeAndDateTimeTovoid: () => (T$.DateTimeAndDateTimeTovoid = dart.constFn(dart.fnType(dart.void, [core.DateTime, core.DateTime])))(),
    CalendarFormatTovoid: () => (T$.CalendarFormatTovoid = dart.constFn(dart.fnType(dart.void, [utils$.CalendarFormat])))(),
    StringToListTile: () => (T$.StringToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [core.String])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    VoidToClient: () => (T$.VoidToClient = dart.constFn(dart.fnType(client$.Client, [])))(),
    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    StringAndStringTobool: () => (T$.StringAndStringTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.String])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    _EmptyStreamOfListOfint: () => (T$._EmptyStreamOfListOfint = dart.constFn(async._EmptyStream$(T$.ListOfint())))(),
    StreamControllerOfListOfint: () => (T$.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$.ListOfint())))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    CompleterOfUint8List: () => (T$.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    ListOfintTovoid: () => (T$.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint()])))(),
    JSArrayOfMultipartFile: () => (T$.JSArrayOfMultipartFile = dart.constFn(_interceptors.JSArray$(multipart_file.MultipartFile)))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    _AsyncStarImplOfListOfint: () => (T$._AsyncStarImplOfListOfint = dart.constFn(async._AsyncStarImpl$(T$.ListOfint())))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    LinkedHashSetOfHttpRequest: () => (T$.LinkedHashSetOfHttpRequest = dart.constFn(collection.LinkedHashSet$(html.HttpRequest)))(),
    CompleterOfStreamedResponse: () => (T$.CompleterOfStreamedResponse = dart.constFn(async.Completer$(streamed_response.StreamedResponse)))(),
    ProgressEventToNull: () => (T$.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    JSArrayOfListOfString: () => (T$.JSArrayOfListOfString = dart.constFn(_interceptors.JSArray$(T$.ListOfString())))(),
    ListOfStringToString: () => (T$.ListOfStringToString = dart.constFn(dart.fnType(core.String, [T$.ListOfString()])))(),
    CalendarBuildersOfNever: () => (T$.CalendarBuildersOfNever = dart.constFn(calendar_builders.CalendarBuilders$(dart.Never)))(),
    intTobool: () => (T$.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    ValueNotifierOfDateTime: () => (T$.ValueNotifierOfDateTime = dart.constFn(change_notifier.ValueNotifier$(core.DateTime)))(),
    ValueListenableBuilderOfDateTime: () => (T$.ValueListenableBuilderOfDateTime = dart.constFn(value_listenable_builder.ValueListenableBuilder$(core.DateTime)))(),
    BuildContextAndDateTimeAndWidgetNToCalendarHeader: () => (T$.BuildContextAndDateTimeAndWidgetNToCalendarHeader = dart.constFn(dart.fnType(calendar_header.CalendarHeader, [framework.BuildContext, core.DateTime, T$.WidgetN()])))(),
    PageControllerTovoid: () => (T$.PageControllerTovoid = dart.constFn(dart.fnType(dart.void, [page_view.PageController])))(),
    DateTimeTovoid: () => (T$.DateTimeTovoid = dart.constFn(dart.fnType(dart.void, [core.DateTime])))(),
    BuildContextAndDateTimeToWidget: () => (T$.BuildContextAndDateTimeToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, core.DateTime])))(),
    BuildContextAndDateTimeAndDateTimeToGestureDetector: () => (T$.BuildContextAndDateTimeAndDateTimeToGestureDetector = dart.constFn(dart.fnType(gesture_detector.GestureDetector, [framework.BuildContext, core.DateTime, core.DateTime])))(),
    ValueKeyOfString: () => (T$.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    BuildContextAndBoxConstraintsToStack: () => (T$.BuildContextAndBoxConstraintsToStack = dart.constFn(dart.fnType(basic.Stack, [framework.BuildContext, box.BoxConstraints])))(),
    ValueNotifierOfdouble: () => (T$.ValueNotifierOfdouble = dart.constFn(change_notifier.ValueNotifier$(core.double)))(),
    ValueListenableBuilderOfdouble: () => (T$.ValueListenableBuilderOfdouble = dart.constFn(value_listenable_builder.ValueListenableBuilder$(core.double)))(),
    BuildContextAnddoubleAndWidgetNToAnimatedSize: () => (T$.BuildContextAnddoubleAndWidgetNToAnimatedSize = dart.constFn(dart.fnType(animated_size.AnimatedSize, [framework.BuildContext, core.double, T$.WidgetN()])))(),
    intAndDateTimeTovoid: () => (T$.intAndDateTimeTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.DateTime])))(),
    BuildContextAndBoxConstraintsToSimpleGestureDetector: () => (T$.BuildContextAndBoxConstraintsToSimpleGestureDetector = dart.constFn(dart.fnType(simple_gesture_detector.SimpleGestureDetector, [framework.BuildContext, box.BoxConstraints])))(),
    UnmodifiableMapViewOfString$String: () => (T$.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    CaseInsensitiveMapOfString: () => (T$.CaseInsensitiveMapOfString = dart.constFn(case_insensitive_map.CaseInsensitiveMap$(core.String)))(),
    ListOfAuthenticationChallenge: () => (T$.ListOfAuthenticationChallenge = dart.constFn(core.List$(authentication_challenge.AuthenticationChallenge)))(),
    VoidToAuthenticationChallenge: () => (T$.VoidToAuthenticationChallenge = dart.constFn(dart.fnType(authentication_challenge.AuthenticationChallenge, [])))(),
    VoidToListOfAuthenticationChallenge: () => (T$.VoidToListOfAuthenticationChallenge = dart.constFn(dart.fnType(T$.ListOfAuthenticationChallenge(), [])))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    VoidToDateTime: () => (T$.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    VoidToMediaType: () => (T$.VoidToMediaType = dart.constFn(dart.fnType(media_type.MediaType, [])))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    BuildContextAndDateTimeToSizedBox: () => (T$.BuildContextAndDateTimeToSizedBox = dart.constFn(dart.fnType(basic.SizedBox, [framework.BuildContext, core.DateTime])))(),
    BuildContextAndintToCalendarPage: () => (T$.BuildContextAndintToCalendarPage = dart.constFn(dart.fnType(calendar_page.CalendarPage, [framework.BuildContext, core.int])))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    ListOfDateTime: () => (T$.ListOfDateTime = dart.constFn(core.List$(core.DateTime)))(),
    intToDateTime: () => (T$.intToDateTime = dart.constFn(dart.fnType(core.DateTime, [core.int])))(),
    SinkOfListOfint: () => (T$.SinkOfListOfint = dart.constFn(core.Sink$(T$.ListOfint())))(),
    intAndStringTovoid: () => (T$.intAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.String])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    JSArrayOfTableRow: () => (T$.JSArrayOfTableRow = dart.constFn(_interceptors.JSArray$(table.TableRow)))(),
    intToExpanded: () => (T$.intToExpanded = dart.constFn(dart.fnType(basic.Expanded, [core.int])))(),
    ListOfWidget: () => (T$.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    intToWidget: () => (T$.intToWidget = dart.constFn(dart.fnType(framework.Widget, [core.int])))(),
    intToTableRow: () => (T$.intToTableRow = dart.constFn(dart.fnType(table.TableRow, [core.int])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 1000000
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57634
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[6] || CT.C6
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Calendar",
        [BottomNavigationBarItem_activeIcon]: C[5] || CT.C5,
        [BottomNavigationBarItem_icon]: C[5] || CT.C5
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57683
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[9] || CT.C9
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Chat",
        [BottomNavigationBarItem_activeIcon]: C[8] || CT.C8,
        [BottomNavigationBarItem_icon]: C[8] || CT.C8
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58136
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[12] || CT.C12
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Home",
        [BottomNavigationBarItem_activeIcon]: C[11] || CT.C11,
        [BottomNavigationBarItem_icon]: C[11] || CT.C11
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58091
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[15] || CT.C15
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Community",
        [BottomNavigationBarItem_activeIcon]: C[14] || CT.C14,
        [BottomNavigationBarItem_icon]: C[14] || CT.C14
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58513
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[18] || CT.C18
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Profile",
        [BottomNavigationBarItem_activeIcon]: C[17] || CT.C17,
        [BottomNavigationBarItem_icon]: C[17] || CT.C17
      });
    },
    get C3() {
      return C[3] = dart.constList([C[4] || CT.C4, C[7] || CT.C7, C[10] || CT.C10, C[13] || CT.C13, C[16] || CT.C16], bottom_navigation_bar_item.BottomNavigationBarItem);
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: main.MyApp.prototype,
        [Widget_key]: null
      });
    },
    get C22() {
      return C[22] = dart.const(new _js_helper.PrivateSymbol.new('_clientToken', _clientToken));
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: T$._EmptyStreamOfListOfint().prototype
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: byte_stream.ByteStream.prototype,
        [StreamView__stream]: C[24] || CT.C24
      });
    },
    get C25() {
      return C[25] = dart.constMap(core.String, core.String, []);
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: convert.Utf8Codec.prototype,
        [Utf8Codec__allowMalformed]: false
      });
    },
    get C27() {
      return C[27] = dart.constList([13, 10], core.int);
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [Latin1Codec__allowInvalid]: false
      });
    },
    get C29() {
      return C[29] = dart.constList([43, 95, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], core.int);
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0.3,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0.3
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: 0
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 6,
        [EdgeInsets_right]: 6,
        [EdgeInsets_top]: 6,
        [EdgeInsets_left]: 6
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: calendar_style.PositionedOffset.prototype,
        [PositionedOffset_end]: null,
        [PositionedOffset_start]: null,
        [PositionedOffset_bottom]: null,
        [PositionedOffset_top]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290502143
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: box_border.BoxShape.prototype,
        [_Enum__name]: "circle",
        [_Enum_index]: 1
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280693304
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: box_decoration.BoxDecoration.prototype,
        [BoxDecoration_shape]: C[38] || CT.C38,
        [BoxDecoration_backgroundBlendMode]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_color]: C[39] || CT.C39
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294638330
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 16,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[41] || CT.C41,
        [TextStyle_inherit]: true
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288653530
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: box_decoration.BoxDecoration.prototype,
        [BoxDecoration_shape]: C[38] || CT.C38,
        [BoxDecoration_backgroundBlendMode]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_color]: C[43] || CT.C43
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284246976
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: box_decoration.BoxDecoration.prototype,
        [BoxDecoration_shape]: C[38] || CT.C38,
        [BoxDecoration_backgroundBlendMode]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_color]: C[45] || CT.C45
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284914175
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: box_decoration.BoxDecoration.prototype,
        [BoxDecoration_shape]: C[38] || CT.C38,
        [BoxDecoration_backgroundBlendMode]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_color]: C[47] || CT.C47
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: box_decoration.BoxDecoration.prototype,
        [BoxDecoration_shape]: C[38] || CT.C38,
        [BoxDecoration_backgroundBlendMode]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_color]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289638062
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[51] || CT.C51,
        [TextStyle_inherit]: true
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290756543
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[53] || CT.C53,
        [TextStyle_inherit]: true
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[45] || CT.C45,
        [TextStyle_inherit]: true
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_Enum__name]: "solid",
        [_Enum_index]: 1
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[58] || CT.C58,
        [BorderSide_width]: 1.4,
        [BorderSide_color]: C[43] || CT.C43
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: box_border.Border.prototype,
        [Border_left]: C[57] || CT.C57,
        [Border_bottom]: C[57] || CT.C57,
        [Border_right]: C[57] || CT.C57,
        [Border_top]: C[57] || CT.C57
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: box_decoration.BoxDecoration.prototype,
        [BoxDecoration_shape]: C[38] || CT.C38,
        [BoxDecoration_backgroundBlendMode]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: C[56] || CT.C56,
        [BoxDecoration_image]: null,
        [BoxDecoration_color]: null
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284111450
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[60] || CT.C60,
        [TextStyle_inherit]: true
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 12,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[53] || CT.C53,
        [TextStyle_inherit]: true
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: box_border.BoxShape.prototype,
        [_Enum__name]: "rectangle",
        [_Enum_index]: 0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: box_decoration.BoxDecoration.prototype,
        [BoxDecoration_shape]: C[63] || CT.C63,
        [BoxDecoration_backgroundBlendMode]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_color]: null
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[66] || CT.C66,
        [BorderRadius_bottomLeft]: C[66] || CT.C66,
        [BorderRadius_topRight]: C[66] || CT.C66,
        [BorderRadius_topLeft]: C[66] || CT.C66
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[68] || CT.C68,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[69] || CT.C69
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: table_border.TableBorder.prototype,
        [TableBorder_borderRadius]: C[65] || CT.C65,
        [TableBorder_verticalInside]: C[67] || CT.C67,
        [TableBorder_horizontalInside]: C[67] || CT.C67,
        [TableBorder_left]: C[67] || CT.C67,
        [TableBorder_bottom]: C[67] || CT.C67,
        [TableBorder_right]: C[67] || CT.C67,
        [TableBorder_top]: C[67] || CT.C67
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283387727
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[71] || CT.C71,
        [TextStyle_inherit]: true
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285164138
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[73] || CT.C73,
        [TextStyle_inherit]: true
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 17,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 14,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 12,
        [Radius_x]: 12
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[78] || CT.C78,
        [BorderRadius_bottomLeft]: C[78] || CT.C78,
        [BorderRadius_topRight]: C[78] || CT.C78,
        [BorderRadius_topLeft]: C[78] || CT.C78
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[58] || CT.C58,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[69] || CT.C69
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: box_border.Border.prototype,
        [Border_left]: C[80] || CT.C80,
        [Border_bottom]: C[80] || CT.C80,
        [Border_right]: C[80] || CT.C80,
        [Border_top]: C[80] || CT.C80
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: box_decoration.BoxDecoration.prototype,
        [BoxDecoration_shape]: C[63] || CT.C63,
        [BoxDecoration_backgroundBlendMode]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_borderRadius]: C[77] || CT.C77,
        [BoxDecoration_border]: C[79] || CT.C79,
        [BoxDecoration_image]: null,
        [BoxDecoration_color]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 0
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 4,
        [EdgeInsets_right]: 10,
        [EdgeInsets_top]: 4,
        [EdgeInsets_left]: 10
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 12,
        [EdgeInsets_right]: 12,
        [EdgeInsets_top]: 12,
        [EdgeInsets_left]: 12
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 8
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: true,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57694
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[86] || CT.C86
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: true,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57695
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[88] || CT.C88
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: utils$.AvailableGestures.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: utils$.AvailableGestures.prototype,
        [_Enum__name]: "verticalSwipe",
        [_Enum_index]: 1
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: utils$.AvailableGestures.prototype,
        [_Enum__name]: "horizontalSwipe",
        [_Enum_index]: 2
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: utils$.AvailableGestures.prototype,
        [_Enum__name]: "all",
        [_Enum_index]: 3
      });
    },
    get C89() {
      return C[89] = dart.constList([C[90] || CT.C90, C[91] || CT.C91, C[92] || CT.C92, C[93] || CT.C93], utils$.AvailableGestures);
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: utils$.CalendarFormat.prototype,
        [_Enum__name]: "month",
        [_Enum_index]: 0
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: utils$.CalendarFormat.prototype,
        [_Enum__name]: "twoWeeks",
        [_Enum_index]: 1
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: utils$.CalendarFormat.prototype,
        [_Enum__name]: "week",
        [_Enum_index]: 2
      });
    },
    get C94() {
      return C[94] = dart.constList([C[95] || CT.C95, C[96] || CT.C96, C[97] || CT.C97], utils$.CalendarFormat);
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: utils$.StartingDayOfWeek.prototype,
        [_Enum__name]: "monday",
        [_Enum_index]: 0
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: utils$.StartingDayOfWeek.prototype,
        [_Enum__name]: "tuesday",
        [_Enum_index]: 1
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: utils$.StartingDayOfWeek.prototype,
        [_Enum__name]: "wednesday",
        [_Enum_index]: 2
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: utils$.StartingDayOfWeek.prototype,
        [_Enum__name]: "thursday",
        [_Enum_index]: 3
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: utils$.StartingDayOfWeek.prototype,
        [_Enum__name]: "friday",
        [_Enum_index]: 4
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: utils$.StartingDayOfWeek.prototype,
        [_Enum__name]: "saturday",
        [_Enum_index]: 5
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: utils$.StartingDayOfWeek.prototype,
        [_Enum__name]: "sunday",
        [_Enum_index]: 6
      });
    },
    get C98() {
      return C[98] = dart.constList([C[99] || CT.C99, C[100] || CT.C100, C[101] || CT.C101, C[102] || CT.C102, C[103] || CT.C103, C[104] || CT.C104, C[105] || CT.C105], utils$.StartingDayOfWeek);
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: table_calendar$.RangeSelectionMode.prototype,
        [_Enum__name]: "disabled",
        [_Enum_index]: 0
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: table_calendar$.RangeSelectionMode.prototype,
        [_Enum__name]: "toggledOff",
        [_Enum_index]: 1
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: table_calendar$.RangeSelectionMode.prototype,
        [_Enum__name]: "toggledOn",
        [_Enum_index]: 2
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: table_calendar$.RangeSelectionMode.prototype,
        [_Enum__name]: "enforced",
        [_Enum_index]: 3
      });
    },
    get C106() {
      return C[106] = dart.constList([C[107] || CT.C107, C[108] || CT.C108, C[109] || CT.C109, C[110] || CT.C110], table_calendar$.RangeSelectionMode);
    },
    get C111() {
      return C[111] = dart.constList([6, 7], core.int);
    },
    get C112() {
      return C[112] = dart.constMap(utils$.CalendarFormat, core.String, [C[95] || CT.C95, "Month", C[96] || CT.C96, "2 weeks", C[97] || CT.C97, "Week"]);
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: curves._Linear.prototype
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.58,
        [Cubic_b]: 0,
        [Cubic_a]: 0
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: proxy_box.HitTestBehavior.prototype,
        [_Enum__name]: "opaque",
        [_Enum_index]: 1
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: simple_gesture_detector.SwipeDetectionBehavior.prototype,
        [_Enum__name]: "continuousDistinct",
        [_Enum_index]: 3
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: simple_gesture_detector.SimpleSwipeConfig.prototype,
        [SimpleSwipeConfig_swipeDetectionBehavior]: C[118] || CT.C118,
        [SimpleSwipeConfig_horizontalThreshold]: 50,
        [SimpleSwipeConfig_verticalThreshold]: 25
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: header_style.HeaderStyle.prototype,
        [decoration$0]: C[62] || CT.C62,
        [rightChevronVisible$]: true,
        [leftChevronVisible$]: true,
        [rightChevronIcon$]: C[87] || CT.C87,
        [leftChevronIcon$]: C[85] || CT.C85,
        [rightChevronMargin$]: C[84] || CT.C84,
        [leftChevronMargin$]: C[84] || CT.C84,
        [rightChevronPadding$]: C[83] || CT.C83,
        [leftChevronPadding$]: C[83] || CT.C83,
        [formatButtonPadding$]: C[82] || CT.C82,
        [headerMargin$]: C[33] || CT.C33,
        [headerPadding$]: C[81] || CT.C81,
        [formatButtonDecoration$]: C[76] || CT.C76,
        [formatButtonTextStyle$]: C[75] || CT.C75,
        [titleTextStyle$]: C[74] || CT.C74,
        [titleTextFormatter$]: null,
        [formatButtonShowsNext$]: true,
        [formatButtonVisible$]: true,
        [titleCentered$]: false
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: days_of_week_style.DaysOfWeekStyle.prototype,
        [weekendStyle$]: C[72] || CT.C72,
        [weekdayStyle$]: C[70] || CT.C70,
        [decoration$]: C[62] || CT.C62,
        [dowTextFormatter$]: null
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: calendar_style.CalendarStyle.prototype,
        [tablePadding$]: C[33] || CT.C33,
        [tableBorder$]: C[64] || CT.C64,
        [rowDecoration$]: C[62] || CT.C62,
        [defaultDecoration$]: C[49] || CT.C49,
        [defaultTextStyle$]: C[48] || CT.C48,
        [weekNumberTextStyle$]: C[61] || CT.C61,
        [weekendDecoration$]: C[49] || CT.C49,
        [weekendTextStyle$]: C[59] || CT.C59,
        [holidayDecoration$]: C[55] || CT.C55,
        [holidayTextStyle$]: C[54] || CT.C54,
        [disabledDecoration$]: C[49] || CT.C49,
        [disabledTextStyle$]: C[52] || CT.C52,
        [outsideDecoration$]: C[49] || CT.C49,
        [outsideTextStyle$]: C[50] || CT.C50,
        [withinRangeDecoration$]: C[49] || CT.C49,
        [withinRangeTextStyle$]: C[48] || CT.C48,
        [rangeEndDecoration$]: C[46] || CT.C46,
        [rangeEndTextStyle$]: C[40] || CT.C40,
        [rangeStartDecoration$]: C[46] || CT.C46,
        [rangeStartTextStyle$]: C[40] || CT.C40,
        [selectedDecoration$]: C[44] || CT.C44,
        [selectedTextStyle$]: C[40] || CT.C40,
        [todayDecoration$]: C[42] || CT.C42,
        [todayTextStyle$]: C[40] || CT.C40,
        [isTodayHighlighted$]: true,
        [outsideDaysVisible$]: true,
        [rangeHighlightColor$]: C[36] || CT.C36,
        [rangeHighlightScale$]: 1,
        [cellAlignment$]: C[34] || CT.C34,
        [cellPadding$]: C[33] || CT.C33,
        [cellMargin$]: C[32] || CT.C32,
        [markerMargin$]: C[30] || CT.C30,
        [markerDecoration$]: C[37] || CT.C37,
        [markersAlignment$]: C[31] || CT.C31,
        [markersOffset$]: C[35] || CT.C35,
        [markerSizeScale$]: 0.2,
        [markerSize$]: null,
        [markersAnchor$]: 0.7,
        [markersAutoAligned$]: true,
        [canMarkersOverflow$]: true,
        [markersMaxCount$]: 4
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: T$.CalendarBuildersOfNever().prototype,
        [weekNumberBuilder$]: null,
        [headerTitleBuilder$]: null,
        [dowBuilder$]: null,
        [markerBuilder$]: null,
        [singleMarkerBuilder$]: null,
        [rangeHighlightBuilder$]: null,
        [defaultBuilder$]: null,
        [holidayBuilder$]: null,
        [disabledBuilder$]: null,
        [outsideBuilder$]: null,
        [withinRangeBuilder$]: null,
        [rangeEndBuilder$]: null,
        [rangeStartBuilder$]: null,
        [selectedBuilder$]: null,
        [todayBuilder$]: null,
        [prioritizedBuilder$]: null
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 4
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 259200000000
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 86400000000
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: chunked_coding.ChunkedCodingCodec.prototype
      });
    },
    get C127() {
      return C[127] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], core.String);
    },
    get C128() {
      return C[128] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], core.String);
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: simple_gesture_detector.SwipeDirection.prototype,
        [_Enum__name]: "left",
        [_Enum_index]: 0
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: simple_gesture_detector.SwipeDirection.prototype,
        [_Enum__name]: "right",
        [_Enum_index]: 1
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: simple_gesture_detector.SwipeDirection.prototype,
        [_Enum__name]: "up",
        [_Enum_index]: 2
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: simple_gesture_detector.SwipeDirection.prototype,
        [_Enum__name]: "down",
        [_Enum_index]: 3
      });
    },
    get C129() {
      return C[129] = dart.constList([C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133], simple_gesture_detector.SwipeDirection);
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: simple_gesture_detector.SwipeDetectionBehavior.prototype,
        [_Enum__name]: "singularOnEnd",
        [_Enum_index]: 1
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: simple_gesture_detector.SimpleSwipeConfig.prototype,
        [SimpleSwipeConfig_swipeDetectionBehavior]: C[135] || CT.C135,
        [SimpleSwipeConfig_horizontalThreshold]: 50,
        [SimpleSwipeConfig_verticalThreshold]: 50
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: proxy_box.HitTestBehavior.prototype,
        [_Enum__name]: "deferToChild",
        [_Enum_index]: 0
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: simple_gesture_detector.SwipeDetectionBehavior.prototype,
        [_Enum__name]: "singular",
        [_Enum_index]: 0
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: simple_gesture_detector.SwipeDetectionBehavior.prototype,
        [_Enum__name]: "continuous",
        [_Enum_index]: 2
      });
    },
    get C137() {
      return C[137] = dart.constList([C[138] || CT.C138, C[135] || CT.C135, C[139] || CT.C139, C[118] || CT.C118], simple_gesture_detector.SwipeDetectionBehavior);
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 8
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 250000
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 604800000000
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 1209600000000
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 3628800000000
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "boundary"
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "size"
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "size before LF"
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body"
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body before CR"
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body before LF"
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end before CR"
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end before LF"
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end"
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: decoder.ChunkedCodingDecoder.prototype
      });
    },
    get C155() {
      return C[155] = dart.constList([], core.int);
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: encoder.ChunkedCodingEncoder.prototype
      });
    },
    get C157() {
      return C[157] = dart.const(new _js_helper.PrivateSymbol.new('_add', _add));
    },
    get C158() {
      return C[158] = dart.const(new _js_helper.PrivateSymbol.new('_head', _head$));
    },
    get C159() {
      return C[159] = dart.const(new _js_helper.PrivateSymbol.new('_writeToList', _writeToList));
    },
    get C160() {
      return C[160] = dart.const(new _js_helper.PrivateSymbol.new('_grow', _grow));
    },
    get C161() {
      return C[161] = dart.const(new _js_helper.PrivateSymbol.new('_preGrow', _preGrow));
    },
    get C162() {
      return C[162] = dart.const(new _js_helper.PrivateSymbol.new('_table', _table$));
    },
    get C163() {
      return C[163] = dart.const(new _js_helper.PrivateSymbol.new('_tail', _tail$));
    },
    get C164() {
      return C[164] = dart.const(new _js_helper.PrivateSymbol.new('_head=', _head_));
    },
    get C165() {
      return C[165] = dart.const(new _js_helper.PrivateSymbol.new('_table=', _table_));
    },
    get C166() {
      return C[166] = dart.const(new _js_helper.PrivateSymbol.new('_tail=', _tail_));
    }
  }, false);
  var C = Array(167).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/project/lib/schedule_menu.dart",
    "file:///zapp/project/lib/community_tab.dart",
    "file:///zapp/project/lib/loading_screen.dart",
    "file:///zapp/project/lib/profile_page.dart",
    "package:http/src/client.dart",
    "package:http/src/exception.dart",
    "package:http/src/base_request.dart",
    "package:http/src/request.dart",
    "package:http/src/base_response.dart",
    "package:http/src/response.dart",
    "package:http/src/streamed_request.dart",
    "package:http/src/base_client.dart",
    "package:http/src/byte_stream.dart",
    "package:http/src/multipart_file.dart",
    "package:http/src/multipart_request.dart",
    "package:http/src/streamed_response.dart",
    "package:http/src/browser_client.dart",
    "package:table_calendar/src/customization/calendar_builders.dart",
    "package:table_calendar/src/customization/calendar_style.dart",
    "package:table_calendar/src/customization/days_of_week_style.dart",
    "package:table_calendar/src/customization/header_style.dart",
    "package:table_calendar/src/shared/utils.dart",
    "package:table_calendar/src/table_calendar.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/table_calendar.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/table_calendar_base.dart",
    "package:table_calendar/src/table_calendar_base.dart",
    "package:http_parser/src/authentication_challenge.dart",
    "package:http_parser/src/case_insensitive_map.dart",
    "package:http_parser/src/chunked_coding.dart",
    "package:http_parser/src/media_type.dart",
    "package:simple_gesture_detector/simple_gesture_detector.dart",
    "package:table_calendar/src/widgets/calendar_header.dart",
    "package:table_calendar/src/widgets/cell_content.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/widgets/calendar_core.dart",
    "package:table_calendar/src/widgets/calendar_core.dart",
    "package:http_parser/src/chunked_coding/decoder.dart",
    "package:http_parser/src/chunked_coding/encoder.dart",
    "package:table_calendar/src/widgets/custom_icon_button.dart",
    "package:table_calendar/src/widgets/format_button.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/widgets/calendar_page.dart",
    "package:table_calendar/src/widgets/calendar_page.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart",
    "package:typed_data/src/typed_queue.dart",
    "package:typed_data/src/typed_buffer.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.MyApp.new({key: key});
    }
    build(context) {
      return new app.MaterialApp.new({title: "StudySphere", theme: theme_data.ThemeData.new({colorSchemeSeed: colors.Colors.blue, useMaterial3: true, brightness: ui.Brightness.light}), darkTheme: theme_data.ThemeData.new({colorSchemeSeed: colors.Colors.blue, useMaterial3: true, brightness: ui.Brightness.dark}), home: new async$.FutureBuilder.new({future: async.Future.delayed(new core.Duration.new({seconds: 2})), builder: dart.fn((context, snapshot) => {
            if (snapshot.connectionState === async$.ConnectionState.waiting) {
              return new loading_screen.LoadingScreen.new();
            } else {
              return new main.MainScreen.new();
            }
          }, T$.BuildContextAndAsyncSnapshotToWidget())}), debugShowCheckedModeBanner: false});
    }
  };
  (main.MyApp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.MyApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.MainScreen = class MainScreen extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.MainScreen.new({key: key});
    }
    createState() {
      return new main._MainScreenState.new();
    }
  };
  (main.MainScreen.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.MainScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MainScreen.prototype;
  dart.addTypeTests(main.MainScreen);
  dart.addTypeCaches(main.MainScreen);
  dart.setMethodSignature(main.MainScreen, () => ({
    __proto__: dart.getMethods(main.MainScreen.__proto__),
    createState: dart.fnType(framework.State$(main.MainScreen), [])
  }));
  dart.setLibraryUri(main.MainScreen, I[0]);
  var _scrollController = dart.privateName(main, "_scrollController");
  var _canSend = dart.privateName(main, "_canSend");
  var _currentIndex = dart.privateName(main, "_currentIndex");
  var _scrollToBottom = dart.privateName(main, "_scrollToBottom");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _onBottomNavTapped = dart.privateName(main, "_onBottomNavTapped");
  var _buildChatBot = dart.privateName(main, "_buildChatBot");
  var _getPage = dart.privateName(main, "_getPage");
  var BottomNavigationBarItem_tooltip = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.tooltip");
  var BottomNavigationBarItem_backgroundColor = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.backgroundColor");
  var BottomNavigationBarItem_label = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.label");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  var BottomNavigationBarItem_activeIcon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.activeIcon");
  var BottomNavigationBarItem_icon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.icon");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  main._MainScreenState = class _MainScreenState extends framework.State$(main.MainScreen) {
    sendRequest(userMessage) {
      return async.async(dart.void, (function* sendRequest() {
        if (!this[_canSend]) return;
        this.setState(dart.fn(() => {
          this.messages[$add](new (T$.IdentityMapOfString$String()).from(["sender", "user", "message", userMessage[$toString]()]));
          this.controller.clear();
          this[_canSend] = false;
        }, T$.VoidTovoid()));
        this[_scrollToBottom]();
        try {
          let url = "https://5459-34-75-129-224.ngrok-free.app/predict";
          let response = (yield http.post(core.Uri.parse(url), {headers: new (T$.IdentityMapOfString$String()).from(["Content-Type", "application/json"]), body: convert.jsonEncode(new (T$.IdentityMapOfString$String()).from(["message", userMessage]))}));
          if (response.statusCode === 200) {
            let responseData = convert.jsonDecode(response.body);
            this.setState(dart.fn(() => {
              this.messages[$add](new (T$.IdentityMapOfString$String()).from(["sender", "StudySphere", "message", dart.toString(responseData)]));
            }, T$.VoidTovoid()));
            this[_scrollToBottom]();
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            core.print("Failed to get response from server. Status code: " + dart.str(e) + "}");
          } else
            throw e$;
        }
        T$.FutureOfNull().delayed(C[1] || CT.C1, dart.fn(() => {
          this.setState(dart.fn(() => {
            this[_canSend] = true;
          }, T$.VoidTovoid()));
        }, T$.VoidToNull()));
      }).bind(this));
    }
    [_scrollToBottom]() {
      binding.SchedulerBinding.instance.addPostFrameCallback(dart.fn(_ => {
        this[_scrollController].animateTo(this[_scrollController].position.maxScrollExtent, {duration: C[2] || CT.C2, curve: curves.Curves.easeOut});
      }, T$.DurationTovoid()));
    }
    [_onBottomNavTapped](index) {
      this.setState(dart.fn(() => {
        this[_currentIndex] = index;
      }, T$.VoidTovoid()));
    }
    [_getPage](index) {
      switch (index) {
        case 0:
          {
            return new schedule_menu.ScheduleMenu.new();
          }
        case 1:
          {
            return this[_buildChatBot]();
          }
        case 2:
          {
            return new main.HomeMenu.new();
          }
        case 3:
          {
            return new community_tab.CommunityTab.new();
          }
        case 4:
          {
            return new profile_page.ProfilePage.new();
          }
        default:
          {
            return new main.HomeMenu.new();
          }
      }
    }
    build(context) {
      return new scaffold.Scaffold.new({body: this[_getPage](this[_currentIndex]), bottomNavigationBar: new bottom_navigation_bar.BottomNavigationBar.new({items: C[3] || CT.C3, currentIndex: this[_currentIndex], selectedItemColor: colors.Colors.blue, unselectedItemColor: colors.Colors.grey, showUnselectedLabels: true, onTap: dart.bind(this, _onBottomNavTapped)})});
    }
    [_buildChatBot]() {
      return new basic.Column.new({children: T$.JSArrayOfWidget().of([new basic.Expanded.new({child: new scroll_view.ListView.builder({controller: this[_scrollController], itemCount: this.messages[$length], itemBuilder: dart.fn((context, index) => {
                let msg = this.messages[$_get](index);
                let isUser = msg[$_get]("sender") === "user";
                return new basic.Align.new({alignment: isUser ? alignment.Alignment.centerRight : alignment.Alignment.centerLeft, child: new container.Container.new({margin: new edge_insets.EdgeInsets.symmetric({vertical: 5, horizontal: 10}), padding: new edge_insets.EdgeInsets.all(10), decoration: new box_decoration.BoxDecoration.new({color: isUser ? colors.Colors.blue._get(100) : colors.Colors.grey._get(300), borderRadius: new border_radius.BorderRadius.circular(15)}), child: isUser ? new text$.Text.new(dart.nullCheck(msg[$_get]("message")), {style: new text_style.TextStyle.new({color: colors.Colors.black87})}) : new main.TypewriterText.new(dart.nullCheck(msg[$_get]("message")))})});
              }, T$.BuildContextAndintToAlign())})}), new basic.Padding.new({padding: C[19] || CT.C19, child: new container.Container.new({padding: new edge_insets.EdgeInsets.symmetric({horizontal: 8}), decoration: new box_decoration.BoxDecoration.new({color: colors.Colors.white, borderRadius: new border_radius.BorderRadius.circular(25)}), child: new basic.Row.new({children: T$.JSArrayOfWidget().of([new basic.Expanded.new({child: new text_field.TextField.new({style: new text_style.TextStyle.new({color: colors.Colors.black}), controller: this.controller, decoration: new input_decorator.InputDecoration.new({hintText: "Type a message...", border: input_border.InputBorder.none}), onSubmitted: dart.fn(message => {
                        if (this[_canSend]) {
                          this.sendRequest(message);
                        }
                      }, T$.StringTovoid())})}), new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.send), onPressed: this[_canSend] ? dart.fn(() => this.sendRequest(this.controller.text), T$.VoidTovoid()) : null})])})})})])});
    }
    static ['_#new#tearOff']() {
      return new main._MainScreenState.new();
    }
  };
  (main._MainScreenState.new = function() {
    this.controller = new editable_text.TextEditingController.new();
    this[_scrollController] = new scroll_controller.ScrollController.new();
    this.messages = T$.JSArrayOfMapOfString$String().of([]);
    this[_canSend] = true;
    this[_currentIndex] = 2;
    main._MainScreenState.__proto__.new.call(this);
    ;
  }).prototype = main._MainScreenState.prototype;
  dart.addTypeTests(main._MainScreenState);
  dart.addTypeCaches(main._MainScreenState);
  dart.setMethodSignature(main._MainScreenState, () => ({
    __proto__: dart.getMethods(main._MainScreenState.__proto__),
    sendRequest: dart.fnType(dart.void, [core.String]),
    [_scrollToBottom]: dart.fnType(dart.void, []),
    [_onBottomNavTapped]: dart.fnType(dart.void, [core.int]),
    [_getPage]: dart.fnType(framework.Widget, [core.int]),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_buildChatBot]: dart.fnType(framework.Widget, [])
  }));
  dart.setLibraryUri(main._MainScreenState, I[0]);
  dart.setFieldSignature(main._MainScreenState, () => ({
    __proto__: dart.getFields(main._MainScreenState.__proto__),
    controller: dart.finalFieldType(editable_text.TextEditingController),
    [_scrollController]: dart.finalFieldType(scroll_controller.ScrollController),
    messages: dart.fieldType(core.List$(core.Map$(core.String, core.String))),
    [_canSend]: dart.fieldType(core.bool),
    [_currentIndex]: dart.fieldType(core.int)
  }));
  var _buildCard = dart.privateName(main, "_buildCard");
  main.HomeMenu = class HomeMenu extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.HomeMenu.new({key: key});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new basic.Row.new({children: T$.JSArrayOfWidget().of([new image.Image.asset("assets/stud_sphere_profile.png", {height: 40}), new basic.SizedBox.new({width: 10}), new text$.Text.new("StudySphere Home")])})}), body: new basic.Padding.new({padding: C[20] || CT.C20, child: new basic.Column.new({children: T$.JSArrayOfWidget().of([new text$.Text.new("Welcome back, Mohamed!", {style: new text_style.TextStyle.new({fontSize: 24, fontWeight: ui.FontWeight.bold})}), new basic.SizedBox.new({height: 10}), new text$.Text.new("Balance: 256 coins", {style: new text_style.TextStyle.new({fontSize: 20, color: colors.Colors.grey})}), new basic.SizedBox.new({height: 20}), new basic.Expanded.new({child: new scroll_view.ListView.new({children: T$.JSArrayOfWidget().of([this[_buildCard]({title: "Grades Summary", content: "Overall: 42% increase\nMaths: 18.25/20\nPhysics: 14.5/20\nEnglish: 20/20\nFrench: 1.5/20", color: colors.Colors.lightBlueAccent}), new basic.SizedBox.new({height: 10}), this[_buildCard]({title: "Achievements Progress", content: "This month:\n42% more increase in grades\n37% more increase in studying time\nBetter sleep schedule", color: colors.Colors.greenAccent}), new basic.SizedBox.new({height: 10}), this[_buildCard]({title: "Upcoming Sessions", content: "In 10 minutes: Pick up French notes\n8:15 AM: Revise notes with Jane", color: colors.Colors.orangeAccent}), new basic.SizedBox.new({height: 10}), this[_buildCard]({title: "Currency Earned Yesterday", content: "+10 from achievements\n+3 from Chat-Bot", color: colors.Colors.purpleAccent})])})})])})})});
    }
    [_buildCard](opts) {
      let title = opts && 'title' in opts ? opts.title : null;
      let content = opts && 'content' in opts ? opts.content : null;
      let color = opts && 'color' in opts ? opts.color : null;
      return new card.Card.new({color: color, child: new basic.Padding.new({padding: C[20] || CT.C20, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: T$.JSArrayOfWidget().of([new text$.Text.new(title, {style: new text_style.TextStyle.new({fontSize: 20, fontWeight: ui.FontWeight.bold})}), new basic.SizedBox.new({height: 10}), new text$.Text.new(content, {style: new text_style.TextStyle.new({fontSize: 16})})])})})});
    }
  };
  (main.HomeMenu.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.HomeMenu.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.HomeMenu.prototype;
  dart.addTypeTests(main.HomeMenu);
  dart.addTypeCaches(main.HomeMenu);
  dart.setMethodSignature(main.HomeMenu, () => ({
    __proto__: dart.getMethods(main.HomeMenu.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_buildCard]: dart.fnType(framework.Widget, [], {}, {color: ui.Color, content: core.String, title: core.String})
  }));
  dart.setLibraryUri(main.HomeMenu, I[0]);
  var text$0 = dart.privateName(main, "TypewriterText.text");
  main.TypewriterText = class TypewriterText extends framework.StatefulWidget {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    static ['_#new#tearOff'](text, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.TypewriterText.new(text, {key: key});
    }
    createState() {
      return new main._TypewriterTextState.new();
    }
  };
  (main.TypewriterText.new = function(text, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    this[text$0] = text;
    main.TypewriterText.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.TypewriterText.prototype;
  dart.addTypeTests(main.TypewriterText);
  dart.addTypeCaches(main.TypewriterText);
  dart.setMethodSignature(main.TypewriterText, () => ({
    __proto__: dart.getMethods(main.TypewriterText.__proto__),
    createState: dart.fnType(main._TypewriterTextState, [])
  }));
  dart.setLibraryUri(main.TypewriterText, I[0]);
  dart.setFieldSignature(main.TypewriterText, () => ({
    __proto__: dart.getFields(main.TypewriterText.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  var ___TypewriterTextState__controller = dart.privateName(main, "_#_TypewriterTextState#_controller");
  var ___TypewriterTextState__animation = dart.privateName(main, "_#_TypewriterTextState#_animation");
  var _controller = dart.privateName(main, "_controller");
  var _animation = dart.privateName(main, "_animation");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(main.TypewriterText) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(main.TypewriterText)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(main.TypewriterText));
  main._TypewriterTextState = class _TypewriterTextState extends State_SingleTickerProviderStateMixin$36 {
    get [_controller]() {
      let t1;
      t1 = this[___TypewriterTextState__controller];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t1;
    }
    set [_controller](_controller$35param) {
      this[___TypewriterTextState__controller] = _controller$35param;
    }
    get [_animation]() {
      let t1;
      t1 = this[___TypewriterTextState__animation];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_animation")) : t1;
    }
    set [_animation](_animation$35param) {
      this[___TypewriterTextState__animation] = _animation$35param;
    }
    initState() {
      super.initState();
      this[_controller] = new animation_controller.AnimationController.new({duration: new core.Duration.new({milliseconds: this.widget.text.length * 50}), vsync: this});
      this[_animation] = new tween.IntTween.new({begin: 0, end: this.widget.text.length}).animate(this[_controller]);
      this[_controller].forward();
    }
    dispose() {
      this[_controller].dispose();
      super.dispose();
    }
    build(context) {
      return new transitions.AnimatedBuilder.new({animation: this[_animation], builder: dart.fn((context, child) => new text$.Text.new(this.widget.text[$substring](0, this[_animation].value), {style: new text_style.TextStyle.new({color: colors.Colors.black87})}), T$.BuildContextAndWidgetNToText())});
    }
    static ['_#new#tearOff']() {
      return new main._TypewriterTextState.new();
    }
  };
  (main._TypewriterTextState.new = function() {
    this[___TypewriterTextState__controller] = null;
    this[___TypewriterTextState__animation] = null;
    main._TypewriterTextState.__proto__.new.call(this);
    ;
  }).prototype = main._TypewriterTextState.prototype;
  dart.addTypeTests(main._TypewriterTextState);
  dart.addTypeCaches(main._TypewriterTextState);
  dart.setMethodSignature(main._TypewriterTextState, () => ({
    __proto__: dart.getMethods(main._TypewriterTextState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(main._TypewriterTextState, () => ({
    __proto__: dart.getGetters(main._TypewriterTextState.__proto__),
    [_controller]: animation_controller.AnimationController,
    [_animation]: animation.Animation$(core.int)
  }));
  dart.setSetterSignature(main._TypewriterTextState, () => ({
    __proto__: dart.getSetters(main._TypewriterTextState.__proto__),
    [_controller]: animation_controller.AnimationController,
    [_animation]: animation.Animation$(core.int)
  }));
  dart.setLibraryUri(main._TypewriterTextState, I[0]);
  dart.setFieldSignature(main._TypewriterTextState, () => ({
    __proto__: dart.getFields(main._TypewriterTextState.__proto__),
    [___TypewriterTextState__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___TypewriterTextState__animation]: dart.fieldType(dart.nullable(animation.Animation$(core.int)))
  }));
  main.main = function main$0() {
    binding$.runApp(C[21] || CT.C21);
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  http.head = function head(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.head(url, {headers: headers}), T$.ClientToFutureOfResponse()));
  };
  http.get = function get(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.get(url, {headers: headers}), T$.ClientToFutureOfResponse()));
  };
  http.post = function post(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.post(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.put = function put(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.put(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.patch = function patch(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.patch(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.delete = function $delete(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.delete(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.read = function read(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(core.String, dart.fn(client => client.read(url, {headers: headers}), T$.ClientToFutureOfString()));
  };
  http.readBytes = function readBytes(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(typed_data.Uint8List, dart.fn(client => client.readBytes(url, {headers: headers}), T$.ClientToFutureOfUint8List()));
  };
  http._withClient = function _withClient(T, fn) {
    return async.async(T, function* _withClient() {
      let client = client$.Client.new();
      try {
        return yield fn(client);
      } finally {
        client.close();
      }
    });
  };
  schedule_menu.ScheduleMenu = class ScheduleMenu extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new schedule_menu.ScheduleMenu.new({key: key});
    }
    createState() {
      return new schedule_menu._ScheduleMenuState.new();
    }
  };
  (schedule_menu.ScheduleMenu.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    schedule_menu.ScheduleMenu.__proto__.new.call(this, {key: key});
    ;
  }).prototype = schedule_menu.ScheduleMenu.prototype;
  dart.addTypeTests(schedule_menu.ScheduleMenu);
  dart.addTypeCaches(schedule_menu.ScheduleMenu);
  dart.setMethodSignature(schedule_menu.ScheduleMenu, () => ({
    __proto__: dart.getMethods(schedule_menu.ScheduleMenu.__proto__),
    createState: dart.fnType(schedule_menu._ScheduleMenuState, [])
  }));
  dart.setLibraryUri(schedule_menu.ScheduleMenu, I[1]);
  var _calendarFormat = dart.privateName(schedule_menu, "_calendarFormat");
  var _focusedDay = dart.privateName(schedule_menu, "_focusedDay");
  var _selectedDay = dart.privateName(schedule_menu, "_selectedDay");
  schedule_menu._ScheduleMenuState = class _ScheduleMenuState extends framework.State$(schedule_menu.ScheduleMenu) {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text$.Text.new("Schedule")}), body: new table_calendar$.TableCalendar.new({firstDay: new core.DateTime.utc(2021, 1, 1), lastDay: new core.DateTime.utc(2030, 12, 31), focusedDay: this[_focusedDay], calendarFormat: this[_calendarFormat], selectedDayPredicate: dart.fn(day => utils$.isSameDay(this[_selectedDay], day), T$.DateTimeTobool()), onDaySelected: dart.fn((selectedDay, focusedDay) => {
            this.setState(dart.fn(() => {
              this[_selectedDay] = selectedDay;
              this[_focusedDay] = focusedDay;
            }, T$.VoidTovoid()));
          }, T$.DateTimeAndDateTimeTovoid()), onFormatChanged: dart.fn(format => {
            this.setState(dart.fn(() => {
              this[_calendarFormat] = format;
            }, T$.VoidTovoid()));
          }, T$.CalendarFormatTovoid())})});
    }
    static ['_#new#tearOff']() {
      return new schedule_menu._ScheduleMenuState.new();
    }
  };
  (schedule_menu._ScheduleMenuState.new = function() {
    this[_calendarFormat] = utils$.CalendarFormat.month;
    this[_focusedDay] = new core.DateTime.now();
    this[_selectedDay] = null;
    schedule_menu._ScheduleMenuState.__proto__.new.call(this);
    ;
  }).prototype = schedule_menu._ScheduleMenuState.prototype;
  dart.addTypeTests(schedule_menu._ScheduleMenuState);
  dart.addTypeCaches(schedule_menu._ScheduleMenuState);
  dart.setMethodSignature(schedule_menu._ScheduleMenuState, () => ({
    __proto__: dart.getMethods(schedule_menu._ScheduleMenuState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(schedule_menu._ScheduleMenuState, I[1]);
  dart.setFieldSignature(schedule_menu._ScheduleMenuState, () => ({
    __proto__: dart.getFields(schedule_menu._ScheduleMenuState.__proto__),
    [_calendarFormat]: dart.fieldType(utils$.CalendarFormat),
    [_focusedDay]: dart.fieldType(core.DateTime),
    [_selectedDay]: dart.fieldType(dart.nullable(core.DateTime))
  }));
  var _buildForumSection = dart.privateName(community_tab, "_buildForumSection");
  community_tab.CommunityTab = class CommunityTab extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new community_tab.CommunityTab.new({key: key});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text$.Text.new("Community")}), body: new scroll_view.ListView.new({children: T$.JSArrayOfWidget().of([this[_buildForumSection]("Announcements", T$.JSArrayOfString().of(["Welcome to the forums!", "Rules and support"])), this[_buildForumSection]("Public Forums", T$.JSArrayOfString().of(["How to get started on StudySphere", "Better plan your schedule"]))])})});
    }
    [_buildForumSection](title, topics) {
      return new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: (() => {
          let t1 = T$.JSArrayOfWidget().of([new basic.Padding.new({padding: C[19] || CT.C19, child: new text$.Text.new(title, {style: new text_style.TextStyle.new({fontSize: 18, fontWeight: ui.FontWeight.bold})})})]);
          t1[$addAll](topics[$map](framework.Widget, dart.fn(topic => new list_tile.ListTile.new({leading: new icon.Icon.new(icons.Icons.forum), title: new text$.Text.new(topic), trailing: new icon.Icon.new(icons.Icons.arrow_forward_ios), onTap: dart.fn(() => {
            }, T$.VoidTovoid())}), T$.StringToListTile())));
          return t1;
        })()});
    }
  };
  (community_tab.CommunityTab.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    community_tab.CommunityTab.__proto__.new.call(this, {key: key});
    ;
  }).prototype = community_tab.CommunityTab.prototype;
  dart.addTypeTests(community_tab.CommunityTab);
  dart.addTypeCaches(community_tab.CommunityTab);
  dart.setMethodSignature(community_tab.CommunityTab, () => ({
    __proto__: dart.getMethods(community_tab.CommunityTab.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_buildForumSection]: dart.fnType(framework.Widget, [core.String, core.List$(core.String)])
  }));
  dart.setLibraryUri(community_tab.CommunityTab, I[2]);
  loading_screen.LoadingScreen = class LoadingScreen extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new loading_screen.LoadingScreen.new({key: key});
    }
    build(context) {
      return new scaffold.Scaffold.new({backgroundColor: colors.Colors.blue, body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new image.Image.asset("assets/stud_sphere_profile.png", {height: 100}), new basic.SizedBox.new({height: 20}), new progress_indicator.CircularProgressIndicator.new({color: colors.Colors.white})])})})});
    }
  };
  (loading_screen.LoadingScreen.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    loading_screen.LoadingScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = loading_screen.LoadingScreen.prototype;
  dart.addTypeTests(loading_screen.LoadingScreen);
  dart.addTypeCaches(loading_screen.LoadingScreen);
  dart.setMethodSignature(loading_screen.LoadingScreen, () => ({
    __proto__: dart.getMethods(loading_screen.LoadingScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(loading_screen.LoadingScreen, I[3]);
  profile_page.ProfilePage = class ProfilePage extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new profile_page.ProfilePage.new({key: key});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text$.Text.new("Profile")}), body: new basic.Column.new({children: T$.JSArrayOfWidget().of([new basic.SizedBox.new({height: 20}), new circle_avatar.CircleAvatar.new({radius: 50, backgroundImage: new image_resolution.AssetImage.new("assets/pfp.png")}), new basic.SizedBox.new({height: 20}), new text$.Text.new("Mohamed Attia", {style: new text_style.TextStyle.new({fontSize: 24, fontWeight: ui.FontWeight.bold})}), new basic.SizedBox.new({height: 10}), new text$.Text.new("Student", {style: new text_style.TextStyle.new({fontSize: 18, color: colors.Colors.grey})}), new basic.SizedBox.new({height: 20}), new list_tile.ListTile.new({leading: new icon.Icon.new(icons.Icons.school), title: new text$.Text.new("Education"), subtitle: new text$.Text.new("Computer Science, University of XYZ")}), new list_tile.ListTile.new({leading: new icon.Icon.new(icons.Icons.emoji_events), title: new text$.Text.new("Achievements"), subtitle: new text$.Text.new("10 badges earned")}), new list_tile.ListTile.new({leading: new icon.Icon.new(icons.Icons.access_time), title: new text$.Text.new("Study Time"), subtitle: new text$.Text.new("120 hours this month")})])})});
    }
  };
  (profile_page.ProfilePage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    profile_page.ProfilePage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = profile_page.ProfilePage.prototype;
  dart.addTypeTests(profile_page.ProfilePage);
  dart.addTypeCaches(profile_page.ProfilePage);
  dart.setMethodSignature(profile_page.ProfilePage, () => ({
    __proto__: dart.getMethods(profile_page.ProfilePage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(profile_page.ProfilePage, I[4]);
  client$.Client = class Client extends core.Object {
    static new() {
      let t2;
      t2 = client$.zoneClient;
      return t2 == null ? browser_client.createClient() : t2;
    }
    static ['_#new#tearOff']() {
      return client$.Client.new();
    }
  };
  (client$.Client[dart.mixinNew] = function() {
  }).prototype = client$.Client.prototype;
  dart.addTypeTests(client$.Client);
  dart.addTypeCaches(client$.Client);
  dart.setStaticMethodSignature(client$.Client, () => ['new']);
  dart.setLibraryUri(client$.Client, I[5]);
  var _clientToken = dart.privateName(client$, "_clientToken");
  client$.runWithClient = function runWithClient(R, body, clientFactory, opts) {
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    return async.runZoned(R, body, {zoneValues: new (T$.LinkedMapOfObjectN$ObjectN()).from([C[22] || CT.C22, async.Zone.current.bindCallback(client$.Client, clientFactory)]), zoneSpecification: zoneSpecification});
  };
  dart.copyProperties(client$, {
    get zoneClient() {
      let client = async.Zone.current._get(C[22] || CT.C22);
      return client == null ? null : T$.VoidToClient().as(client)();
    }
  });
  var message$ = dart.privateName(exception, "ClientException.message");
  var uri$ = dart.privateName(exception, "ClientException.uri");
  exception.ClientException = class ClientException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](message, uri = null) {
      return new exception.ClientException.new(message, uri);
    }
    toString() {
      return this.message;
    }
  };
  (exception.ClientException.new = function(message, uri = null) {
    this[message$] = message;
    this[uri$] = uri;
    ;
  }).prototype = exception.ClientException.prototype;
  dart.addTypeTests(exception.ClientException);
  dart.addTypeCaches(exception.ClientException);
  exception.ClientException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exception.ClientException, I[6]);
  dart.setFieldSignature(exception.ClientException, () => ({
    __proto__: dart.getFields(exception.ClientException.__proto__),
    message: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(exception.ClientException, ['toString']);
  var _defaultEncoding = dart.privateName(request$, "_defaultEncoding");
  var _bodyBytes = dart.privateName(request$, "_bodyBytes");
  var _contentType = dart.privateName(request$, "_contentType");
  var _checkFinalized = dart.privateName(request$, "_checkFinalized");
  var method$ = dart.privateName(base_request, "BaseRequest.method");
  var url$ = dart.privateName(base_request, "BaseRequest.url");
  var headers = dart.privateName(base_request, "BaseRequest.headers");
  var _contentLength = dart.privateName(base_request, "_contentLength");
  var _persistentConnection = dart.privateName(base_request, "_persistentConnection");
  var _followRedirects = dart.privateName(base_request, "_followRedirects");
  var _maxRedirects = dart.privateName(base_request, "_maxRedirects");
  var _finalized = dart.privateName(base_request, "_finalized");
  var _checkFinalized$ = dart.privateName(base_request, "_checkFinalized");
  var StreamView__stream = dart.privateName(async, "StreamView._stream");
  base_request.BaseRequest = class BaseRequest extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[headers];
    }
    set headers(value) {
      super.headers = value;
    }
    get contentLength() {
      return this[_contentLength];
    }
    set contentLength(value) {
      if (value != null && dart.notNull(value) < 0) {
        dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(value) + "."));
      }
      this[_checkFinalized$]();
      this[_contentLength] = value;
    }
    get persistentConnection() {
      return this[_persistentConnection];
    }
    set persistentConnection(value) {
      this[_checkFinalized$]();
      this[_persistentConnection] = value;
    }
    get followRedirects() {
      return this[_followRedirects];
    }
    set followRedirects(value) {
      this[_checkFinalized$]();
      this[_followRedirects] = value;
    }
    get maxRedirects() {
      return this[_maxRedirects];
    }
    set maxRedirects(value) {
      this[_checkFinalized$]();
      this[_maxRedirects] = value;
    }
    get finalized() {
      return this[_finalized];
    }
    static _validateMethod(method) {
      if (!base_request.BaseRequest._tokenRE.hasMatch(method)) {
        dart.throw(new core.ArgumentError.value(method, "method", "Not a valid method"));
      }
      return method;
    }
    finalize() {
      if (this.finalized) dart.throw(new core.StateError.new("Can't finalize a finalized Request."));
      this[_finalized] = true;
      return C[23] || CT.C23;
    }
    send() {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let client = client$.Client.new();
        try {
          let response = (yield client.send(this));
          let stream = utils.onDone(T$.ListOfint(), response.stream, dart.bind(client, 'close'));
          return new streamed_response.StreamedResponse.new(new byte_stream.ByteStream.new(stream), response.statusCode, {contentLength: response.contentLength, request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Object.is(_)) {
            client.close();
            dart.rethrow(e);
          } else
            throw e;
        }
      }).bind(this));
    }
    [_checkFinalized$]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
    toString() {
      return this.method + " " + dart.str(this.url);
    }
  };
  (base_request.BaseRequest.new = function(method, url) {
    this[_contentLength] = null;
    this[_persistentConnection] = true;
    this[_followRedirects] = true;
    this[_maxRedirects] = 5;
    this[_finalized] = false;
    this[url$] = url;
    this[method$] = base_request.BaseRequest._validateMethod(method);
    this[headers] = T$.LinkedHashMapOfString$String().new({equals: dart.fn((key1, key2) => key1[$toLowerCase]() === key2[$toLowerCase](), T$.StringAndStringTobool()), hashCode: dart.fn(key => key[$toLowerCase]()[$hashCode], T$.StringToint())});
    ;
  }).prototype = base_request.BaseRequest.prototype;
  dart.addTypeTests(base_request.BaseRequest);
  dart.addTypeCaches(base_request.BaseRequest);
  dart.setMethodSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getMethods(base_request.BaseRequest.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, []),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), []),
    [_checkFinalized$]: dart.fnType(dart.void, [])
  }));
  dart.setStaticMethodSignature(base_request.BaseRequest, () => ['_validateMethod']);
  dart.setGetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getGetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int,
    finalized: core.bool
  }));
  dart.setSetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getSetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int
  }));
  dart.setLibraryUri(base_request.BaseRequest, I[7]);
  dart.setFieldSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getFields(base_request.BaseRequest.__proto__),
    method: dart.finalFieldType(core.String),
    url: dart.finalFieldType(core.Uri),
    [_contentLength]: dart.fieldType(dart.nullable(core.int)),
    [_persistentConnection]: dart.fieldType(core.bool),
    [_followRedirects]: dart.fieldType(core.bool),
    [_maxRedirects]: dart.fieldType(core.int),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    [_finalized]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(base_request.BaseRequest, () => ['_tokenRE']);
  dart.defineExtensionMethods(base_request.BaseRequest, ['toString']);
  dart.defineLazy(base_request.BaseRequest, {
    /*base_request.BaseRequest._tokenRE*/get _tokenRE() {
      return core.RegExp.new("^[\\w!#%&'*+\\-.^`|~]+$");
    }
  }, false);
  request$.Request = class Request extends base_request.BaseRequest {
    get contentLength() {
      return this.bodyBytes[$length];
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "non-streaming Request objects."));
    }
    get encoding() {
      if (this[_contentType] == null || !dart.nullCheck(this[_contentType]).parameters[$containsKey]("charset")) {
        return this[_defaultEncoding];
      }
      return utils.requiredEncodingForCharset(dart.nullCheck(dart.nullCheck(this[_contentType]).parameters[$_get]("charset")));
    }
    set encoding(value) {
      this[_checkFinalized]();
      this[_defaultEncoding] = value;
      let contentType = this[_contentType];
      if (contentType == null) return;
      this[_contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", value.name])});
    }
    get bodyBytes() {
      return this[_bodyBytes];
    }
    set bodyBytes(value) {
      this[_checkFinalized]();
      this[_bodyBytes] = utils.toUint8List(value);
    }
    get body() {
      return this.encoding.decode(this.bodyBytes);
    }
    set body(value) {
      this.bodyBytes = this.encoding.encode(value);
      let contentType = this[_contentType];
      if (contentType == null) {
        this[_contentType] = new media_type.MediaType.new("text", "plain", new (T$.IdentityMapOfString$String()).from(["charset", this.encoding.name]));
      } else if (!contentType.parameters[$containsKey]("charset")) {
        this[_contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", this.encoding.name])});
      }
    }
    get bodyFields() {
      let contentType = this[_contentType];
      if (contentType == null || contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot access the body fields of a Request without " + "content-type \"application/x-www-form-urlencoded\"."));
      }
      return core.Uri.splitQueryString(this.body, {encoding: this.encoding});
    }
    set bodyFields(fields) {
      let contentType = this[_contentType];
      if (contentType == null) {
        this[_contentType] = new media_type.MediaType.new("application", "x-www-form-urlencoded");
      } else if (contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot set the body fields of a Request with " + "content-type \"" + contentType.mimeType + "\"."));
      }
      this.body = utils.mapToQuery(fields, {encoding: this.encoding});
    }
    static ['_#new#tearOff'](method, url) {
      return new request$.Request.new(method, url);
    }
    finalize() {
      super.finalize();
      return byte_stream.ByteStream.fromBytes(this.bodyBytes);
    }
    get [_contentType]() {
      let contentType = this.headers[$_get]("content-type");
      if (contentType == null) return null;
      return media_type.MediaType.parse(contentType);
    }
    set [_contentType](value) {
      if (value == null) {
        this.headers[$remove]("content-type");
      } else {
        this.headers[$_set]("content-type", dart.toString(value));
      }
    }
    [_checkFinalized]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
  };
  (request$.Request.new = function(method, url) {
    this[_defaultEncoding] = convert.utf8;
    this[_bodyBytes] = _native_typed_data.NativeUint8List.new(0);
    request$.Request.__proto__.new.call(this, method, url);
    ;
  }).prototype = request$.Request.prototype;
  dart.addTypeTests(request$.Request);
  dart.addTypeCaches(request$.Request);
  dart.setMethodSignature(request$.Request, () => ({
    __proto__: dart.getMethods(request$.Request.__proto__),
    [_checkFinalized]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(request$.Request, () => ({
    __proto__: dart.getGetters(request$.Request.__proto__),
    contentLength: core.int,
    encoding: convert.Encoding,
    bodyBytes: typed_data.Uint8List,
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [_contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setSetterSignature(request$.Request, () => ({
    __proto__: dart.getSetters(request$.Request.__proto__),
    encoding: convert.Encoding,
    bodyBytes: core.List$(core.int),
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [_contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setLibraryUri(request$.Request, I[8]);
  dart.setFieldSignature(request$.Request, () => ({
    __proto__: dart.getFields(request$.Request.__proto__),
    [_defaultEncoding]: dart.fieldType(convert.Encoding),
    [_bodyBytes]: dart.fieldType(typed_data.Uint8List)
  }));
  var bodyBytes$ = dart.privateName(response$, "Response.bodyBytes");
  var request$0 = dart.privateName(base_response, "BaseResponse.request");
  var statusCode$ = dart.privateName(base_response, "BaseResponse.statusCode");
  var reasonPhrase$ = dart.privateName(base_response, "BaseResponse.reasonPhrase");
  var contentLength$ = dart.privateName(base_response, "BaseResponse.contentLength");
  var headers$ = dart.privateName(base_response, "BaseResponse.headers");
  var isRedirect$ = dart.privateName(base_response, "BaseResponse.isRedirect");
  var persistentConnection$ = dart.privateName(base_response, "BaseResponse.persistentConnection");
  base_response.BaseResponse = class BaseResponse extends core.Object {
    get request() {
      return this[request$0];
    }
    set request(value) {
      super.request = value;
    }
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get reasonPhrase() {
      return this[reasonPhrase$];
    }
    set reasonPhrase(value) {
      super.reasonPhrase = value;
    }
    get contentLength() {
      return this[contentLength$];
    }
    set contentLength(value) {
      super.contentLength = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    get isRedirect() {
      return this[isRedirect$];
    }
    set isRedirect(value) {
      super.isRedirect = value;
    }
    get persistentConnection() {
      return this[persistentConnection$];
    }
    set persistentConnection(value) {
      super.persistentConnection = value;
    }
  };
  (base_response.BaseResponse.new = function(statusCode, opts) {
    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[25] || CT.C25;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[statusCode$] = statusCode;
    this[contentLength$] = contentLength;
    this[request$0] = request;
    this[headers$] = headers;
    this[isRedirect$] = isRedirect;
    this[persistentConnection$] = persistentConnection;
    this[reasonPhrase$] = reasonPhrase;
    if (this.statusCode < 100) {
      dart.throw(new core.ArgumentError.new("Invalid status code " + dart.str(this.statusCode) + "."));
    } else if (this.contentLength != null && dart.nullCheck(this.contentLength) < 0) {
      dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(this.contentLength) + "."));
    }
  }).prototype = base_response.BaseResponse.prototype;
  dart.addTypeTests(base_response.BaseResponse);
  dart.addTypeCaches(base_response.BaseResponse);
  dart.setLibraryUri(base_response.BaseResponse, I[9]);
  dart.setFieldSignature(base_response.BaseResponse, () => ({
    __proto__: dart.getFields(base_response.BaseResponse.__proto__),
    request: dart.finalFieldType(dart.nullable(base_request.BaseRequest)),
    statusCode: dart.finalFieldType(core.int),
    reasonPhrase: dart.finalFieldType(dart.nullable(core.String)),
    contentLength: dart.finalFieldType(dart.nullable(core.int)),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    isRedirect: dart.finalFieldType(core.bool),
    persistentConnection: dart.finalFieldType(core.bool)
  }));
  response$.Response = class Response extends base_response.BaseResponse {
    get bodyBytes() {
      return this[bodyBytes$];
    }
    set bodyBytes(value) {
      super.bodyBytes = value;
    }
    get body() {
      return response$._encodingForHeaders(this.headers).decode(this.bodyBytes);
    }
    static ['_#new#tearOff'](body, statusCode, opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[25] || CT.C25;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new response$.Response.new(body, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static ['_#bytes#tearOff'](bodyBytes, statusCode, opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new response$.Response.bytes(bodyBytes, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static fromStream(response) {
      return async.async(response$.Response, function* fromStream() {
        let body = (yield response.stream.toBytes());
        return new response$.Response.bytes(body, response.statusCode, {request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
      });
    }
  };
  (response$.Response.new = function(body, statusCode, opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[25] || CT.C25;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    response$.Response.bytes.call(this, response$._encodingForHeaders(headers).encode(body), statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
  }).prototype = response$.Response.prototype;
  (response$.Response.bytes = function(bodyBytes, statusCode, opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[25] || CT.C25;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[bodyBytes$] = utils.toUint8List(bodyBytes);
    response$.Response.__proto__.new.call(this, statusCode, {contentLength: bodyBytes[$length], request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = response$.Response.prototype;
  dart.addTypeTests(response$.Response);
  dart.addTypeCaches(response$.Response);
  dart.setStaticMethodSignature(response$.Response, () => ['fromStream']);
  dart.setGetterSignature(response$.Response, () => ({
    __proto__: dart.getGetters(response$.Response.__proto__),
    body: core.String
  }));
  dart.setLibraryUri(response$.Response, I[10]);
  dart.setFieldSignature(response$.Response, () => ({
    __proto__: dart.getFields(response$.Response.__proto__),
    bodyBytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  response$._encodingForHeaders = function _encodingForHeaders(headers) {
    return utils.encodingForCharset(response$._contentTypeForHeaders(headers).parameters[$_get]("charset"));
  };
  response$._contentTypeForHeaders = function _contentTypeForHeaders(headers) {
    let contentType = headers[$_get]("content-type");
    if (contentType != null) return media_type.MediaType.parse(contentType);
    return new media_type.MediaType.new("application", "octet-stream");
  };
  var _controller$ = dart.privateName(streamed_request, "_controller");
  streamed_request.StreamedRequest = class StreamedRequest extends base_request.BaseRequest {
    get sink() {
      return this[_controller$].sink;
    }
    static ['_#new#tearOff'](method, url) {
      return new streamed_request.StreamedRequest.new(method, url);
    }
    finalize() {
      super.finalize();
      return new byte_stream.ByteStream.new(this[_controller$].stream);
    }
  };
  (streamed_request.StreamedRequest.new = function(method, url) {
    this[_controller$] = T$.StreamControllerOfListOfint().new({sync: true});
    streamed_request.StreamedRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = streamed_request.StreamedRequest.prototype;
  dart.addTypeTests(streamed_request.StreamedRequest);
  dart.addTypeCaches(streamed_request.StreamedRequest);
  dart.setGetterSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getGetters(streamed_request.StreamedRequest.__proto__),
    sink: async.EventSink$(core.List$(core.int))
  }));
  dart.setLibraryUri(streamed_request.StreamedRequest, I[11]);
  dart.setFieldSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getFields(streamed_request.StreamedRequest.__proto__),
    [_controller$]: dart.finalFieldType(async.StreamController$(core.List$(core.int)))
  }));
  var _sendUnstreamed = dart.privateName(base_client, "_sendUnstreamed");
  var _checkResponseSuccess = dart.privateName(base_client, "_checkResponseSuccess");
  base_client.BaseClient = class BaseClient extends core.Object {
    head(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this[_sendUnstreamed]("HEAD", url, headers);
    }
    get(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this[_sendUnstreamed]("GET", url, headers);
    }
    post(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("POST", url, headers, body, encoding);
    }
    put(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("PUT", url, headers, body, encoding);
    }
    patch(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("PATCH", url, headers, body, encoding);
    }
    delete(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("DELETE", url, headers, body, encoding);
    }
    read(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(core.String, (function* read() {
        let response = (yield this.get(url, {headers: headers}));
        this[_checkResponseSuccess](url, response);
        return response.body;
      }).bind(this));
    }
    readBytes(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(typed_data.Uint8List, (function* readBytes() {
        let response = (yield this.get(url, {headers: headers}));
        this[_checkResponseSuccess](url, response);
        return response.bodyBytes;
      }).bind(this));
    }
    [_sendUnstreamed](method, url, headers, body = null, encoding = null) {
      return async.async(response$.Response, (function* _sendUnstreamed() {
        let request = new request$.Request.new(method, url);
        if (headers != null) request.headers[$addAll](headers);
        if (encoding != null) request.encoding = encoding;
        if (body != null) {
          if (typeof body == 'string') {
            request.body = body;
          } else if (core.List.is(body)) {
            request.bodyBytes = body[$cast](core.int);
          } else if (core.Map.is(body)) {
            request.bodyFields = body[$cast](core.String, core.String);
          } else {
            dart.throw(new core.ArgumentError.new("Invalid request body \"" + dart.str(body) + "\"."));
          }
        }
        return response$.Response.fromStream(yield this.send(request));
      }).bind(this));
    }
    [_checkResponseSuccess](url, response) {
      if (response.statusCode < 400) return;
      let message = "Request to " + dart.str(url) + " failed with status " + dart.str(response.statusCode);
      if (response.reasonPhrase != null) {
        message = message + ": " + dart.str(response.reasonPhrase);
      }
      dart.throw(new exception.ClientException.new(message + ".", url));
    }
    close() {
    }
  };
  (base_client.BaseClient.new = function() {
    ;
  }).prototype = base_client.BaseClient.prototype;
  dart.addTypeTests(base_client.BaseClient);
  dart.addTypeCaches(base_client.BaseClient);
  base_client.BaseClient[dart.implements] = () => [client$.Client];
  dart.setMethodSignature(base_client.BaseClient, () => ({
    __proto__: dart.getMethods(base_client.BaseClient.__proto__),
    head: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    get: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    post: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    put: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    patch: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    delete: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    read: dart.fnType(async.Future$(core.String), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    readBytes: dart.fnType(async.Future$(typed_data.Uint8List), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    [_sendUnstreamed]: dart.fnType(async.Future$(response$.Response), [core.String, core.Uri, dart.nullable(core.Map$(core.String, core.String))], [dart.nullable(core.Object), dart.nullable(convert.Encoding)]),
    [_checkResponseSuccess]: dart.fnType(dart.void, [core.Uri, response$.Response]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(base_client.BaseClient, I[12]);
  var Utf8Codec__allowMalformed = dart.privateName(convert, "Utf8Codec._allowMalformed");
  byte_stream.ByteStream = class ByteStream extends async.StreamView$(core.List$(core.int)) {
    static ['_#new#tearOff'](stream) {
      return new byte_stream.ByteStream.new(stream);
    }
    static fromBytes(bytes) {
      return new byte_stream.ByteStream.new(T$.StreamOfListOfint().value(bytes));
    }
    static ['_#fromBytes#tearOff'](bytes) {
      return byte_stream.ByteStream.fromBytes(bytes);
    }
    toBytes() {
      let completer = T$.CompleterOfUint8List().new();
      let sink = new convert._ByteCallbackSink.new(dart.fn(bytes => completer.complete(_native_typed_data.NativeUint8List.fromList(bytes)), T$.ListOfintTovoid()));
      this.listen(T$.ListOfintTovoid().as(dart.bind(sink, 'add')), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(sink, 'close'), cancelOnError: true});
      return completer.future;
    }
    bytesToString(encoding = C[26] || CT.C26) {
      return encoding.decodeStream(this);
    }
    toStringStream(encoding = C[26] || CT.C26) {
      return encoding.decoder.bind(this);
    }
  };
  (byte_stream.ByteStream.new = function(stream) {
    byte_stream.ByteStream.__proto__.new.call(this, stream);
    ;
  }).prototype = byte_stream.ByteStream.prototype;
  dart.addTypeTests(byte_stream.ByteStream);
  dart.addTypeCaches(byte_stream.ByteStream);
  dart.setMethodSignature(byte_stream.ByteStream, () => ({
    __proto__: dart.getMethods(byte_stream.ByteStream.__proto__),
    toBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    bytesToString: dart.fnType(async.Future$(core.String), [], [convert.Encoding]),
    toStringStream: dart.fnType(async.Stream$(core.String), [], [convert.Encoding])
  }));
  dart.setStaticMethodSignature(byte_stream.ByteStream, () => ['fromBytes']);
  dart.setLibraryUri(byte_stream.ByteStream, I[13]);
  var field$ = dart.privateName(multipart_file, "MultipartFile.field");
  var length$ = dart.privateName(multipart_file, "MultipartFile.length");
  var filename$ = dart.privateName(multipart_file, "MultipartFile.filename");
  var contentType$ = dart.privateName(multipart_file, "MultipartFile.contentType");
  var _isFinalized = dart.privateName(multipart_file, "_isFinalized");
  var _stream = dart.privateName(multipart_file, "_stream");
  multipart_file.MultipartFile = class MultipartFile extends core.Object {
    get field() {
      return this[field$];
    }
    set field(value) {
      super.field = value;
    }
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get filename() {
      return this[filename$];
    }
    set filename(value) {
      super.filename = value;
    }
    get contentType() {
      return this[contentType$];
    }
    set contentType(value) {
      super.contentType = value;
    }
    get isFinalized() {
      return this[_isFinalized];
    }
    static ['_#new#tearOff'](field, stream, length, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return new multipart_file.MultipartFile.new(field, stream, length, {filename: filename, contentType: contentType});
    }
    static fromBytes(field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let stream = byte_stream.ByteStream.fromBytes(value);
      return new multipart_file.MultipartFile.new(field, stream, value[$length], {filename: filename, contentType: contentType});
    }
    static ['_#fromBytes#tearOff'](field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file.MultipartFile.fromBytes(field, value, {filename: filename, contentType: contentType});
    }
    static fromString(field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      contentType == null ? contentType = new media_type.MediaType.new("text", "plain") : null;
      let encoding = utils.encodingForCharset(contentType.parameters[$_get]("charset"), convert.utf8);
      contentType = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", encoding.name])});
      return multipart_file.MultipartFile.fromBytes(field, encoding.encode(value), {filename: filename, contentType: contentType});
    }
    static ['_#fromString#tearOff'](field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file.MultipartFile.fromString(field, value, {filename: filename, contentType: contentType});
    }
    static fromPath(field, filePath, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file_stub.multipartFileFromPath(field, filePath, {filename: filename, contentType: contentType});
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("Can't finalize a finalized MultipartFile."));
      }
      this[_isFinalized] = true;
      return this[_stream];
    }
  };
  (multipart_file.MultipartFile.new = function(field, stream, length, opts) {
    let t3;
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    this[_isFinalized] = false;
    this[field$] = field;
    this[length$] = length;
    this[filename$] = filename;
    this[_stream] = utils.toByteStream(stream);
    this[contentType$] = (t3 = contentType, t3 == null ? new media_type.MediaType.new("application", "octet-stream") : t3);
    ;
  }).prototype = multipart_file.MultipartFile.prototype;
  dart.addTypeTests(multipart_file.MultipartFile);
  dart.addTypeCaches(multipart_file.MultipartFile);
  dart.setMethodSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getMethods(multipart_file.MultipartFile.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, [])
  }));
  dart.setStaticMethodSignature(multipart_file.MultipartFile, () => ['fromBytes', 'fromString', 'fromPath']);
  dart.setGetterSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),
    isFinalized: core.bool
  }));
  dart.setLibraryUri(multipart_file.MultipartFile, I[14]);
  dart.setFieldSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),
    field: dart.finalFieldType(core.String),
    length: dart.finalFieldType(core.int),
    filename: dart.finalFieldType(dart.nullable(core.String)),
    contentType: dart.finalFieldType(media_type.MediaType),
    [_stream]: dart.finalFieldType(byte_stream.ByteStream),
    [_isFinalized]: dart.fieldType(core.bool)
  }));
  var fields = dart.privateName(multipart_request, "MultipartRequest.fields");
  var files = dart.privateName(multipart_request, "MultipartRequest.files");
  var _headerForField = dart.privateName(multipart_request, "_headerForField");
  var _headerForFile = dart.privateName(multipart_request, "_headerForFile");
  var _boundaryString = dart.privateName(multipart_request, "_boundaryString");
  var _finalize = dart.privateName(multipart_request, "_finalize");
  var _browserEncode = dart.privateName(multipart_request, "_browserEncode");
  multipart_request.MultipartRequest = class MultipartRequest extends base_request.BaseRequest {
    get fields() {
      return this[fields];
    }
    set fields(value) {
      super.fields = value;
    }
    get files() {
      return this[files];
    }
    set files(value) {
      super.files = value;
    }
    static ['_#new#tearOff'](method, url) {
      return new multipart_request.MultipartRequest.new(method, url);
    }
    get contentLength() {
      let length = 0;
      this.fields[$forEach](dart.fn((name, value) => {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[_headerForField](name, value))[$length] + convert.utf8.encode(value)[$length] + "\r\n".length);
      }, T$.StringAndStringTovoid()));
      for (let file of this.files) {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[_headerForFile](file))[$length] + file.length + "\r\n".length);
      }
      return length + "--".length + 70 + "--\r\n".length;
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "multipart requests."));
    }
    finalize() {
      let boundary = this[_boundaryString]();
      this.headers[$_set]("content-type", "multipart/form-data; boundary=" + boundary);
      super.finalize();
      return new byte_stream.ByteStream.new(this[_finalize](boundary));
    }
    [_finalize](boundary) {
      return new (T$._AsyncStarImplOfListOfint()).new((function* _finalize(stream) {
        let line = C[27] || CT.C27;
        let separator = convert.utf8.encode("--" + boundary + "\r\n");
        let close = convert.utf8.encode("--" + boundary + "--\r\n");
        for (let field of this.fields[$entries]) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[_headerForField](field.key, field.value)))) return;
          yield;
          if (stream.add(convert.utf8.encode(field.value))) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        for (let file of this.files) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[_headerForFile](file)))) return;
          yield;
          if (stream.addStream(file.finalize())) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        if (stream.add(close)) return;
        yield;
      }).bind(this)).stream;
    }
    [_headerForField](name, value) {
      let header = "content-disposition: form-data; name=\"" + this[_browserEncode](name) + "\"";
      if (!utils.isPlainAscii(value)) {
        header = header + "\r\n" + "content-type: text/plain; charset=utf-8\r\n" + "content-transfer-encoding: binary";
      }
      return header + "\r\n\r\n";
    }
    [_headerForFile](file) {
      let header = "content-type: " + dart.str(file.contentType) + "\r\n" + "content-disposition: form-data; name=\"" + this[_browserEncode](file.field) + "\"";
      if (file.filename != null) {
        header = header + "; filename=\"" + this[_browserEncode](dart.nullCheck(file.filename)) + "\"";
      }
      return header + "\r\n\r\n";
    }
    [_browserEncode](value) {
      return value[$replaceAll](multipart_request._newlineRegExp, "%0D%0A")[$replaceAll]("\"", "%22");
    }
    [_boundaryString]() {
      let prefix = "dart-http-boundary-";
      let list = T$.ListOfint().generate(70 - prefix.length, dart.fn(index => boundary_characters.boundaryCharacters[$_get](multipart_request.MultipartRequest._random.nextInt(boundary_characters.boundaryCharacters[$length])), T$.intToint()), {growable: false});
      return prefix + core.String.fromCharCodes(list);
    }
  };
  (multipart_request.MultipartRequest.new = function(method, url) {
    this[fields] = new (T$.IdentityMapOfString$String()).new();
    this[files] = T$.JSArrayOfMultipartFile().of([]);
    multipart_request.MultipartRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = multipart_request.MultipartRequest.prototype;
  dart.addTypeTests(multipart_request.MultipartRequest);
  dart.addTypeCaches(multipart_request.MultipartRequest);
  dart.setMethodSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getMethods(multipart_request.MultipartRequest.__proto__),
    [_finalize]: dart.fnType(async.Stream$(core.List$(core.int)), [core.String]),
    [_headerForField]: dart.fnType(core.String, [core.String, core.String]),
    [_headerForFile]: dart.fnType(core.String, [multipart_file.MultipartFile]),
    [_browserEncode]: dart.fnType(core.String, [core.String]),
    [_boundaryString]: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getGetters(multipart_request.MultipartRequest.__proto__),
    contentLength: core.int
  }));
  dart.setLibraryUri(multipart_request.MultipartRequest, I[15]);
  dart.setFieldSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getFields(multipart_request.MultipartRequest.__proto__),
    fields: dart.finalFieldType(core.Map$(core.String, core.String)),
    files: dart.finalFieldType(core.List$(multipart_file.MultipartFile))
  }));
  dart.setStaticFieldSignature(multipart_request.MultipartRequest, () => ['_boundaryLength', '_random']);
  dart.defineLazy(multipart_request.MultipartRequest, {
    /*multipart_request.MultipartRequest._boundaryLength*/get _boundaryLength() {
      return 70;
    },
    /*multipart_request.MultipartRequest._random*/get _random() {
      return math.Random.new();
    }
  }, false);
  dart.defineLazy(multipart_request, {
    /*multipart_request._newlineRegExp*/get _newlineRegExp() {
      return core.RegExp.new("\\r\\n|\\r|\\n");
    }
  }, false);
  var stream$ = dart.privateName(streamed_response, "StreamedResponse.stream");
  streamed_response.StreamedResponse = class StreamedResponse extends base_response.BaseResponse {
    get stream() {
      return this[stream$];
    }
    set stream(value) {
      super.stream = value;
    }
    static ['_#new#tearOff'](stream, statusCode, opts) {
      let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new streamed_response.StreamedResponse.new(stream, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
  };
  (streamed_response.StreamedResponse.new = function(stream, statusCode, opts) {
    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[25] || CT.C25;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[stream$] = utils.toByteStream(stream);
    streamed_response.StreamedResponse.__proto__.new.call(this, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = streamed_response.StreamedResponse.prototype;
  dart.addTypeTests(streamed_response.StreamedResponse);
  dart.addTypeCaches(streamed_response.StreamedResponse);
  dart.setLibraryUri(streamed_response.StreamedResponse, I[16]);
  dart.setFieldSignature(streamed_response.StreamedResponse, () => ({
    __proto__: dart.getFields(streamed_response.StreamedResponse.__proto__),
    stream: dart.finalFieldType(byte_stream.ByteStream)
  }));
  var withCredentials = dart.privateName(browser_client, "BrowserClient.withCredentials");
  var _xhrs = dart.privateName(browser_client, "_xhrs");
  var _isClosed = dart.privateName(browser_client, "_isClosed");
  browser_client.BrowserClient = class BrowserClient extends base_client.BaseClient {
    get withCredentials() {
      return this[withCredentials];
    }
    set withCredentials(value) {
      this[withCredentials] = value;
    }
    send(request) {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let t3;
        if (this[_isClosed]) {
          dart.throw(new exception.ClientException.new("HTTP request failed. Client is already closed.", request.url));
        }
        let bytes = (yield request.finalize().toBytes());
        let xhr = html.HttpRequest.new();
        this[_xhrs].add(xhr);
        t3 = xhr;
        (() => {
          t3.open(request.method, dart.str(request.url), {async: true});
          t3[$responseType] = "arraybuffer";
          t3.withCredentials = this.withCredentials;
          return t3;
        })();
        request.headers[$forEach](dart.bind(xhr, 'setRequestHeader'));
        let completer = T$.CompleterOfStreamedResponse().new();
        async.unawaited(xhr[$onLoad].first.then(dart.void, dart.fn(_ => {
          let body = typed_data.ByteBuffer.as(xhr[$response])[$asUint8List]();
          completer.complete(new streamed_response.StreamedResponse.new(byte_stream.ByteStream.fromBytes(body), dart.nullCheck(xhr.status), {contentLength: body[$length], request: request, headers: xhr[$responseHeaders], reasonPhrase: xhr.statusText}));
        }, T$.ProgressEventToNull())));
        async.unawaited(xhr[$onError].first.then(dart.void, dart.fn(_ => {
          completer.completeError(new exception.ClientException.new("XMLHttpRequest error.", request.url), core.StackTrace.current);
        }, T$.ProgressEventToNull())));
        xhr.send(bytes);
        try {
          return yield completer.future;
        } finally {
          this[_xhrs].remove(xhr);
        }
      }).bind(this));
    }
    close() {
      this[_isClosed] = true;
      for (let xhr of this[_xhrs]) {
        xhr.abort();
      }
      this[_xhrs].clear();
    }
    static ['_#new#tearOff']() {
      return new browser_client.BrowserClient.new();
    }
  };
  (browser_client.BrowserClient.new = function() {
    this[_xhrs] = T$.LinkedHashSetOfHttpRequest().new();
    this[withCredentials] = false;
    this[_isClosed] = false;
    ;
  }).prototype = browser_client.BrowserClient.prototype;
  dart.addTypeTests(browser_client.BrowserClient);
  dart.addTypeCaches(browser_client.BrowserClient);
  dart.setMethodSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getMethods(browser_client.BrowserClient.__proto__),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), [base_request.BaseRequest])
  }));
  dart.setLibraryUri(browser_client.BrowserClient, I[17]);
  dart.setFieldSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getFields(browser_client.BrowserClient.__proto__),
    [_xhrs]: dart.finalFieldType(core.Set$(html.HttpRequest)),
    withCredentials: dart.fieldType(core.bool),
    [_isClosed]: dart.fieldType(core.bool)
  }));
  browser_client.createClient = function createClient() {
    ;
    return new browser_client.BrowserClient.new();
  };
  var Latin1Codec__allowInvalid = dart.privateName(convert, "Latin1Codec._allowInvalid");
  utils.mapToQuery = function mapToQuery(map, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    let pairs = T$.JSArrayOfListOfString().of([]);
    map[$forEach](dart.fn((key, value) => {
      let t3, t3$;
      return pairs[$add](T$.JSArrayOfString().of([core.Uri.encodeQueryComponent(key, {encoding: (t3 = encoding, t3 == null ? convert.utf8 : t3)}), core.Uri.encodeQueryComponent(value, {encoding: (t3$ = encoding, t3$ == null ? convert.utf8 : t3$)})]));
    }, T$.StringAndStringTovoid()));
    return pairs[$map](core.String, dart.fn(pair => pair[$_get](0) + "=" + pair[$_get](1), T$.ListOfStringToString()))[$join]("&");
  };
  utils.encodingForCharset = function encodingForCharset(charset, fallback = C[28] || CT.C28) {
    let t3;
    if (charset == null) return fallback;
    t3 = convert.Encoding.getByName(charset);
    return t3 == null ? fallback : t3;
  };
  utils.requiredEncodingForCharset = function requiredEncodingForCharset(charset) {
    let t3;
    t3 = convert.Encoding.getByName(charset);
    return t3 == null ? dart.throw(new core.FormatException.new("Unsupported encoding \"" + charset + "\".")) : t3;
  };
  utils.isPlainAscii = function isPlainAscii(string) {
    return utils._asciiOnly.hasMatch(string);
  };
  utils.toUint8List = function toUint8List(input) {
    if (typed_data.Uint8List.is(input)) return input;
    if (typed_data.TypedData.is(input)) {
      return typed_data.Uint8List.view(typed_data.TypedData.as(input)[$buffer]);
    }
    return _native_typed_data.NativeUint8List.fromList(input);
  };
  utils.toByteStream = function toByteStream(stream) {
    if (byte_stream.ByteStream.is(stream)) return stream;
    return new byte_stream.ByteStream.new(stream);
  };
  utils.onDone = function onDone(T, stream, onDone) {
    return stream.transform(T, new (async._StreamHandlerTransformer$(T, T)).new({handleDone: dart.fn(sink => {
        sink.close();
        onDone();
      }, dart.fnType(dart.void, [async.EventSink$(T)]))}));
  };
  dart.defineLazy(utils, {
    /*utils._asciiOnly*/get _asciiOnly() {
      return core.RegExp.new("^[\\x00-\\x7F]+$");
    }
  }, false);
  multipart_file_stub.multipartFileFromPath = function multipartFileFromPath(field, filePath, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    return dart.throw(new core.UnsupportedError.new("MultipartFile is only supported where dart:io is available."));
  };
  dart.defineLazy(boundary_characters, {
    /*boundary_characters.boundaryCharacters*/get boundaryCharacters() {
      return C[29] || CT.C29;
    }
  }, false);
  var prioritizedBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.prioritizedBuilder");
  var todayBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.todayBuilder");
  var selectedBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.selectedBuilder");
  var rangeStartBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.rangeStartBuilder");
  var rangeEndBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.rangeEndBuilder");
  var withinRangeBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.withinRangeBuilder");
  var outsideBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.outsideBuilder");
  var disabledBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.disabledBuilder");
  var holidayBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.holidayBuilder");
  var defaultBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.defaultBuilder");
  var rangeHighlightBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.rangeHighlightBuilder");
  var singleMarkerBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.singleMarkerBuilder");
  var markerBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.markerBuilder");
  var dowBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.dowBuilder");
  var headerTitleBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.headerTitleBuilder");
  var weekNumberBuilder$ = dart.privateName(calendar_builders, "CalendarBuilders.weekNumberBuilder");
  const _is_CalendarBuilders_default = Symbol('_is_CalendarBuilders_default');
  calendar_builders.CalendarBuilders$ = dart.generic(T => {
    class CalendarBuilders extends core.Object {
      get prioritizedBuilder() {
        return this[prioritizedBuilder$];
      }
      set prioritizedBuilder(value) {
        super.prioritizedBuilder = value;
      }
      get todayBuilder() {
        return this[todayBuilder$];
      }
      set todayBuilder(value) {
        super.todayBuilder = value;
      }
      get selectedBuilder() {
        return this[selectedBuilder$];
      }
      set selectedBuilder(value) {
        super.selectedBuilder = value;
      }
      get rangeStartBuilder() {
        return this[rangeStartBuilder$];
      }
      set rangeStartBuilder(value) {
        super.rangeStartBuilder = value;
      }
      get rangeEndBuilder() {
        return this[rangeEndBuilder$];
      }
      set rangeEndBuilder(value) {
        super.rangeEndBuilder = value;
      }
      get withinRangeBuilder() {
        return this[withinRangeBuilder$];
      }
      set withinRangeBuilder(value) {
        super.withinRangeBuilder = value;
      }
      get outsideBuilder() {
        return this[outsideBuilder$];
      }
      set outsideBuilder(value) {
        super.outsideBuilder = value;
      }
      get disabledBuilder() {
        return this[disabledBuilder$];
      }
      set disabledBuilder(value) {
        super.disabledBuilder = value;
      }
      get holidayBuilder() {
        return this[holidayBuilder$];
      }
      set holidayBuilder(value) {
        super.holidayBuilder = value;
      }
      get defaultBuilder() {
        return this[defaultBuilder$];
      }
      set defaultBuilder(value) {
        super.defaultBuilder = value;
      }
      get rangeHighlightBuilder() {
        return this[rangeHighlightBuilder$];
      }
      set rangeHighlightBuilder(value) {
        super.rangeHighlightBuilder = value;
      }
      get singleMarkerBuilder() {
        return this[singleMarkerBuilder$];
      }
      set singleMarkerBuilder(value) {
        super.singleMarkerBuilder = value;
      }
      get markerBuilder() {
        return this[markerBuilder$];
      }
      set markerBuilder(value) {
        super.markerBuilder = value;
      }
      get dowBuilder() {
        return this[dowBuilder$];
      }
      set dowBuilder(value) {
        super.dowBuilder = value;
      }
      get headerTitleBuilder() {
        return this[headerTitleBuilder$];
      }
      set headerTitleBuilder(value) {
        super.headerTitleBuilder = value;
      }
      get weekNumberBuilder() {
        return this[weekNumberBuilder$];
      }
      set weekNumberBuilder(value) {
        super.weekNumberBuilder = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let prioritizedBuilder = opts && 'prioritizedBuilder' in opts ? opts.prioritizedBuilder : null;
        let todayBuilder = opts && 'todayBuilder' in opts ? opts.todayBuilder : null;
        let selectedBuilder = opts && 'selectedBuilder' in opts ? opts.selectedBuilder : null;
        let rangeStartBuilder = opts && 'rangeStartBuilder' in opts ? opts.rangeStartBuilder : null;
        let rangeEndBuilder = opts && 'rangeEndBuilder' in opts ? opts.rangeEndBuilder : null;
        let withinRangeBuilder = opts && 'withinRangeBuilder' in opts ? opts.withinRangeBuilder : null;
        let outsideBuilder = opts && 'outsideBuilder' in opts ? opts.outsideBuilder : null;
        let disabledBuilder = opts && 'disabledBuilder' in opts ? opts.disabledBuilder : null;
        let holidayBuilder = opts && 'holidayBuilder' in opts ? opts.holidayBuilder : null;
        let defaultBuilder = opts && 'defaultBuilder' in opts ? opts.defaultBuilder : null;
        let rangeHighlightBuilder = opts && 'rangeHighlightBuilder' in opts ? opts.rangeHighlightBuilder : null;
        let singleMarkerBuilder = opts && 'singleMarkerBuilder' in opts ? opts.singleMarkerBuilder : null;
        let markerBuilder = opts && 'markerBuilder' in opts ? opts.markerBuilder : null;
        let dowBuilder = opts && 'dowBuilder' in opts ? opts.dowBuilder : null;
        let headerTitleBuilder = opts && 'headerTitleBuilder' in opts ? opts.headerTitleBuilder : null;
        let weekNumberBuilder = opts && 'weekNumberBuilder' in opts ? opts.weekNumberBuilder : null;
        return new (calendar_builders.CalendarBuilders$(T)).new({prioritizedBuilder: prioritizedBuilder, todayBuilder: todayBuilder, selectedBuilder: selectedBuilder, rangeStartBuilder: rangeStartBuilder, rangeEndBuilder: rangeEndBuilder, withinRangeBuilder: withinRangeBuilder, outsideBuilder: outsideBuilder, disabledBuilder: disabledBuilder, holidayBuilder: holidayBuilder, defaultBuilder: defaultBuilder, rangeHighlightBuilder: rangeHighlightBuilder, singleMarkerBuilder: singleMarkerBuilder, markerBuilder: markerBuilder, dowBuilder: dowBuilder, headerTitleBuilder: headerTitleBuilder, weekNumberBuilder: weekNumberBuilder});
      }
    }
    (CalendarBuilders.new = function(opts) {
      let prioritizedBuilder = opts && 'prioritizedBuilder' in opts ? opts.prioritizedBuilder : null;
      let todayBuilder = opts && 'todayBuilder' in opts ? opts.todayBuilder : null;
      let selectedBuilder = opts && 'selectedBuilder' in opts ? opts.selectedBuilder : null;
      let rangeStartBuilder = opts && 'rangeStartBuilder' in opts ? opts.rangeStartBuilder : null;
      let rangeEndBuilder = opts && 'rangeEndBuilder' in opts ? opts.rangeEndBuilder : null;
      let withinRangeBuilder = opts && 'withinRangeBuilder' in opts ? opts.withinRangeBuilder : null;
      let outsideBuilder = opts && 'outsideBuilder' in opts ? opts.outsideBuilder : null;
      let disabledBuilder = opts && 'disabledBuilder' in opts ? opts.disabledBuilder : null;
      let holidayBuilder = opts && 'holidayBuilder' in opts ? opts.holidayBuilder : null;
      let defaultBuilder = opts && 'defaultBuilder' in opts ? opts.defaultBuilder : null;
      let rangeHighlightBuilder = opts && 'rangeHighlightBuilder' in opts ? opts.rangeHighlightBuilder : null;
      let singleMarkerBuilder = opts && 'singleMarkerBuilder' in opts ? opts.singleMarkerBuilder : null;
      let markerBuilder = opts && 'markerBuilder' in opts ? opts.markerBuilder : null;
      let dowBuilder = opts && 'dowBuilder' in opts ? opts.dowBuilder : null;
      let headerTitleBuilder = opts && 'headerTitleBuilder' in opts ? opts.headerTitleBuilder : null;
      let weekNumberBuilder = opts && 'weekNumberBuilder' in opts ? opts.weekNumberBuilder : null;
      this[prioritizedBuilder$] = prioritizedBuilder;
      this[todayBuilder$] = todayBuilder;
      this[selectedBuilder$] = selectedBuilder;
      this[rangeStartBuilder$] = rangeStartBuilder;
      this[rangeEndBuilder$] = rangeEndBuilder;
      this[withinRangeBuilder$] = withinRangeBuilder;
      this[outsideBuilder$] = outsideBuilder;
      this[disabledBuilder$] = disabledBuilder;
      this[holidayBuilder$] = holidayBuilder;
      this[defaultBuilder$] = defaultBuilder;
      this[rangeHighlightBuilder$] = rangeHighlightBuilder;
      this[singleMarkerBuilder$] = singleMarkerBuilder;
      this[markerBuilder$] = markerBuilder;
      this[dowBuilder$] = dowBuilder;
      this[headerTitleBuilder$] = headerTitleBuilder;
      this[weekNumberBuilder$] = weekNumberBuilder;
      ;
    }).prototype = CalendarBuilders.prototype;
    dart.addTypeTests(CalendarBuilders);
    CalendarBuilders.prototype[_is_CalendarBuilders_default] = true;
    dart.addTypeCaches(CalendarBuilders);
    dart.setLibraryUri(CalendarBuilders, I[18]);
    dart.setFieldSignature(CalendarBuilders, () => ({
      __proto__: dart.getFields(CalendarBuilders.__proto__),
      prioritizedBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      todayBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      selectedBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      rangeStartBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      rangeEndBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      withinRangeBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      outsideBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      disabledBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      holidayBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      defaultBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime]))),
      rangeHighlightBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.bool]))),
      singleMarkerBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, T]))),
      markerBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.List$(T)]))),
      dowBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime]))),
      headerTitleBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime]))),
      weekNumberBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.int])))
    }));
    return CalendarBuilders;
  });
  calendar_builders.CalendarBuilders = calendar_builders.CalendarBuilders$();
  dart.addTypeTests(calendar_builders.CalendarBuilders, _is_CalendarBuilders_default);
  var markersMaxCount$ = dart.privateName(calendar_style, "CalendarStyle.markersMaxCount");
  var canMarkersOverflow$ = dart.privateName(calendar_style, "CalendarStyle.canMarkersOverflow");
  var markersAutoAligned$ = dart.privateName(calendar_style, "CalendarStyle.markersAutoAligned");
  var markersAnchor$ = dart.privateName(calendar_style, "CalendarStyle.markersAnchor");
  var markerSize$ = dart.privateName(calendar_style, "CalendarStyle.markerSize");
  var markerSizeScale$ = dart.privateName(calendar_style, "CalendarStyle.markerSizeScale");
  var markersOffset$ = dart.privateName(calendar_style, "CalendarStyle.markersOffset");
  var markersAlignment$ = dart.privateName(calendar_style, "CalendarStyle.markersAlignment");
  var markerDecoration$ = dart.privateName(calendar_style, "CalendarStyle.markerDecoration");
  var markerMargin$ = dart.privateName(calendar_style, "CalendarStyle.markerMargin");
  var cellMargin$ = dart.privateName(calendar_style, "CalendarStyle.cellMargin");
  var cellPadding$ = dart.privateName(calendar_style, "CalendarStyle.cellPadding");
  var cellAlignment$ = dart.privateName(calendar_style, "CalendarStyle.cellAlignment");
  var rangeHighlightScale$ = dart.privateName(calendar_style, "CalendarStyle.rangeHighlightScale");
  var rangeHighlightColor$ = dart.privateName(calendar_style, "CalendarStyle.rangeHighlightColor");
  var outsideDaysVisible$ = dart.privateName(calendar_style, "CalendarStyle.outsideDaysVisible");
  var isTodayHighlighted$ = dart.privateName(calendar_style, "CalendarStyle.isTodayHighlighted");
  var todayTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.todayTextStyle");
  var todayDecoration$ = dart.privateName(calendar_style, "CalendarStyle.todayDecoration");
  var selectedTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.selectedTextStyle");
  var selectedDecoration$ = dart.privateName(calendar_style, "CalendarStyle.selectedDecoration");
  var rangeStartTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.rangeStartTextStyle");
  var rangeStartDecoration$ = dart.privateName(calendar_style, "CalendarStyle.rangeStartDecoration");
  var rangeEndTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.rangeEndTextStyle");
  var rangeEndDecoration$ = dart.privateName(calendar_style, "CalendarStyle.rangeEndDecoration");
  var withinRangeTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.withinRangeTextStyle");
  var withinRangeDecoration$ = dart.privateName(calendar_style, "CalendarStyle.withinRangeDecoration");
  var outsideTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.outsideTextStyle");
  var outsideDecoration$ = dart.privateName(calendar_style, "CalendarStyle.outsideDecoration");
  var disabledTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.disabledTextStyle");
  var disabledDecoration$ = dart.privateName(calendar_style, "CalendarStyle.disabledDecoration");
  var holidayTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.holidayTextStyle");
  var holidayDecoration$ = dart.privateName(calendar_style, "CalendarStyle.holidayDecoration");
  var weekendTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.weekendTextStyle");
  var weekendDecoration$ = dart.privateName(calendar_style, "CalendarStyle.weekendDecoration");
  var weekNumberTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.weekNumberTextStyle");
  var defaultTextStyle$ = dart.privateName(calendar_style, "CalendarStyle.defaultTextStyle");
  var defaultDecoration$ = dart.privateName(calendar_style, "CalendarStyle.defaultDecoration");
  var rowDecoration$ = dart.privateName(calendar_style, "CalendarStyle.rowDecoration");
  var tableBorder$ = dart.privateName(calendar_style, "CalendarStyle.tableBorder");
  var tablePadding$ = dart.privateName(calendar_style, "CalendarStyle.tablePadding");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var PositionedOffset_end = dart.privateName(calendar_style, "PositionedOffset.end");
  var PositionedOffset_start = dart.privateName(calendar_style, "PositionedOffset.start");
  var PositionedOffset_bottom = dart.privateName(calendar_style, "PositionedOffset.bottom");
  var PositionedOffset_top = dart.privateName(calendar_style, "PositionedOffset.top");
  var Color_value = dart.privateName(ui, "Color.value");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var BoxDecoration_shape = dart.privateName(box_decoration, "BoxDecoration.shape");
  var BoxDecoration_backgroundBlendMode = dart.privateName(box_decoration, "BoxDecoration.backgroundBlendMode");
  var BoxDecoration_gradient = dart.privateName(box_decoration, "BoxDecoration.gradient");
  var BoxDecoration_boxShadow = dart.privateName(box_decoration, "BoxDecoration.boxShadow");
  var BoxDecoration_borderRadius = dart.privateName(box_decoration, "BoxDecoration.borderRadius");
  var BoxDecoration_border = dart.privateName(box_decoration, "BoxDecoration.border");
  var BoxDecoration_image = dart.privateName(box_decoration, "BoxDecoration.image");
  var BoxDecoration_color = dart.privateName(box_decoration, "BoxDecoration.color");
  var TextStyle_overflow = dart.privateName(text_style, "TextStyle.overflow");
  var TextStyle_fontVariations = dart.privateName(text_style, "TextStyle.fontVariations");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var BorderSide_strokeAlign = dart.privateName(borders, "BorderSide.strokeAlign");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var Border_left = dart.privateName(box_border, "Border.left");
  var Border_bottom = dart.privateName(box_border, "Border.bottom");
  var Border_right = dart.privateName(box_border, "Border.right");
  var Border_top = dart.privateName(box_border, "Border.top");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var TableBorder_borderRadius = dart.privateName(table_border, "TableBorder.borderRadius");
  var TableBorder_verticalInside = dart.privateName(table_border, "TableBorder.verticalInside");
  var TableBorder_horizontalInside = dart.privateName(table_border, "TableBorder.horizontalInside");
  var TableBorder_left = dart.privateName(table_border, "TableBorder.left");
  var TableBorder_bottom = dart.privateName(table_border, "TableBorder.bottom");
  var TableBorder_right = dart.privateName(table_border, "TableBorder.right");
  var TableBorder_top = dart.privateName(table_border, "TableBorder.top");
  calendar_style.CalendarStyle = class CalendarStyle extends core.Object {
    get markersMaxCount() {
      return this[markersMaxCount$];
    }
    set markersMaxCount(value) {
      super.markersMaxCount = value;
    }
    get canMarkersOverflow() {
      return this[canMarkersOverflow$];
    }
    set canMarkersOverflow(value) {
      super.canMarkersOverflow = value;
    }
    get markersAutoAligned() {
      return this[markersAutoAligned$];
    }
    set markersAutoAligned(value) {
      super.markersAutoAligned = value;
    }
    get markersAnchor() {
      return this[markersAnchor$];
    }
    set markersAnchor(value) {
      super.markersAnchor = value;
    }
    get markerSize() {
      return this[markerSize$];
    }
    set markerSize(value) {
      super.markerSize = value;
    }
    get markerSizeScale() {
      return this[markerSizeScale$];
    }
    set markerSizeScale(value) {
      super.markerSizeScale = value;
    }
    get markersOffset() {
      return this[markersOffset$];
    }
    set markersOffset(value) {
      super.markersOffset = value;
    }
    get markersAlignment() {
      return this[markersAlignment$];
    }
    set markersAlignment(value) {
      super.markersAlignment = value;
    }
    get markerDecoration() {
      return this[markerDecoration$];
    }
    set markerDecoration(value) {
      super.markerDecoration = value;
    }
    get markerMargin() {
      return this[markerMargin$];
    }
    set markerMargin(value) {
      super.markerMargin = value;
    }
    get cellMargin() {
      return this[cellMargin$];
    }
    set cellMargin(value) {
      super.cellMargin = value;
    }
    get cellPadding() {
      return this[cellPadding$];
    }
    set cellPadding(value) {
      super.cellPadding = value;
    }
    get cellAlignment() {
      return this[cellAlignment$];
    }
    set cellAlignment(value) {
      super.cellAlignment = value;
    }
    get rangeHighlightScale() {
      return this[rangeHighlightScale$];
    }
    set rangeHighlightScale(value) {
      super.rangeHighlightScale = value;
    }
    get rangeHighlightColor() {
      return this[rangeHighlightColor$];
    }
    set rangeHighlightColor(value) {
      super.rangeHighlightColor = value;
    }
    get outsideDaysVisible() {
      return this[outsideDaysVisible$];
    }
    set outsideDaysVisible(value) {
      super.outsideDaysVisible = value;
    }
    get isTodayHighlighted() {
      return this[isTodayHighlighted$];
    }
    set isTodayHighlighted(value) {
      super.isTodayHighlighted = value;
    }
    get todayTextStyle() {
      return this[todayTextStyle$];
    }
    set todayTextStyle(value) {
      super.todayTextStyle = value;
    }
    get todayDecoration() {
      return this[todayDecoration$];
    }
    set todayDecoration(value) {
      super.todayDecoration = value;
    }
    get selectedTextStyle() {
      return this[selectedTextStyle$];
    }
    set selectedTextStyle(value) {
      super.selectedTextStyle = value;
    }
    get selectedDecoration() {
      return this[selectedDecoration$];
    }
    set selectedDecoration(value) {
      super.selectedDecoration = value;
    }
    get rangeStartTextStyle() {
      return this[rangeStartTextStyle$];
    }
    set rangeStartTextStyle(value) {
      super.rangeStartTextStyle = value;
    }
    get rangeStartDecoration() {
      return this[rangeStartDecoration$];
    }
    set rangeStartDecoration(value) {
      super.rangeStartDecoration = value;
    }
    get rangeEndTextStyle() {
      return this[rangeEndTextStyle$];
    }
    set rangeEndTextStyle(value) {
      super.rangeEndTextStyle = value;
    }
    get rangeEndDecoration() {
      return this[rangeEndDecoration$];
    }
    set rangeEndDecoration(value) {
      super.rangeEndDecoration = value;
    }
    get withinRangeTextStyle() {
      return this[withinRangeTextStyle$];
    }
    set withinRangeTextStyle(value) {
      super.withinRangeTextStyle = value;
    }
    get withinRangeDecoration() {
      return this[withinRangeDecoration$];
    }
    set withinRangeDecoration(value) {
      super.withinRangeDecoration = value;
    }
    get outsideTextStyle() {
      return this[outsideTextStyle$];
    }
    set outsideTextStyle(value) {
      super.outsideTextStyle = value;
    }
    get outsideDecoration() {
      return this[outsideDecoration$];
    }
    set outsideDecoration(value) {
      super.outsideDecoration = value;
    }
    get disabledTextStyle() {
      return this[disabledTextStyle$];
    }
    set disabledTextStyle(value) {
      super.disabledTextStyle = value;
    }
    get disabledDecoration() {
      return this[disabledDecoration$];
    }
    set disabledDecoration(value) {
      super.disabledDecoration = value;
    }
    get holidayTextStyle() {
      return this[holidayTextStyle$];
    }
    set holidayTextStyle(value) {
      super.holidayTextStyle = value;
    }
    get holidayDecoration() {
      return this[holidayDecoration$];
    }
    set holidayDecoration(value) {
      super.holidayDecoration = value;
    }
    get weekendTextStyle() {
      return this[weekendTextStyle$];
    }
    set weekendTextStyle(value) {
      super.weekendTextStyle = value;
    }
    get weekendDecoration() {
      return this[weekendDecoration$];
    }
    set weekendDecoration(value) {
      super.weekendDecoration = value;
    }
    get weekNumberTextStyle() {
      return this[weekNumberTextStyle$];
    }
    set weekNumberTextStyle(value) {
      super.weekNumberTextStyle = value;
    }
    get defaultTextStyle() {
      return this[defaultTextStyle$];
    }
    set defaultTextStyle(value) {
      super.defaultTextStyle = value;
    }
    get defaultDecoration() {
      return this[defaultDecoration$];
    }
    set defaultDecoration(value) {
      super.defaultDecoration = value;
    }
    get rowDecoration() {
      return this[rowDecoration$];
    }
    set rowDecoration(value) {
      super.rowDecoration = value;
    }
    get tableBorder() {
      return this[tableBorder$];
    }
    set tableBorder(value) {
      super.tableBorder = value;
    }
    get tablePadding() {
      return this[tablePadding$];
    }
    set tablePadding(value) {
      super.tablePadding = value;
    }
    static ['_#new#tearOff'](opts) {
      let isTodayHighlighted = opts && 'isTodayHighlighted' in opts ? opts.isTodayHighlighted : true;
      let canMarkersOverflow = opts && 'canMarkersOverflow' in opts ? opts.canMarkersOverflow : true;
      let outsideDaysVisible = opts && 'outsideDaysVisible' in opts ? opts.outsideDaysVisible : true;
      let markersAutoAligned = opts && 'markersAutoAligned' in opts ? opts.markersAutoAligned : true;
      let markerSize = opts && 'markerSize' in opts ? opts.markerSize : null;
      let markerSizeScale = opts && 'markerSizeScale' in opts ? opts.markerSizeScale : 0.2;
      let markersAnchor = opts && 'markersAnchor' in opts ? opts.markersAnchor : 0.7;
      let rangeHighlightScale = opts && 'rangeHighlightScale' in opts ? opts.rangeHighlightScale : 1;
      let markerMargin = opts && 'markerMargin' in opts ? opts.markerMargin : C[30] || CT.C30;
      let markersAlignment = opts && 'markersAlignment' in opts ? opts.markersAlignment : C[31] || CT.C31;
      let markersMaxCount = opts && 'markersMaxCount' in opts ? opts.markersMaxCount : 4;
      let cellMargin = opts && 'cellMargin' in opts ? opts.cellMargin : C[32] || CT.C32;
      let cellPadding = opts && 'cellPadding' in opts ? opts.cellPadding : C[33] || CT.C33;
      let cellAlignment = opts && 'cellAlignment' in opts ? opts.cellAlignment : C[34] || CT.C34;
      let markersOffset = opts && 'markersOffset' in opts ? opts.markersOffset : C[35] || CT.C35;
      let rangeHighlightColor = opts && 'rangeHighlightColor' in opts ? opts.rangeHighlightColor : C[36] || CT.C36;
      let markerDecoration = opts && 'markerDecoration' in opts ? opts.markerDecoration : C[37] || CT.C37;
      let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : C[40] || CT.C40;
      let todayDecoration = opts && 'todayDecoration' in opts ? opts.todayDecoration : C[42] || CT.C42;
      let selectedTextStyle = opts && 'selectedTextStyle' in opts ? opts.selectedTextStyle : C[40] || CT.C40;
      let selectedDecoration = opts && 'selectedDecoration' in opts ? opts.selectedDecoration : C[44] || CT.C44;
      let rangeStartTextStyle = opts && 'rangeStartTextStyle' in opts ? opts.rangeStartTextStyle : C[40] || CT.C40;
      let rangeStartDecoration = opts && 'rangeStartDecoration' in opts ? opts.rangeStartDecoration : C[46] || CT.C46;
      let rangeEndTextStyle = opts && 'rangeEndTextStyle' in opts ? opts.rangeEndTextStyle : C[40] || CT.C40;
      let rangeEndDecoration = opts && 'rangeEndDecoration' in opts ? opts.rangeEndDecoration : C[46] || CT.C46;
      let withinRangeTextStyle = opts && 'withinRangeTextStyle' in opts ? opts.withinRangeTextStyle : C[48] || CT.C48;
      let withinRangeDecoration = opts && 'withinRangeDecoration' in opts ? opts.withinRangeDecoration : C[49] || CT.C49;
      let outsideTextStyle = opts && 'outsideTextStyle' in opts ? opts.outsideTextStyle : C[50] || CT.C50;
      let outsideDecoration = opts && 'outsideDecoration' in opts ? opts.outsideDecoration : C[49] || CT.C49;
      let disabledTextStyle = opts && 'disabledTextStyle' in opts ? opts.disabledTextStyle : C[52] || CT.C52;
      let disabledDecoration = opts && 'disabledDecoration' in opts ? opts.disabledDecoration : C[49] || CT.C49;
      let holidayTextStyle = opts && 'holidayTextStyle' in opts ? opts.holidayTextStyle : C[54] || CT.C54;
      let holidayDecoration = opts && 'holidayDecoration' in opts ? opts.holidayDecoration : C[55] || CT.C55;
      let weekendTextStyle = opts && 'weekendTextStyle' in opts ? opts.weekendTextStyle : C[59] || CT.C59;
      let weekendDecoration = opts && 'weekendDecoration' in opts ? opts.weekendDecoration : C[49] || CT.C49;
      let weekNumberTextStyle = opts && 'weekNumberTextStyle' in opts ? opts.weekNumberTextStyle : C[61] || CT.C61;
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : C[48] || CT.C48;
      let defaultDecoration = opts && 'defaultDecoration' in opts ? opts.defaultDecoration : C[49] || CT.C49;
      let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : C[62] || CT.C62;
      let tableBorder = opts && 'tableBorder' in opts ? opts.tableBorder : C[64] || CT.C64;
      let tablePadding = opts && 'tablePadding' in opts ? opts.tablePadding : C[33] || CT.C33;
      return new calendar_style.CalendarStyle.new({isTodayHighlighted: isTodayHighlighted, canMarkersOverflow: canMarkersOverflow, outsideDaysVisible: outsideDaysVisible, markersAutoAligned: markersAutoAligned, markerSize: markerSize, markerSizeScale: markerSizeScale, markersAnchor: markersAnchor, rangeHighlightScale: rangeHighlightScale, markerMargin: markerMargin, markersAlignment: markersAlignment, markersMaxCount: markersMaxCount, cellMargin: cellMargin, cellPadding: cellPadding, cellAlignment: cellAlignment, markersOffset: markersOffset, rangeHighlightColor: rangeHighlightColor, markerDecoration: markerDecoration, todayTextStyle: todayTextStyle, todayDecoration: todayDecoration, selectedTextStyle: selectedTextStyle, selectedDecoration: selectedDecoration, rangeStartTextStyle: rangeStartTextStyle, rangeStartDecoration: rangeStartDecoration, rangeEndTextStyle: rangeEndTextStyle, rangeEndDecoration: rangeEndDecoration, withinRangeTextStyle: withinRangeTextStyle, withinRangeDecoration: withinRangeDecoration, outsideTextStyle: outsideTextStyle, outsideDecoration: outsideDecoration, disabledTextStyle: disabledTextStyle, disabledDecoration: disabledDecoration, holidayTextStyle: holidayTextStyle, holidayDecoration: holidayDecoration, weekendTextStyle: weekendTextStyle, weekendDecoration: weekendDecoration, weekNumberTextStyle: weekNumberTextStyle, defaultTextStyle: defaultTextStyle, defaultDecoration: defaultDecoration, rowDecoration: rowDecoration, tableBorder: tableBorder, tablePadding: tablePadding});
    }
  };
  (calendar_style.CalendarStyle.new = function(opts) {
    let isTodayHighlighted = opts && 'isTodayHighlighted' in opts ? opts.isTodayHighlighted : true;
    let canMarkersOverflow = opts && 'canMarkersOverflow' in opts ? opts.canMarkersOverflow : true;
    let outsideDaysVisible = opts && 'outsideDaysVisible' in opts ? opts.outsideDaysVisible : true;
    let markersAutoAligned = opts && 'markersAutoAligned' in opts ? opts.markersAutoAligned : true;
    let markerSize = opts && 'markerSize' in opts ? opts.markerSize : null;
    let markerSizeScale = opts && 'markerSizeScale' in opts ? opts.markerSizeScale : 0.2;
    let markersAnchor = opts && 'markersAnchor' in opts ? opts.markersAnchor : 0.7;
    let rangeHighlightScale = opts && 'rangeHighlightScale' in opts ? opts.rangeHighlightScale : 1;
    let markerMargin = opts && 'markerMargin' in opts ? opts.markerMargin : C[30] || CT.C30;
    let markersAlignment = opts && 'markersAlignment' in opts ? opts.markersAlignment : C[31] || CT.C31;
    let markersMaxCount = opts && 'markersMaxCount' in opts ? opts.markersMaxCount : 4;
    let cellMargin = opts && 'cellMargin' in opts ? opts.cellMargin : C[32] || CT.C32;
    let cellPadding = opts && 'cellPadding' in opts ? opts.cellPadding : C[33] || CT.C33;
    let cellAlignment = opts && 'cellAlignment' in opts ? opts.cellAlignment : C[34] || CT.C34;
    let markersOffset = opts && 'markersOffset' in opts ? opts.markersOffset : C[35] || CT.C35;
    let rangeHighlightColor = opts && 'rangeHighlightColor' in opts ? opts.rangeHighlightColor : C[36] || CT.C36;
    let markerDecoration = opts && 'markerDecoration' in opts ? opts.markerDecoration : C[37] || CT.C37;
    let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : C[40] || CT.C40;
    let todayDecoration = opts && 'todayDecoration' in opts ? opts.todayDecoration : C[42] || CT.C42;
    let selectedTextStyle = opts && 'selectedTextStyle' in opts ? opts.selectedTextStyle : C[40] || CT.C40;
    let selectedDecoration = opts && 'selectedDecoration' in opts ? opts.selectedDecoration : C[44] || CT.C44;
    let rangeStartTextStyle = opts && 'rangeStartTextStyle' in opts ? opts.rangeStartTextStyle : C[40] || CT.C40;
    let rangeStartDecoration = opts && 'rangeStartDecoration' in opts ? opts.rangeStartDecoration : C[46] || CT.C46;
    let rangeEndTextStyle = opts && 'rangeEndTextStyle' in opts ? opts.rangeEndTextStyle : C[40] || CT.C40;
    let rangeEndDecoration = opts && 'rangeEndDecoration' in opts ? opts.rangeEndDecoration : C[46] || CT.C46;
    let withinRangeTextStyle = opts && 'withinRangeTextStyle' in opts ? opts.withinRangeTextStyle : C[48] || CT.C48;
    let withinRangeDecoration = opts && 'withinRangeDecoration' in opts ? opts.withinRangeDecoration : C[49] || CT.C49;
    let outsideTextStyle = opts && 'outsideTextStyle' in opts ? opts.outsideTextStyle : C[50] || CT.C50;
    let outsideDecoration = opts && 'outsideDecoration' in opts ? opts.outsideDecoration : C[49] || CT.C49;
    let disabledTextStyle = opts && 'disabledTextStyle' in opts ? opts.disabledTextStyle : C[52] || CT.C52;
    let disabledDecoration = opts && 'disabledDecoration' in opts ? opts.disabledDecoration : C[49] || CT.C49;
    let holidayTextStyle = opts && 'holidayTextStyle' in opts ? opts.holidayTextStyle : C[54] || CT.C54;
    let holidayDecoration = opts && 'holidayDecoration' in opts ? opts.holidayDecoration : C[55] || CT.C55;
    let weekendTextStyle = opts && 'weekendTextStyle' in opts ? opts.weekendTextStyle : C[59] || CT.C59;
    let weekendDecoration = opts && 'weekendDecoration' in opts ? opts.weekendDecoration : C[49] || CT.C49;
    let weekNumberTextStyle = opts && 'weekNumberTextStyle' in opts ? opts.weekNumberTextStyle : C[61] || CT.C61;
    let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : C[48] || CT.C48;
    let defaultDecoration = opts && 'defaultDecoration' in opts ? opts.defaultDecoration : C[49] || CT.C49;
    let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : C[62] || CT.C62;
    let tableBorder = opts && 'tableBorder' in opts ? opts.tableBorder : C[64] || CT.C64;
    let tablePadding = opts && 'tablePadding' in opts ? opts.tablePadding : C[33] || CT.C33;
    this[isTodayHighlighted$] = isTodayHighlighted;
    this[canMarkersOverflow$] = canMarkersOverflow;
    this[outsideDaysVisible$] = outsideDaysVisible;
    this[markersAutoAligned$] = markersAutoAligned;
    this[markerSize$] = markerSize;
    this[markerSizeScale$] = markerSizeScale;
    this[markersAnchor$] = markersAnchor;
    this[rangeHighlightScale$] = rangeHighlightScale;
    this[markerMargin$] = markerMargin;
    this[markersAlignment$] = markersAlignment;
    this[markersMaxCount$] = markersMaxCount;
    this[cellMargin$] = cellMargin;
    this[cellPadding$] = cellPadding;
    this[cellAlignment$] = cellAlignment;
    this[markersOffset$] = markersOffset;
    this[rangeHighlightColor$] = rangeHighlightColor;
    this[markerDecoration$] = markerDecoration;
    this[todayTextStyle$] = todayTextStyle;
    this[todayDecoration$] = todayDecoration;
    this[selectedTextStyle$] = selectedTextStyle;
    this[selectedDecoration$] = selectedDecoration;
    this[rangeStartTextStyle$] = rangeStartTextStyle;
    this[rangeStartDecoration$] = rangeStartDecoration;
    this[rangeEndTextStyle$] = rangeEndTextStyle;
    this[rangeEndDecoration$] = rangeEndDecoration;
    this[withinRangeTextStyle$] = withinRangeTextStyle;
    this[withinRangeDecoration$] = withinRangeDecoration;
    this[outsideTextStyle$] = outsideTextStyle;
    this[outsideDecoration$] = outsideDecoration;
    this[disabledTextStyle$] = disabledTextStyle;
    this[disabledDecoration$] = disabledDecoration;
    this[holidayTextStyle$] = holidayTextStyle;
    this[holidayDecoration$] = holidayDecoration;
    this[weekendTextStyle$] = weekendTextStyle;
    this[weekendDecoration$] = weekendDecoration;
    this[weekNumberTextStyle$] = weekNumberTextStyle;
    this[defaultTextStyle$] = defaultTextStyle;
    this[defaultDecoration$] = defaultDecoration;
    this[rowDecoration$] = rowDecoration;
    this[tableBorder$] = tableBorder;
    this[tablePadding$] = tablePadding;
    ;
  }).prototype = calendar_style.CalendarStyle.prototype;
  dart.addTypeTests(calendar_style.CalendarStyle);
  dart.addTypeCaches(calendar_style.CalendarStyle);
  dart.setLibraryUri(calendar_style.CalendarStyle, I[19]);
  dart.setFieldSignature(calendar_style.CalendarStyle, () => ({
    __proto__: dart.getFields(calendar_style.CalendarStyle.__proto__),
    markersMaxCount: dart.finalFieldType(core.int),
    canMarkersOverflow: dart.finalFieldType(core.bool),
    markersAutoAligned: dart.finalFieldType(core.bool),
    markersAnchor: dart.finalFieldType(core.double),
    markerSize: dart.finalFieldType(dart.nullable(core.double)),
    markerSizeScale: dart.finalFieldType(core.double),
    markersOffset: dart.finalFieldType(calendar_style.PositionedOffset),
    markersAlignment: dart.finalFieldType(alignment.AlignmentGeometry),
    markerDecoration: dart.finalFieldType(decoration.Decoration),
    markerMargin: dart.finalFieldType(edge_insets.EdgeInsets),
    cellMargin: dart.finalFieldType(edge_insets.EdgeInsets),
    cellPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    cellAlignment: dart.finalFieldType(alignment.AlignmentGeometry),
    rangeHighlightScale: dart.finalFieldType(core.double),
    rangeHighlightColor: dart.finalFieldType(ui.Color),
    outsideDaysVisible: dart.finalFieldType(core.bool),
    isTodayHighlighted: dart.finalFieldType(core.bool),
    todayTextStyle: dart.finalFieldType(text_style.TextStyle),
    todayDecoration: dart.finalFieldType(decoration.Decoration),
    selectedTextStyle: dart.finalFieldType(text_style.TextStyle),
    selectedDecoration: dart.finalFieldType(decoration.Decoration),
    rangeStartTextStyle: dart.finalFieldType(text_style.TextStyle),
    rangeStartDecoration: dart.finalFieldType(decoration.Decoration),
    rangeEndTextStyle: dart.finalFieldType(text_style.TextStyle),
    rangeEndDecoration: dart.finalFieldType(decoration.Decoration),
    withinRangeTextStyle: dart.finalFieldType(text_style.TextStyle),
    withinRangeDecoration: dart.finalFieldType(decoration.Decoration),
    outsideTextStyle: dart.finalFieldType(text_style.TextStyle),
    outsideDecoration: dart.finalFieldType(decoration.Decoration),
    disabledTextStyle: dart.finalFieldType(text_style.TextStyle),
    disabledDecoration: dart.finalFieldType(decoration.Decoration),
    holidayTextStyle: dart.finalFieldType(text_style.TextStyle),
    holidayDecoration: dart.finalFieldType(decoration.Decoration),
    weekendTextStyle: dart.finalFieldType(text_style.TextStyle),
    weekendDecoration: dart.finalFieldType(decoration.Decoration),
    weekNumberTextStyle: dart.finalFieldType(text_style.TextStyle),
    defaultTextStyle: dart.finalFieldType(text_style.TextStyle),
    defaultDecoration: dart.finalFieldType(decoration.Decoration),
    rowDecoration: dart.finalFieldType(decoration.Decoration),
    tableBorder: dart.finalFieldType(table_border.TableBorder),
    tablePadding: dart.finalFieldType(edge_insets.EdgeInsets)
  }));
  const top$ = PositionedOffset_top;
  const bottom$ = PositionedOffset_bottom;
  const start$ = PositionedOffset_start;
  const end$ = PositionedOffset_end;
  calendar_style.PositionedOffset = class PositionedOffset extends core.Object {
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    static ['_#new#tearOff'](opts) {
      let top = opts && 'top' in opts ? opts.top : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      return new calendar_style.PositionedOffset.new({top: top, bottom: bottom, start: start, end: end});
    }
  };
  (calendar_style.PositionedOffset.new = function(opts) {
    let top = opts && 'top' in opts ? opts.top : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    this[top$] = top;
    this[bottom$] = bottom;
    this[start$] = start;
    this[end$] = end;
    ;
  }).prototype = calendar_style.PositionedOffset.prototype;
  dart.addTypeTests(calendar_style.PositionedOffset);
  dart.addTypeCaches(calendar_style.PositionedOffset);
  dart.setLibraryUri(calendar_style.PositionedOffset, I[19]);
  dart.setFieldSignature(calendar_style.PositionedOffset, () => ({
    __proto__: dart.getFields(calendar_style.PositionedOffset.__proto__),
    top: dart.finalFieldType(dart.nullable(core.double)),
    bottom: dart.finalFieldType(dart.nullable(core.double)),
    start: dart.finalFieldType(dart.nullable(core.double)),
    end: dart.finalFieldType(dart.nullable(core.double))
  }));
  var dowTextFormatter$ = dart.privateName(days_of_week_style, "DaysOfWeekStyle.dowTextFormatter");
  var decoration$ = dart.privateName(days_of_week_style, "DaysOfWeekStyle.decoration");
  var weekdayStyle$ = dart.privateName(days_of_week_style, "DaysOfWeekStyle.weekdayStyle");
  var weekendStyle$ = dart.privateName(days_of_week_style, "DaysOfWeekStyle.weekendStyle");
  days_of_week_style.DaysOfWeekStyle = class DaysOfWeekStyle extends core.Object {
    get dowTextFormatter() {
      return this[dowTextFormatter$];
    }
    set dowTextFormatter(value) {
      super.dowTextFormatter = value;
    }
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get weekdayStyle() {
      return this[weekdayStyle$];
    }
    set weekdayStyle(value) {
      super.weekdayStyle = value;
    }
    get weekendStyle() {
      return this[weekendStyle$];
    }
    set weekendStyle(value) {
      super.weekendStyle = value;
    }
    static ['_#new#tearOff'](opts) {
      let dowTextFormatter = opts && 'dowTextFormatter' in opts ? opts.dowTextFormatter : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : C[62] || CT.C62;
      let weekdayStyle = opts && 'weekdayStyle' in opts ? opts.weekdayStyle : C[70] || CT.C70;
      let weekendStyle = opts && 'weekendStyle' in opts ? opts.weekendStyle : C[72] || CT.C72;
      return new days_of_week_style.DaysOfWeekStyle.new({dowTextFormatter: dowTextFormatter, decoration: decoration, weekdayStyle: weekdayStyle, weekendStyle: weekendStyle});
    }
  };
  (days_of_week_style.DaysOfWeekStyle.new = function(opts) {
    let dowTextFormatter = opts && 'dowTextFormatter' in opts ? opts.dowTextFormatter : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : C[62] || CT.C62;
    let weekdayStyle = opts && 'weekdayStyle' in opts ? opts.weekdayStyle : C[70] || CT.C70;
    let weekendStyle = opts && 'weekendStyle' in opts ? opts.weekendStyle : C[72] || CT.C72;
    this[dowTextFormatter$] = dowTextFormatter;
    this[decoration$] = decoration;
    this[weekdayStyle$] = weekdayStyle;
    this[weekendStyle$] = weekendStyle;
    ;
  }).prototype = days_of_week_style.DaysOfWeekStyle.prototype;
  dart.addTypeTests(days_of_week_style.DaysOfWeekStyle);
  dart.addTypeCaches(days_of_week_style.DaysOfWeekStyle);
  dart.setLibraryUri(days_of_week_style.DaysOfWeekStyle, I[20]);
  dart.setFieldSignature(days_of_week_style.DaysOfWeekStyle, () => ({
    __proto__: dart.getFields(days_of_week_style.DaysOfWeekStyle.__proto__),
    dowTextFormatter: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [core.DateTime, dart.dynamic]))),
    decoration: dart.finalFieldType(decoration.Decoration),
    weekdayStyle: dart.finalFieldType(text_style.TextStyle),
    weekendStyle: dart.finalFieldType(text_style.TextStyle)
  }));
  var titleCentered$ = dart.privateName(header_style, "HeaderStyle.titleCentered");
  var formatButtonVisible$ = dart.privateName(header_style, "HeaderStyle.formatButtonVisible");
  var formatButtonShowsNext$ = dart.privateName(header_style, "HeaderStyle.formatButtonShowsNext");
  var titleTextFormatter$ = dart.privateName(header_style, "HeaderStyle.titleTextFormatter");
  var titleTextStyle$ = dart.privateName(header_style, "HeaderStyle.titleTextStyle");
  var formatButtonTextStyle$ = dart.privateName(header_style, "HeaderStyle.formatButtonTextStyle");
  var formatButtonDecoration$ = dart.privateName(header_style, "HeaderStyle.formatButtonDecoration");
  var headerPadding$ = dart.privateName(header_style, "HeaderStyle.headerPadding");
  var headerMargin$ = dart.privateName(header_style, "HeaderStyle.headerMargin");
  var formatButtonPadding$ = dart.privateName(header_style, "HeaderStyle.formatButtonPadding");
  var leftChevronPadding$ = dart.privateName(header_style, "HeaderStyle.leftChevronPadding");
  var rightChevronPadding$ = dart.privateName(header_style, "HeaderStyle.rightChevronPadding");
  var leftChevronMargin$ = dart.privateName(header_style, "HeaderStyle.leftChevronMargin");
  var rightChevronMargin$ = dart.privateName(header_style, "HeaderStyle.rightChevronMargin");
  var leftChevronIcon$ = dart.privateName(header_style, "HeaderStyle.leftChevronIcon");
  var rightChevronIcon$ = dart.privateName(header_style, "HeaderStyle.rightChevronIcon");
  var leftChevronVisible$ = dart.privateName(header_style, "HeaderStyle.leftChevronVisible");
  var rightChevronVisible$ = dart.privateName(header_style, "HeaderStyle.rightChevronVisible");
  var decoration$0 = dart.privateName(header_style, "HeaderStyle.decoration");
  header_style.HeaderStyle = class HeaderStyle extends core.Object {
    get titleCentered() {
      return this[titleCentered$];
    }
    set titleCentered(value) {
      super.titleCentered = value;
    }
    get formatButtonVisible() {
      return this[formatButtonVisible$];
    }
    set formatButtonVisible(value) {
      super.formatButtonVisible = value;
    }
    get formatButtonShowsNext() {
      return this[formatButtonShowsNext$];
    }
    set formatButtonShowsNext(value) {
      super.formatButtonShowsNext = value;
    }
    get titleTextFormatter() {
      return this[titleTextFormatter$];
    }
    set titleTextFormatter(value) {
      super.titleTextFormatter = value;
    }
    get titleTextStyle() {
      return this[titleTextStyle$];
    }
    set titleTextStyle(value) {
      super.titleTextStyle = value;
    }
    get formatButtonTextStyle() {
      return this[formatButtonTextStyle$];
    }
    set formatButtonTextStyle(value) {
      super.formatButtonTextStyle = value;
    }
    get formatButtonDecoration() {
      return this[formatButtonDecoration$];
    }
    set formatButtonDecoration(value) {
      super.formatButtonDecoration = value;
    }
    get headerPadding() {
      return this[headerPadding$];
    }
    set headerPadding(value) {
      super.headerPadding = value;
    }
    get headerMargin() {
      return this[headerMargin$];
    }
    set headerMargin(value) {
      super.headerMargin = value;
    }
    get formatButtonPadding() {
      return this[formatButtonPadding$];
    }
    set formatButtonPadding(value) {
      super.formatButtonPadding = value;
    }
    get leftChevronPadding() {
      return this[leftChevronPadding$];
    }
    set leftChevronPadding(value) {
      super.leftChevronPadding = value;
    }
    get rightChevronPadding() {
      return this[rightChevronPadding$];
    }
    set rightChevronPadding(value) {
      super.rightChevronPadding = value;
    }
    get leftChevronMargin() {
      return this[leftChevronMargin$];
    }
    set leftChevronMargin(value) {
      super.leftChevronMargin = value;
    }
    get rightChevronMargin() {
      return this[rightChevronMargin$];
    }
    set rightChevronMargin(value) {
      super.rightChevronMargin = value;
    }
    get leftChevronIcon() {
      return this[leftChevronIcon$];
    }
    set leftChevronIcon(value) {
      super.leftChevronIcon = value;
    }
    get rightChevronIcon() {
      return this[rightChevronIcon$];
    }
    set rightChevronIcon(value) {
      super.rightChevronIcon = value;
    }
    get leftChevronVisible() {
      return this[leftChevronVisible$];
    }
    set leftChevronVisible(value) {
      super.leftChevronVisible = value;
    }
    get rightChevronVisible() {
      return this[rightChevronVisible$];
    }
    set rightChevronVisible(value) {
      super.rightChevronVisible = value;
    }
    get decoration() {
      return this[decoration$0];
    }
    set decoration(value) {
      super.decoration = value;
    }
    static ['_#new#tearOff'](opts) {
      let titleCentered = opts && 'titleCentered' in opts ? opts.titleCentered : false;
      let formatButtonVisible = opts && 'formatButtonVisible' in opts ? opts.formatButtonVisible : true;
      let formatButtonShowsNext = opts && 'formatButtonShowsNext' in opts ? opts.formatButtonShowsNext : true;
      let titleTextFormatter = opts && 'titleTextFormatter' in opts ? opts.titleTextFormatter : null;
      let titleTextStyle = opts && 'titleTextStyle' in opts ? opts.titleTextStyle : C[74] || CT.C74;
      let formatButtonTextStyle = opts && 'formatButtonTextStyle' in opts ? opts.formatButtonTextStyle : C[75] || CT.C75;
      let formatButtonDecoration = opts && 'formatButtonDecoration' in opts ? opts.formatButtonDecoration : C[76] || CT.C76;
      let headerMargin = opts && 'headerMargin' in opts ? opts.headerMargin : C[33] || CT.C33;
      let headerPadding = opts && 'headerPadding' in opts ? opts.headerPadding : C[81] || CT.C81;
      let formatButtonPadding = opts && 'formatButtonPadding' in opts ? opts.formatButtonPadding : C[82] || CT.C82;
      let leftChevronPadding = opts && 'leftChevronPadding' in opts ? opts.leftChevronPadding : C[83] || CT.C83;
      let rightChevronPadding = opts && 'rightChevronPadding' in opts ? opts.rightChevronPadding : C[83] || CT.C83;
      let leftChevronMargin = opts && 'leftChevronMargin' in opts ? opts.leftChevronMargin : C[84] || CT.C84;
      let rightChevronMargin = opts && 'rightChevronMargin' in opts ? opts.rightChevronMargin : C[84] || CT.C84;
      let leftChevronIcon = opts && 'leftChevronIcon' in opts ? opts.leftChevronIcon : C[85] || CT.C85;
      let rightChevronIcon = opts && 'rightChevronIcon' in opts ? opts.rightChevronIcon : C[87] || CT.C87;
      let leftChevronVisible = opts && 'leftChevronVisible' in opts ? opts.leftChevronVisible : true;
      let rightChevronVisible = opts && 'rightChevronVisible' in opts ? opts.rightChevronVisible : true;
      let decoration = opts && 'decoration' in opts ? opts.decoration : C[62] || CT.C62;
      return new header_style.HeaderStyle.new({titleCentered: titleCentered, formatButtonVisible: formatButtonVisible, formatButtonShowsNext: formatButtonShowsNext, titleTextFormatter: titleTextFormatter, titleTextStyle: titleTextStyle, formatButtonTextStyle: formatButtonTextStyle, formatButtonDecoration: formatButtonDecoration, headerMargin: headerMargin, headerPadding: headerPadding, formatButtonPadding: formatButtonPadding, leftChevronPadding: leftChevronPadding, rightChevronPadding: rightChevronPadding, leftChevronMargin: leftChevronMargin, rightChevronMargin: rightChevronMargin, leftChevronIcon: leftChevronIcon, rightChevronIcon: rightChevronIcon, leftChevronVisible: leftChevronVisible, rightChevronVisible: rightChevronVisible, decoration: decoration});
    }
  };
  (header_style.HeaderStyle.new = function(opts) {
    let titleCentered = opts && 'titleCentered' in opts ? opts.titleCentered : false;
    let formatButtonVisible = opts && 'formatButtonVisible' in opts ? opts.formatButtonVisible : true;
    let formatButtonShowsNext = opts && 'formatButtonShowsNext' in opts ? opts.formatButtonShowsNext : true;
    let titleTextFormatter = opts && 'titleTextFormatter' in opts ? opts.titleTextFormatter : null;
    let titleTextStyle = opts && 'titleTextStyle' in opts ? opts.titleTextStyle : C[74] || CT.C74;
    let formatButtonTextStyle = opts && 'formatButtonTextStyle' in opts ? opts.formatButtonTextStyle : C[75] || CT.C75;
    let formatButtonDecoration = opts && 'formatButtonDecoration' in opts ? opts.formatButtonDecoration : C[76] || CT.C76;
    let headerMargin = opts && 'headerMargin' in opts ? opts.headerMargin : C[33] || CT.C33;
    let headerPadding = opts && 'headerPadding' in opts ? opts.headerPadding : C[81] || CT.C81;
    let formatButtonPadding = opts && 'formatButtonPadding' in opts ? opts.formatButtonPadding : C[82] || CT.C82;
    let leftChevronPadding = opts && 'leftChevronPadding' in opts ? opts.leftChevronPadding : C[83] || CT.C83;
    let rightChevronPadding = opts && 'rightChevronPadding' in opts ? opts.rightChevronPadding : C[83] || CT.C83;
    let leftChevronMargin = opts && 'leftChevronMargin' in opts ? opts.leftChevronMargin : C[84] || CT.C84;
    let rightChevronMargin = opts && 'rightChevronMargin' in opts ? opts.rightChevronMargin : C[84] || CT.C84;
    let leftChevronIcon = opts && 'leftChevronIcon' in opts ? opts.leftChevronIcon : C[85] || CT.C85;
    let rightChevronIcon = opts && 'rightChevronIcon' in opts ? opts.rightChevronIcon : C[87] || CT.C87;
    let leftChevronVisible = opts && 'leftChevronVisible' in opts ? opts.leftChevronVisible : true;
    let rightChevronVisible = opts && 'rightChevronVisible' in opts ? opts.rightChevronVisible : true;
    let decoration = opts && 'decoration' in opts ? opts.decoration : C[62] || CT.C62;
    this[titleCentered$] = titleCentered;
    this[formatButtonVisible$] = formatButtonVisible;
    this[formatButtonShowsNext$] = formatButtonShowsNext;
    this[titleTextFormatter$] = titleTextFormatter;
    this[titleTextStyle$] = titleTextStyle;
    this[formatButtonTextStyle$] = formatButtonTextStyle;
    this[formatButtonDecoration$] = formatButtonDecoration;
    this[headerMargin$] = headerMargin;
    this[headerPadding$] = headerPadding;
    this[formatButtonPadding$] = formatButtonPadding;
    this[leftChevronPadding$] = leftChevronPadding;
    this[rightChevronPadding$] = rightChevronPadding;
    this[leftChevronMargin$] = leftChevronMargin;
    this[rightChevronMargin$] = rightChevronMargin;
    this[leftChevronIcon$] = leftChevronIcon;
    this[rightChevronIcon$] = rightChevronIcon;
    this[leftChevronVisible$] = leftChevronVisible;
    this[rightChevronVisible$] = rightChevronVisible;
    this[decoration$0] = decoration;
    ;
  }).prototype = header_style.HeaderStyle.prototype;
  dart.addTypeTests(header_style.HeaderStyle);
  dart.addTypeCaches(header_style.HeaderStyle);
  dart.setLibraryUri(header_style.HeaderStyle, I[21]);
  dart.setFieldSignature(header_style.HeaderStyle, () => ({
    __proto__: dart.getFields(header_style.HeaderStyle.__proto__),
    titleCentered: dart.finalFieldType(core.bool),
    formatButtonVisible: dart.finalFieldType(core.bool),
    formatButtonShowsNext: dart.finalFieldType(core.bool),
    titleTextFormatter: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [core.DateTime, dart.dynamic]))),
    titleTextStyle: dart.finalFieldType(text_style.TextStyle),
    formatButtonTextStyle: dart.finalFieldType(text_style.TextStyle),
    formatButtonDecoration: dart.finalFieldType(box_decoration.BoxDecoration),
    headerPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    headerMargin: dart.finalFieldType(edge_insets.EdgeInsets),
    formatButtonPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    leftChevronPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    rightChevronPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    leftChevronMargin: dart.finalFieldType(edge_insets.EdgeInsets),
    rightChevronMargin: dart.finalFieldType(edge_insets.EdgeInsets),
    leftChevronIcon: dart.finalFieldType(framework.Widget),
    rightChevronIcon: dart.finalFieldType(framework.Widget),
    leftChevronVisible: dart.finalFieldType(core.bool),
    rightChevronVisible: dart.finalFieldType(core.bool),
    decoration: dart.finalFieldType(box_decoration.BoxDecoration)
  }));
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  utils$.AvailableGestures = class AvailableGestures extends core._Enum {
    [_enumToString]() {
      return "AvailableGestures." + this[_name];
    }
  };
  (utils$.AvailableGestures.new = function(index, name) {
    utils$.AvailableGestures.__proto__.new.call(this, index, name);
    ;
  }).prototype = utils$.AvailableGestures.prototype;
  dart.addTypeTests(utils$.AvailableGestures);
  dart.addTypeCaches(utils$.AvailableGestures);
  dart.setMethodSignature(utils$.AvailableGestures, () => ({
    __proto__: dart.getMethods(utils$.AvailableGestures.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(utils$.AvailableGestures, I[22]);
  dart.setStaticFieldSignature(utils$.AvailableGestures, () => ['values', 'none', 'verticalSwipe', 'horizontalSwipe', 'all']);
  dart.defineLazy(utils$.AvailableGestures, {
    /*utils$.AvailableGestures.values*/get values() {
      return C[89] || CT.C89;
    },
    /*utils$.AvailableGestures.none*/get none() {
      return C[90] || CT.C90;
    },
    /*utils$.AvailableGestures.verticalSwipe*/get verticalSwipe() {
      return C[91] || CT.C91;
    },
    /*utils$.AvailableGestures.horizontalSwipe*/get horizontalSwipe() {
      return C[92] || CT.C92;
    },
    /*utils$.AvailableGestures.all*/get all() {
      return C[93] || CT.C93;
    }
  }, false);
  utils$.CalendarFormat = class CalendarFormat extends core._Enum {
    [_enumToString]() {
      return "CalendarFormat." + this[_name];
    }
  };
  (utils$.CalendarFormat.new = function(index, name) {
    utils$.CalendarFormat.__proto__.new.call(this, index, name);
    ;
  }).prototype = utils$.CalendarFormat.prototype;
  dart.addTypeTests(utils$.CalendarFormat);
  dart.addTypeCaches(utils$.CalendarFormat);
  dart.setMethodSignature(utils$.CalendarFormat, () => ({
    __proto__: dart.getMethods(utils$.CalendarFormat.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(utils$.CalendarFormat, I[22]);
  dart.setStaticFieldSignature(utils$.CalendarFormat, () => ['values', 'month', 'twoWeeks', 'week']);
  dart.defineLazy(utils$.CalendarFormat, {
    /*utils$.CalendarFormat.values*/get values() {
      return C[94] || CT.C94;
    },
    /*utils$.CalendarFormat.month*/get month() {
      return C[95] || CT.C95;
    },
    /*utils$.CalendarFormat.twoWeeks*/get twoWeeks() {
      return C[96] || CT.C96;
    },
    /*utils$.CalendarFormat.week*/get week() {
      return C[97] || CT.C97;
    }
  }, false);
  utils$.StartingDayOfWeek = class StartingDayOfWeek extends core._Enum {
    [_enumToString]() {
      return "StartingDayOfWeek." + this[_name];
    }
  };
  (utils$.StartingDayOfWeek.new = function(index, name) {
    utils$.StartingDayOfWeek.__proto__.new.call(this, index, name);
    ;
  }).prototype = utils$.StartingDayOfWeek.prototype;
  dart.addTypeTests(utils$.StartingDayOfWeek);
  dart.addTypeCaches(utils$.StartingDayOfWeek);
  dart.setMethodSignature(utils$.StartingDayOfWeek, () => ({
    __proto__: dart.getMethods(utils$.StartingDayOfWeek.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(utils$.StartingDayOfWeek, I[22]);
  dart.setStaticFieldSignature(utils$.StartingDayOfWeek, () => ['values', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']);
  dart.defineLazy(utils$.StartingDayOfWeek, {
    /*utils$.StartingDayOfWeek.values*/get values() {
      return C[98] || CT.C98;
    },
    /*utils$.StartingDayOfWeek.monday*/get monday() {
      return C[99] || CT.C99;
    },
    /*utils$.StartingDayOfWeek.tuesday*/get tuesday() {
      return C[100] || CT.C100;
    },
    /*utils$.StartingDayOfWeek.wednesday*/get wednesday() {
      return C[101] || CT.C101;
    },
    /*utils$.StartingDayOfWeek.thursday*/get thursday() {
      return C[102] || CT.C102;
    },
    /*utils$.StartingDayOfWeek.friday*/get friday() {
      return C[103] || CT.C103;
    },
    /*utils$.StartingDayOfWeek.saturday*/get saturday() {
      return C[104] || CT.C104;
    },
    /*utils$.StartingDayOfWeek.sunday*/get sunday() {
      return C[105] || CT.C105;
    }
  }, false);
  utils$.getWeekdayNumber = function getWeekdayNumber(weekday) {
    return utils$.StartingDayOfWeek.values[$indexOf](weekday) + 1;
  };
  utils$.normalizeDate = function normalizeDate(date) {
    return new core.DateTime.utc(date.year, date.month, date.day);
  };
  utils$.isSameDay = function isSameDay(a, b) {
    if (a == null || b == null) {
      return false;
    }
    return a.year === b.year && a.month === b.month && a.day === b.day;
  };
  table_calendar$.RangeSelectionMode = class RangeSelectionMode extends core._Enum {
    [_enumToString]() {
      return "RangeSelectionMode." + this[_name];
    }
  };
  (table_calendar$.RangeSelectionMode.new = function(index, name) {
    table_calendar$.RangeSelectionMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = table_calendar$.RangeSelectionMode.prototype;
  dart.addTypeTests(table_calendar$.RangeSelectionMode);
  dart.addTypeCaches(table_calendar$.RangeSelectionMode);
  dart.setMethodSignature(table_calendar$.RangeSelectionMode, () => ({
    __proto__: dart.getMethods(table_calendar$.RangeSelectionMode.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(table_calendar$.RangeSelectionMode, I[23]);
  dart.setStaticFieldSignature(table_calendar$.RangeSelectionMode, () => ['values', 'disabled', 'toggledOff', 'toggledOn', 'enforced']);
  dart.defineLazy(table_calendar$.RangeSelectionMode, {
    /*table_calendar$.RangeSelectionMode.values*/get values() {
      return C[106] || CT.C106;
    },
    /*table_calendar$.RangeSelectionMode.disabled*/get disabled() {
      return C[107] || CT.C107;
    },
    /*table_calendar$.RangeSelectionMode.toggledOff*/get toggledOff() {
      return C[108] || CT.C108;
    },
    /*table_calendar$.RangeSelectionMode.toggledOn*/get toggledOn() {
      return C[109] || CT.C109;
    },
    /*table_calendar$.RangeSelectionMode.enforced*/get enforced() {
      return C[110] || CT.C110;
    }
  }, false);
  var locale$ = dart.privateName(table_calendar$, "TableCalendar.locale");
  var rangeStartDay$ = dart.privateName(table_calendar$, "TableCalendar.rangeStartDay");
  var rangeEndDay$ = dart.privateName(table_calendar$, "TableCalendar.rangeEndDay");
  var focusedDay$ = dart.privateName(table_calendar$, "TableCalendar.focusedDay");
  var firstDay$ = dart.privateName(table_calendar$, "TableCalendar.firstDay");
  var lastDay$ = dart.privateName(table_calendar$, "TableCalendar.lastDay");
  var currentDay$ = dart.privateName(table_calendar$, "TableCalendar.currentDay");
  var weekendDays$ = dart.privateName(table_calendar$, "TableCalendar.weekendDays");
  var calendarFormat$ = dart.privateName(table_calendar$, "TableCalendar.calendarFormat");
  var availableCalendarFormats$ = dart.privateName(table_calendar$, "TableCalendar.availableCalendarFormats");
  var headerVisible$ = dart.privateName(table_calendar$, "TableCalendar.headerVisible");
  var daysOfWeekVisible$ = dart.privateName(table_calendar$, "TableCalendar.daysOfWeekVisible");
  var pageJumpingEnabled$ = dart.privateName(table_calendar$, "TableCalendar.pageJumpingEnabled");
  var pageAnimationEnabled$ = dart.privateName(table_calendar$, "TableCalendar.pageAnimationEnabled");
  var sixWeekMonthsEnforced$ = dart.privateName(table_calendar$, "TableCalendar.sixWeekMonthsEnforced");
  var shouldFillViewport$ = dart.privateName(table_calendar$, "TableCalendar.shouldFillViewport");
  var weekNumbersVisible$ = dart.privateName(table_calendar$, "TableCalendar.weekNumbersVisible");
  var rowHeight$ = dart.privateName(table_calendar$, "TableCalendar.rowHeight");
  var daysOfWeekHeight$ = dart.privateName(table_calendar$, "TableCalendar.daysOfWeekHeight");
  var formatAnimationDuration$ = dart.privateName(table_calendar$, "TableCalendar.formatAnimationDuration");
  var formatAnimationCurve$ = dart.privateName(table_calendar$, "TableCalendar.formatAnimationCurve");
  var pageAnimationDuration$ = dart.privateName(table_calendar$, "TableCalendar.pageAnimationDuration");
  var pageAnimationCurve$ = dart.privateName(table_calendar$, "TableCalendar.pageAnimationCurve");
  var startingDayOfWeek$ = dart.privateName(table_calendar$, "TableCalendar.startingDayOfWeek");
  var dayHitTestBehavior$ = dart.privateName(table_calendar$, "TableCalendar.dayHitTestBehavior");
  var availableGestures$ = dart.privateName(table_calendar$, "TableCalendar.availableGestures");
  var simpleSwipeConfig$ = dart.privateName(table_calendar$, "TableCalendar.simpleSwipeConfig");
  var headerStyle$ = dart.privateName(table_calendar$, "TableCalendar.headerStyle");
  var daysOfWeekStyle$ = dart.privateName(table_calendar$, "TableCalendar.daysOfWeekStyle");
  var calendarStyle$ = dart.privateName(table_calendar$, "TableCalendar.calendarStyle");
  var calendarBuilders$ = dart.privateName(table_calendar$, "TableCalendar.calendarBuilders");
  var rangeSelectionMode$ = dart.privateName(table_calendar$, "TableCalendar.rangeSelectionMode");
  var eventLoader$ = dart.privateName(table_calendar$, "TableCalendar.eventLoader");
  var enabledDayPredicate$ = dart.privateName(table_calendar$, "TableCalendar.enabledDayPredicate");
  var selectedDayPredicate$ = dart.privateName(table_calendar$, "TableCalendar.selectedDayPredicate");
  var holidayPredicate$ = dart.privateName(table_calendar$, "TableCalendar.holidayPredicate");
  var onRangeSelected$ = dart.privateName(table_calendar$, "TableCalendar.onRangeSelected");
  var onDaySelected$ = dart.privateName(table_calendar$, "TableCalendar.onDaySelected");
  var onDayLongPressed$ = dart.privateName(table_calendar$, "TableCalendar.onDayLongPressed");
  var onDisabledDayTapped$ = dart.privateName(table_calendar$, "TableCalendar.onDisabledDayTapped");
  var onDisabledDayLongPressed$ = dart.privateName(table_calendar$, "TableCalendar.onDisabledDayLongPressed");
  var onHeaderTapped$ = dart.privateName(table_calendar$, "TableCalendar.onHeaderTapped");
  var onHeaderLongPressed$ = dart.privateName(table_calendar$, "TableCalendar.onHeaderLongPressed");
  var onPageChanged$ = dart.privateName(table_calendar$, "TableCalendar.onPageChanged");
  var onFormatChanged$ = dart.privateName(table_calendar$, "TableCalendar.onFormatChanged");
  var onCalendarCreated$ = dart.privateName(table_calendar$, "TableCalendar.onCalendarCreated");
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var SimpleSwipeConfig_swipeDetectionBehavior = dart.privateName(simple_gesture_detector, "SimpleSwipeConfig.swipeDetectionBehavior");
  var SimpleSwipeConfig_horizontalThreshold = dart.privateName(simple_gesture_detector, "SimpleSwipeConfig.horizontalThreshold");
  var SimpleSwipeConfig_verticalThreshold = dart.privateName(simple_gesture_detector, "SimpleSwipeConfig.verticalThreshold");
  const _is_TableCalendar_default = Symbol('_is_TableCalendar_default');
  table_calendar$.TableCalendar$ = dart.generic(T => {
    var __t$_TableCalendarStateOfT = () => (__t$_TableCalendarStateOfT = dart.constFn(table_calendar$._TableCalendarState$(T)))();
    class TableCalendar extends framework.StatefulWidget {
      get locale() {
        return this[locale$];
      }
      set locale(value) {
        super.locale = value;
      }
      get rangeStartDay() {
        return this[rangeStartDay$];
      }
      set rangeStartDay(value) {
        super.rangeStartDay = value;
      }
      get rangeEndDay() {
        return this[rangeEndDay$];
      }
      set rangeEndDay(value) {
        super.rangeEndDay = value;
      }
      get focusedDay() {
        return this[focusedDay$];
      }
      set focusedDay(value) {
        super.focusedDay = value;
      }
      get firstDay() {
        return this[firstDay$];
      }
      set firstDay(value) {
        super.firstDay = value;
      }
      get lastDay() {
        return this[lastDay$];
      }
      set lastDay(value) {
        super.lastDay = value;
      }
      get currentDay() {
        return this[currentDay$];
      }
      set currentDay(value) {
        super.currentDay = value;
      }
      get weekendDays() {
        return this[weekendDays$];
      }
      set weekendDays(value) {
        super.weekendDays = value;
      }
      get calendarFormat() {
        return this[calendarFormat$];
      }
      set calendarFormat(value) {
        super.calendarFormat = value;
      }
      get availableCalendarFormats() {
        return this[availableCalendarFormats$];
      }
      set availableCalendarFormats(value) {
        super.availableCalendarFormats = value;
      }
      get headerVisible() {
        return this[headerVisible$];
      }
      set headerVisible(value) {
        super.headerVisible = value;
      }
      get daysOfWeekVisible() {
        return this[daysOfWeekVisible$];
      }
      set daysOfWeekVisible(value) {
        super.daysOfWeekVisible = value;
      }
      get pageJumpingEnabled() {
        return this[pageJumpingEnabled$];
      }
      set pageJumpingEnabled(value) {
        super.pageJumpingEnabled = value;
      }
      get pageAnimationEnabled() {
        return this[pageAnimationEnabled$];
      }
      set pageAnimationEnabled(value) {
        super.pageAnimationEnabled = value;
      }
      get sixWeekMonthsEnforced() {
        return this[sixWeekMonthsEnforced$];
      }
      set sixWeekMonthsEnforced(value) {
        super.sixWeekMonthsEnforced = value;
      }
      get shouldFillViewport() {
        return this[shouldFillViewport$];
      }
      set shouldFillViewport(value) {
        super.shouldFillViewport = value;
      }
      get weekNumbersVisible() {
        return this[weekNumbersVisible$];
      }
      set weekNumbersVisible(value) {
        super.weekNumbersVisible = value;
      }
      get rowHeight() {
        return this[rowHeight$];
      }
      set rowHeight(value) {
        super.rowHeight = value;
      }
      get daysOfWeekHeight() {
        return this[daysOfWeekHeight$];
      }
      set daysOfWeekHeight(value) {
        super.daysOfWeekHeight = value;
      }
      get formatAnimationDuration() {
        return this[formatAnimationDuration$];
      }
      set formatAnimationDuration(value) {
        super.formatAnimationDuration = value;
      }
      get formatAnimationCurve() {
        return this[formatAnimationCurve$];
      }
      set formatAnimationCurve(value) {
        super.formatAnimationCurve = value;
      }
      get pageAnimationDuration() {
        return this[pageAnimationDuration$];
      }
      set pageAnimationDuration(value) {
        super.pageAnimationDuration = value;
      }
      get pageAnimationCurve() {
        return this[pageAnimationCurve$];
      }
      set pageAnimationCurve(value) {
        super.pageAnimationCurve = value;
      }
      get startingDayOfWeek() {
        return this[startingDayOfWeek$];
      }
      set startingDayOfWeek(value) {
        super.startingDayOfWeek = value;
      }
      get dayHitTestBehavior() {
        return this[dayHitTestBehavior$];
      }
      set dayHitTestBehavior(value) {
        super.dayHitTestBehavior = value;
      }
      get availableGestures() {
        return this[availableGestures$];
      }
      set availableGestures(value) {
        super.availableGestures = value;
      }
      get simpleSwipeConfig() {
        return this[simpleSwipeConfig$];
      }
      set simpleSwipeConfig(value) {
        super.simpleSwipeConfig = value;
      }
      get headerStyle() {
        return this[headerStyle$];
      }
      set headerStyle(value) {
        super.headerStyle = value;
      }
      get daysOfWeekStyle() {
        return this[daysOfWeekStyle$];
      }
      set daysOfWeekStyle(value) {
        super.daysOfWeekStyle = value;
      }
      get calendarStyle() {
        return this[calendarStyle$];
      }
      set calendarStyle(value) {
        super.calendarStyle = value;
      }
      get calendarBuilders() {
        return this[calendarBuilders$];
      }
      set calendarBuilders(value) {
        super.calendarBuilders = value;
      }
      get rangeSelectionMode() {
        return this[rangeSelectionMode$];
      }
      set rangeSelectionMode(value) {
        super.rangeSelectionMode = value;
      }
      get eventLoader() {
        return this[eventLoader$];
      }
      set eventLoader(value) {
        super.eventLoader = value;
      }
      get enabledDayPredicate() {
        return this[enabledDayPredicate$];
      }
      set enabledDayPredicate(value) {
        super.enabledDayPredicate = value;
      }
      get selectedDayPredicate() {
        return this[selectedDayPredicate$];
      }
      set selectedDayPredicate(value) {
        super.selectedDayPredicate = value;
      }
      get holidayPredicate() {
        return this[holidayPredicate$];
      }
      set holidayPredicate(value) {
        super.holidayPredicate = value;
      }
      get onRangeSelected() {
        return this[onRangeSelected$];
      }
      set onRangeSelected(value) {
        super.onRangeSelected = value;
      }
      get onDaySelected() {
        return this[onDaySelected$];
      }
      set onDaySelected(value) {
        super.onDaySelected = value;
      }
      get onDayLongPressed() {
        return this[onDayLongPressed$];
      }
      set onDayLongPressed(value) {
        super.onDayLongPressed = value;
      }
      get onDisabledDayTapped() {
        return this[onDisabledDayTapped$];
      }
      set onDisabledDayTapped(value) {
        super.onDisabledDayTapped = value;
      }
      get onDisabledDayLongPressed() {
        return this[onDisabledDayLongPressed$];
      }
      set onDisabledDayLongPressed(value) {
        super.onDisabledDayLongPressed = value;
      }
      get onHeaderTapped() {
        return this[onHeaderTapped$];
      }
      set onHeaderTapped(value) {
        super.onHeaderTapped = value;
      }
      get onHeaderLongPressed() {
        return this[onHeaderLongPressed$];
      }
      set onHeaderLongPressed(value) {
        super.onHeaderLongPressed = value;
      }
      get onPageChanged() {
        return this[onPageChanged$];
      }
      set onPageChanged(value) {
        super.onPageChanged = value;
      }
      get onFormatChanged() {
        return this[onFormatChanged$];
      }
      set onFormatChanged(value) {
        super.onFormatChanged = value;
      }
      get onCalendarCreated() {
        return this[onCalendarCreated$];
      }
      set onCalendarCreated(value) {
        super.onCalendarCreated = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let focusedDay = opts && 'focusedDay' in opts ? opts.focusedDay : null;
        let firstDay = opts && 'firstDay' in opts ? opts.firstDay : null;
        let lastDay = opts && 'lastDay' in opts ? opts.lastDay : null;
        let currentDay = opts && 'currentDay' in opts ? opts.currentDay : null;
        let locale = opts && 'locale' in opts ? opts.locale : null;
        let rangeStartDay = opts && 'rangeStartDay' in opts ? opts.rangeStartDay : null;
        let rangeEndDay = opts && 'rangeEndDay' in opts ? opts.rangeEndDay : null;
        let weekendDays = opts && 'weekendDays' in opts ? opts.weekendDays : C[111] || CT.C111;
        let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : C[95] || CT.C95;
        let availableCalendarFormats = opts && 'availableCalendarFormats' in opts ? opts.availableCalendarFormats : C[112] || CT.C112;
        let headerVisible = opts && 'headerVisible' in opts ? opts.headerVisible : true;
        let daysOfWeekVisible = opts && 'daysOfWeekVisible' in opts ? opts.daysOfWeekVisible : true;
        let pageJumpingEnabled = opts && 'pageJumpingEnabled' in opts ? opts.pageJumpingEnabled : false;
        let pageAnimationEnabled = opts && 'pageAnimationEnabled' in opts ? opts.pageAnimationEnabled : true;
        let sixWeekMonthsEnforced = opts && 'sixWeekMonthsEnforced' in opts ? opts.sixWeekMonthsEnforced : false;
        let shouldFillViewport = opts && 'shouldFillViewport' in opts ? opts.shouldFillViewport : false;
        let weekNumbersVisible = opts && 'weekNumbersVisible' in opts ? opts.weekNumbersVisible : false;
        let rowHeight = opts && 'rowHeight' in opts ? opts.rowHeight : 52;
        let daysOfWeekHeight = opts && 'daysOfWeekHeight' in opts ? opts.daysOfWeekHeight : 16;
        let formatAnimationDuration = opts && 'formatAnimationDuration' in opts ? opts.formatAnimationDuration : C[113] || CT.C113;
        let formatAnimationCurve = opts && 'formatAnimationCurve' in opts ? opts.formatAnimationCurve : C[114] || CT.C114;
        let pageAnimationDuration = opts && 'pageAnimationDuration' in opts ? opts.pageAnimationDuration : C[2] || CT.C2;
        let pageAnimationCurve = opts && 'pageAnimationCurve' in opts ? opts.pageAnimationCurve : C[115] || CT.C115;
        let startingDayOfWeek = opts && 'startingDayOfWeek' in opts ? opts.startingDayOfWeek : C[105] || CT.C105;
        let dayHitTestBehavior = opts && 'dayHitTestBehavior' in opts ? opts.dayHitTestBehavior : C[116] || CT.C116;
        let availableGestures = opts && 'availableGestures' in opts ? opts.availableGestures : C[93] || CT.C93;
        let simpleSwipeConfig = opts && 'simpleSwipeConfig' in opts ? opts.simpleSwipeConfig : C[117] || CT.C117;
        let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : C[119] || CT.C119;
        let daysOfWeekStyle = opts && 'daysOfWeekStyle' in opts ? opts.daysOfWeekStyle : C[120] || CT.C120;
        let calendarStyle = opts && 'calendarStyle' in opts ? opts.calendarStyle : C[121] || CT.C121;
        let calendarBuilders = opts && 'calendarBuilders' in opts ? opts.calendarBuilders : C[122] || CT.C122;
        let rangeSelectionMode = opts && 'rangeSelectionMode' in opts ? opts.rangeSelectionMode : C[108] || CT.C108;
        let eventLoader = opts && 'eventLoader' in opts ? opts.eventLoader : null;
        let enabledDayPredicate = opts && 'enabledDayPredicate' in opts ? opts.enabledDayPredicate : null;
        let selectedDayPredicate = opts && 'selectedDayPredicate' in opts ? opts.selectedDayPredicate : null;
        let holidayPredicate = opts && 'holidayPredicate' in opts ? opts.holidayPredicate : null;
        let onRangeSelected = opts && 'onRangeSelected' in opts ? opts.onRangeSelected : null;
        let onDaySelected = opts && 'onDaySelected' in opts ? opts.onDaySelected : null;
        let onDayLongPressed = opts && 'onDayLongPressed' in opts ? opts.onDayLongPressed : null;
        let onDisabledDayTapped = opts && 'onDisabledDayTapped' in opts ? opts.onDisabledDayTapped : null;
        let onDisabledDayLongPressed = opts && 'onDisabledDayLongPressed' in opts ? opts.onDisabledDayLongPressed : null;
        let onHeaderTapped = opts && 'onHeaderTapped' in opts ? opts.onHeaderTapped : null;
        let onHeaderLongPressed = opts && 'onHeaderLongPressed' in opts ? opts.onHeaderLongPressed : null;
        let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
        let onFormatChanged = opts && 'onFormatChanged' in opts ? opts.onFormatChanged : null;
        let onCalendarCreated = opts && 'onCalendarCreated' in opts ? opts.onCalendarCreated : null;
        return new (table_calendar$.TableCalendar$(T)).new({key: key, focusedDay: focusedDay, firstDay: firstDay, lastDay: lastDay, currentDay: currentDay, locale: locale, rangeStartDay: rangeStartDay, rangeEndDay: rangeEndDay, weekendDays: weekendDays, calendarFormat: calendarFormat, availableCalendarFormats: availableCalendarFormats, headerVisible: headerVisible, daysOfWeekVisible: daysOfWeekVisible, pageJumpingEnabled: pageJumpingEnabled, pageAnimationEnabled: pageAnimationEnabled, sixWeekMonthsEnforced: sixWeekMonthsEnforced, shouldFillViewport: shouldFillViewport, weekNumbersVisible: weekNumbersVisible, rowHeight: rowHeight, daysOfWeekHeight: daysOfWeekHeight, formatAnimationDuration: formatAnimationDuration, formatAnimationCurve: formatAnimationCurve, pageAnimationDuration: pageAnimationDuration, pageAnimationCurve: pageAnimationCurve, startingDayOfWeek: startingDayOfWeek, dayHitTestBehavior: dayHitTestBehavior, availableGestures: availableGestures, simpleSwipeConfig: simpleSwipeConfig, headerStyle: headerStyle, daysOfWeekStyle: daysOfWeekStyle, calendarStyle: calendarStyle, calendarBuilders: calendarBuilders, rangeSelectionMode: rangeSelectionMode, eventLoader: eventLoader, enabledDayPredicate: enabledDayPredicate, selectedDayPredicate: selectedDayPredicate, holidayPredicate: holidayPredicate, onRangeSelected: onRangeSelected, onDaySelected: onDaySelected, onDayLongPressed: onDayLongPressed, onDisabledDayTapped: onDisabledDayTapped, onDisabledDayLongPressed: onDisabledDayLongPressed, onHeaderTapped: onHeaderTapped, onHeaderLongPressed: onHeaderLongPressed, onPageChanged: onPageChanged, onFormatChanged: onFormatChanged, onCalendarCreated: onCalendarCreated});
      }
      createState() {
        return new (__t$_TableCalendarStateOfT()).new();
      }
    }
    (TableCalendar.new = function(opts) {
      let t11;
      let key = opts && 'key' in opts ? opts.key : null;
      let focusedDay = opts && 'focusedDay' in opts ? opts.focusedDay : null;
      let firstDay = opts && 'firstDay' in opts ? opts.firstDay : null;
      let lastDay = opts && 'lastDay' in opts ? opts.lastDay : null;
      let currentDay = opts && 'currentDay' in opts ? opts.currentDay : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let rangeStartDay = opts && 'rangeStartDay' in opts ? opts.rangeStartDay : null;
      let rangeEndDay = opts && 'rangeEndDay' in opts ? opts.rangeEndDay : null;
      let weekendDays = opts && 'weekendDays' in opts ? opts.weekendDays : C[111] || CT.C111;
      let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : C[95] || CT.C95;
      let availableCalendarFormats = opts && 'availableCalendarFormats' in opts ? opts.availableCalendarFormats : C[112] || CT.C112;
      let headerVisible = opts && 'headerVisible' in opts ? opts.headerVisible : true;
      let daysOfWeekVisible = opts && 'daysOfWeekVisible' in opts ? opts.daysOfWeekVisible : true;
      let pageJumpingEnabled = opts && 'pageJumpingEnabled' in opts ? opts.pageJumpingEnabled : false;
      let pageAnimationEnabled = opts && 'pageAnimationEnabled' in opts ? opts.pageAnimationEnabled : true;
      let sixWeekMonthsEnforced = opts && 'sixWeekMonthsEnforced' in opts ? opts.sixWeekMonthsEnforced : false;
      let shouldFillViewport = opts && 'shouldFillViewport' in opts ? opts.shouldFillViewport : false;
      let weekNumbersVisible = opts && 'weekNumbersVisible' in opts ? opts.weekNumbersVisible : false;
      let rowHeight = opts && 'rowHeight' in opts ? opts.rowHeight : 52;
      let daysOfWeekHeight = opts && 'daysOfWeekHeight' in opts ? opts.daysOfWeekHeight : 16;
      let formatAnimationDuration = opts && 'formatAnimationDuration' in opts ? opts.formatAnimationDuration : C[113] || CT.C113;
      let formatAnimationCurve = opts && 'formatAnimationCurve' in opts ? opts.formatAnimationCurve : C[114] || CT.C114;
      let pageAnimationDuration = opts && 'pageAnimationDuration' in opts ? opts.pageAnimationDuration : C[2] || CT.C2;
      let pageAnimationCurve = opts && 'pageAnimationCurve' in opts ? opts.pageAnimationCurve : C[115] || CT.C115;
      let startingDayOfWeek = opts && 'startingDayOfWeek' in opts ? opts.startingDayOfWeek : C[105] || CT.C105;
      let dayHitTestBehavior = opts && 'dayHitTestBehavior' in opts ? opts.dayHitTestBehavior : C[116] || CT.C116;
      let availableGestures = opts && 'availableGestures' in opts ? opts.availableGestures : C[93] || CT.C93;
      let simpleSwipeConfig = opts && 'simpleSwipeConfig' in opts ? opts.simpleSwipeConfig : C[117] || CT.C117;
      let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : C[119] || CT.C119;
      let daysOfWeekStyle = opts && 'daysOfWeekStyle' in opts ? opts.daysOfWeekStyle : C[120] || CT.C120;
      let calendarStyle = opts && 'calendarStyle' in opts ? opts.calendarStyle : C[121] || CT.C121;
      let calendarBuilders = opts && 'calendarBuilders' in opts ? opts.calendarBuilders : C[122] || CT.C122;
      let rangeSelectionMode = opts && 'rangeSelectionMode' in opts ? opts.rangeSelectionMode : C[108] || CT.C108;
      let eventLoader = opts && 'eventLoader' in opts ? opts.eventLoader : null;
      let enabledDayPredicate = opts && 'enabledDayPredicate' in opts ? opts.enabledDayPredicate : null;
      let selectedDayPredicate = opts && 'selectedDayPredicate' in opts ? opts.selectedDayPredicate : null;
      let holidayPredicate = opts && 'holidayPredicate' in opts ? opts.holidayPredicate : null;
      let onRangeSelected = opts && 'onRangeSelected' in opts ? opts.onRangeSelected : null;
      let onDaySelected = opts && 'onDaySelected' in opts ? opts.onDaySelected : null;
      let onDayLongPressed = opts && 'onDayLongPressed' in opts ? opts.onDayLongPressed : null;
      let onDisabledDayTapped = opts && 'onDisabledDayTapped' in opts ? opts.onDisabledDayTapped : null;
      let onDisabledDayLongPressed = opts && 'onDisabledDayLongPressed' in opts ? opts.onDisabledDayLongPressed : null;
      let onHeaderTapped = opts && 'onHeaderTapped' in opts ? opts.onHeaderTapped : null;
      let onHeaderLongPressed = opts && 'onHeaderLongPressed' in opts ? opts.onHeaderLongPressed : null;
      let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
      let onFormatChanged = opts && 'onFormatChanged' in opts ? opts.onFormatChanged : null;
      let onCalendarCreated = opts && 'onCalendarCreated' in opts ? opts.onCalendarCreated : null;
      this[locale$] = locale;
      this[rangeStartDay$] = rangeStartDay;
      this[rangeEndDay$] = rangeEndDay;
      this[weekendDays$] = weekendDays;
      this[calendarFormat$] = calendarFormat;
      this[availableCalendarFormats$] = availableCalendarFormats;
      this[headerVisible$] = headerVisible;
      this[daysOfWeekVisible$] = daysOfWeekVisible;
      this[pageJumpingEnabled$] = pageJumpingEnabled;
      this[pageAnimationEnabled$] = pageAnimationEnabled;
      this[sixWeekMonthsEnforced$] = sixWeekMonthsEnforced;
      this[shouldFillViewport$] = shouldFillViewport;
      this[weekNumbersVisible$] = weekNumbersVisible;
      this[rowHeight$] = rowHeight;
      this[daysOfWeekHeight$] = daysOfWeekHeight;
      this[formatAnimationDuration$] = formatAnimationDuration;
      this[formatAnimationCurve$] = formatAnimationCurve;
      this[pageAnimationDuration$] = pageAnimationDuration;
      this[pageAnimationCurve$] = pageAnimationCurve;
      this[startingDayOfWeek$] = startingDayOfWeek;
      this[dayHitTestBehavior$] = dayHitTestBehavior;
      this[availableGestures$] = availableGestures;
      this[simpleSwipeConfig$] = simpleSwipeConfig;
      this[headerStyle$] = headerStyle;
      this[daysOfWeekStyle$] = daysOfWeekStyle;
      this[calendarStyle$] = calendarStyle;
      this[calendarBuilders$] = calendarBuilders;
      this[rangeSelectionMode$] = rangeSelectionMode;
      this[eventLoader$] = eventLoader;
      this[enabledDayPredicate$] = enabledDayPredicate;
      this[selectedDayPredicate$] = selectedDayPredicate;
      this[holidayPredicate$] = holidayPredicate;
      this[onRangeSelected$] = onRangeSelected;
      this[onDaySelected$] = onDaySelected;
      this[onDayLongPressed$] = onDayLongPressed;
      this[onDisabledDayTapped$] = onDisabledDayTapped;
      this[onDisabledDayLongPressed$] = onDisabledDayLongPressed;
      this[onHeaderTapped$] = onHeaderTapped;
      this[onHeaderLongPressed$] = onHeaderLongPressed;
      this[onPageChanged$] = onPageChanged;
      this[onFormatChanged$] = onFormatChanged;
      this[onCalendarCreated$] = onCalendarCreated;
      if (!availableCalendarFormats[$keys][$contains](calendarFormat)) dart.assertFailed(null, I[24], 263, 16, "availableCalendarFormats.keys.contains(calendarFormat)");
      if (!(availableCalendarFormats[$length] <= utils$.CalendarFormat.values[$length])) dart.assertFailed(null, I[24], 264, 16, "availableCalendarFormats.length <= CalendarFormat.values.length");
      if (!(weekendDays[$isNotEmpty] ? weekendDays[$every](dart.fn(day => day >= 1 && day <= 7, T$.intTobool())) : true)) dart.assertFailed(null, I[24], 265, 16, "weekendDays.isNotEmpty\n            ? weekendDays.every(\n                (day) => day >= DateTime.monday && day <= DateTime.sunday)\n            : true");
      this[focusedDay$] = utils$.normalizeDate(focusedDay);
      this[firstDay$] = utils$.normalizeDate(firstDay);
      this[lastDay$] = utils$.normalizeDate(lastDay);
      this[currentDay$] = (t11 = currentDay, t11 == null ? new core.DateTime.now() : t11);
      TableCalendar.__proto__.new.call(this, {key: key});
      ;
    }).prototype = TableCalendar.prototype;
    dart.addTypeTests(TableCalendar);
    TableCalendar.prototype[_is_TableCalendar_default] = true;
    dart.addTypeCaches(TableCalendar);
    dart.setMethodSignature(TableCalendar, () => ({
      __proto__: dart.getMethods(TableCalendar.__proto__),
      createState: dart.fnType(table_calendar$._TableCalendarState$(T), [])
    }));
    dart.setLibraryUri(TableCalendar, I[23]);
    dart.setFieldSignature(TableCalendar, () => ({
      __proto__: dart.getFields(TableCalendar.__proto__),
      locale: dart.finalFieldType(dart.dynamic),
      rangeStartDay: dart.finalFieldType(dart.nullable(core.DateTime)),
      rangeEndDay: dart.finalFieldType(dart.nullable(core.DateTime)),
      focusedDay: dart.finalFieldType(core.DateTime),
      firstDay: dart.finalFieldType(core.DateTime),
      lastDay: dart.finalFieldType(core.DateTime),
      currentDay: dart.finalFieldType(dart.nullable(core.DateTime)),
      weekendDays: dart.finalFieldType(core.List$(core.int)),
      calendarFormat: dart.finalFieldType(utils$.CalendarFormat),
      availableCalendarFormats: dart.finalFieldType(core.Map$(utils$.CalendarFormat, core.String)),
      headerVisible: dart.finalFieldType(core.bool),
      daysOfWeekVisible: dart.finalFieldType(core.bool),
      pageJumpingEnabled: dart.finalFieldType(core.bool),
      pageAnimationEnabled: dart.finalFieldType(core.bool),
      sixWeekMonthsEnforced: dart.finalFieldType(core.bool),
      shouldFillViewport: dart.finalFieldType(core.bool),
      weekNumbersVisible: dart.finalFieldType(core.bool),
      rowHeight: dart.finalFieldType(core.double),
      daysOfWeekHeight: dart.finalFieldType(core.double),
      formatAnimationDuration: dart.finalFieldType(core.Duration),
      formatAnimationCurve: dart.finalFieldType(curves.Curve),
      pageAnimationDuration: dart.finalFieldType(core.Duration),
      pageAnimationCurve: dart.finalFieldType(curves.Curve),
      startingDayOfWeek: dart.finalFieldType(utils$.StartingDayOfWeek),
      dayHitTestBehavior: dart.finalFieldType(proxy_box.HitTestBehavior),
      availableGestures: dart.finalFieldType(utils$.AvailableGestures),
      simpleSwipeConfig: dart.finalFieldType(simple_gesture_detector.SimpleSwipeConfig),
      headerStyle: dart.finalFieldType(header_style.HeaderStyle),
      daysOfWeekStyle: dart.finalFieldType(days_of_week_style.DaysOfWeekStyle),
      calendarStyle: dart.finalFieldType(calendar_style.CalendarStyle),
      calendarBuilders: dart.finalFieldType(calendar_builders.CalendarBuilders$(T)),
      rangeSelectionMode: dart.finalFieldType(table_calendar$.RangeSelectionMode),
      eventLoader: dart.finalFieldType(dart.nullable(dart.fnType(core.List$(T), [core.DateTime]))),
      enabledDayPredicate: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.DateTime]))),
      selectedDayPredicate: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.DateTime]))),
      holidayPredicate: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.DateTime]))),
      onRangeSelected: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.DateTime), dart.nullable(core.DateTime), core.DateTime]))),
      onDaySelected: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.DateTime, core.DateTime]))),
      onDayLongPressed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.DateTime, core.DateTime]))),
      onDisabledDayTapped: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.DateTime]))),
      onDisabledDayLongPressed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.DateTime]))),
      onHeaderTapped: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.DateTime]))),
      onHeaderLongPressed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.DateTime]))),
      onPageChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.DateTime]))),
      onFormatChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [utils$.CalendarFormat]))),
      onCalendarCreated: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [page_view.PageController])))
    }));
    return TableCalendar;
  });
  table_calendar$.TableCalendar = table_calendar$.TableCalendar$();
  dart.addTypeTests(table_calendar$.TableCalendar, _is_TableCalendar_default);
  var ___TableCalendarState__pageController = dart.privateName(table_calendar$, "_#_TableCalendarState#_pageController");
  var ___TableCalendarState__focusedDay = dart.privateName(table_calendar$, "_#_TableCalendarState#_focusedDay");
  var ___TableCalendarState__rangeSelectionMode = dart.privateName(table_calendar$, "_#_TableCalendarState#_rangeSelectionMode");
  var _firstSelectedDay = dart.privateName(table_calendar$, "_firstSelectedDay");
  var _pageController = dart.privateName(table_calendar$, "_pageController");
  var _focusedDay$ = dart.privateName(table_calendar$, "_focusedDay");
  var _rangeSelectionMode = dart.privateName(table_calendar$, "_rangeSelectionMode");
  var _isRangeSelectionToggleable = dart.privateName(table_calendar$, "_isRangeSelectionToggleable");
  var _isRangeSelectionOn = dart.privateName(table_calendar$, "_isRangeSelectionOn");
  var _shouldBlockOutsideDays = dart.privateName(table_calendar$, "_shouldBlockOutsideDays");
  var _swipeCalendarFormat = dart.privateName(table_calendar$, "_swipeCalendarFormat");
  var _isDayDisabled = dart.privateName(table_calendar$, "_isDayDisabled");
  var _updateFocusOnTap = dart.privateName(table_calendar$, "_updateFocusOnTap");
  var _onDayTapped = dart.privateName(table_calendar$, "_onDayTapped");
  var _toggleRangeSelection = dart.privateName(table_calendar$, "_toggleRangeSelection");
  var _onDayLongPressed = dart.privateName(table_calendar$, "_onDayLongPressed");
  var _isBeforeMonth = dart.privateName(table_calendar$, "_isBeforeMonth");
  var _firstDayOfMonth = dart.privateName(table_calendar$, "_firstDayOfMonth");
  var _isAfterMonth = dart.privateName(table_calendar$, "_isAfterMonth");
  var _lastDayOfMonth = dart.privateName(table_calendar$, "_lastDayOfMonth");
  var _onLeftChevronTap = dart.privateName(table_calendar$, "_onLeftChevronTap");
  var _onRightChevronTap = dart.privateName(table_calendar$, "_onRightChevronTap");
  var _calculateWeekNumber = dart.privateName(table_calendar$, "_calculateWeekNumber");
  var _isWeekend = dart.privateName(table_calendar$, "_isWeekend");
  var _buildCell = dart.privateName(table_calendar$, "_buildCell");
  var _isWithinRange = dart.privateName(table_calendar$, "_isWithinRange");
  var _buildSingleMarker = dart.privateName(table_calendar$, "_buildSingleMarker");
  var _dayOfYear = dart.privateName(table_calendar$, "_dayOfYear");
  var _isDayAvailable = dart.privateName(table_calendar$, "_isDayAvailable");
  const _is__TableCalendarState_default = Symbol('_is__TableCalendarState_default');
  table_calendar$._TableCalendarState$ = dart.generic(T => {
    var __t$TableCalendarOfT = () => (__t$TableCalendarOfT = dart.constFn(table_calendar$.TableCalendar$(T)))();
    var __t$JSArrayOfT = () => (__t$JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$BuildContextAndDateTimeAndListOfTToWidgetN = () => (__t$BuildContextAndDateTimeAndListOfTToWidgetN = dart.constFn(dart.fnType(T$.WidgetN(), [framework.BuildContext, core.DateTime, __t$ListOfT()])))();
    var __t$BuildContextAndDateTimeAndListOfTToNWidgetN = () => (__t$BuildContextAndDateTimeAndListOfTToNWidgetN = dart.constFn(dart.nullable(__t$BuildContextAndDateTimeAndListOfTToWidgetN())))();
    var __t$TToWidget = () => (__t$TToWidget = dart.constFn(dart.fnType(framework.Widget, [T])))();
    var __t$BuildContextAndDateTimeAndTToWidgetN = () => (__t$BuildContextAndDateTimeAndTToWidgetN = dart.constFn(dart.fnType(T$.WidgetN(), [framework.BuildContext, core.DateTime, T])))();
    var __t$BuildContextAndDateTimeAndTToNWidgetN = () => (__t$BuildContextAndDateTimeAndTToNWidgetN = dart.constFn(dart.nullable(__t$BuildContextAndDateTimeAndTToWidgetN())))();
    class _TableCalendarState extends framework.State$(table_calendar$.TableCalendar$(T)) {
      get [_pageController]() {
        let t11;
        t11 = this[___TableCalendarState__pageController];
        return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_pageController")) : t11;
      }
      set [_pageController](_pageController$35param) {
        if (this[___TableCalendarState__pageController] == null)
          this[___TableCalendarState__pageController] = _pageController$35param;
        else
          dart.throw(new _internal.LateError.fieldAI("_pageController"));
      }
      get [_focusedDay$]() {
        let t11;
        t11 = this[___TableCalendarState__focusedDay];
        return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_focusedDay")) : t11;
      }
      set [_focusedDay$](_focusedDay$35param) {
        if (this[___TableCalendarState__focusedDay] == null)
          this[___TableCalendarState__focusedDay] = _focusedDay$35param;
        else
          dart.throw(new _internal.LateError.fieldAI("_focusedDay"));
      }
      get [_rangeSelectionMode]() {
        let t11;
        t11 = this[___TableCalendarState__rangeSelectionMode];
        return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_rangeSelectionMode")) : t11;
      }
      set [_rangeSelectionMode](_rangeSelectionMode$35param) {
        this[___TableCalendarState__rangeSelectionMode] = _rangeSelectionMode$35param;
      }
      initState() {
        super.initState();
        this[_focusedDay$] = new (T$.ValueNotifierOfDateTime()).new(this.widget.focusedDay);
        this[_rangeSelectionMode] = this.widget.rangeSelectionMode;
      }
      didUpdateWidget(oldWidget) {
        __t$TableCalendarOfT().as(oldWidget);
        super.didUpdateWidget(oldWidget);
        if (!this[_focusedDay$].value._equals(this.widget.focusedDay)) {
          this[_focusedDay$].value = this.widget.focusedDay;
        }
        if (this[_rangeSelectionMode] !== this.widget.rangeSelectionMode) {
          this[_rangeSelectionMode] = this.widget.rangeSelectionMode;
        }
        if (this.widget.rangeStartDay == null && this.widget.rangeEndDay == null) {
          this[_firstSelectedDay] = null;
        }
      }
      dispose() {
        this[_focusedDay$].dispose();
        super.dispose();
      }
      get [_isRangeSelectionToggleable]() {
        return this[_rangeSelectionMode] === table_calendar$.RangeSelectionMode.toggledOn || this[_rangeSelectionMode] === table_calendar$.RangeSelectionMode.toggledOff;
      }
      get [_isRangeSelectionOn]() {
        return this[_rangeSelectionMode] === table_calendar$.RangeSelectionMode.toggledOn || this[_rangeSelectionMode] === table_calendar$.RangeSelectionMode.enforced;
      }
      get [_shouldBlockOutsideDays]() {
        return !this.widget.calendarStyle.outsideDaysVisible && this.widget.calendarFormat === utils$.CalendarFormat.month;
      }
      [_swipeCalendarFormat](direction) {
        if (this.widget.onFormatChanged != null) {
          let formats = this.widget.availableCalendarFormats[$keys][$toList]();
          let isSwipeUp = direction === simple_gesture_detector.SwipeDirection.up;
          let id = formats[$indexOf](this.widget.calendarFormat);
          if (isSwipeUp) {
            id = math.min(core.int, formats[$length] - 1, id + 1);
          } else {
            id = math.max(core.int, 0, id - 1);
          }
          dart.nullCheck(this.widget.onFormatChanged)(formats[$_get](id));
        }
      }
      [_onDayTapped](day) {
        let t11, t11$;
        let isOutside = day.month !== this[_focusedDay$].value.month;
        if (isOutside && this[_shouldBlockOutsideDays]) {
          return;
        }
        if (this[_isDayDisabled](day)) {
          t11 = this.widget.onDisabledDayTapped;
          return t11 == null ? null : t11(day);
        }
        this[_updateFocusOnTap](day);
        if (this[_isRangeSelectionOn] && this.widget.onRangeSelected != null) {
          if (this[_firstSelectedDay] == null) {
            this[_firstSelectedDay] = day;
            dart.nullCheck(this.widget.onRangeSelected)(this[_firstSelectedDay], null, this[_focusedDay$].value);
          } else {
            if (day.isAfter(dart.nullCheck(this[_firstSelectedDay]))) {
              dart.nullCheck(this.widget.onRangeSelected)(this[_firstSelectedDay], day, this[_focusedDay$].value);
              this[_firstSelectedDay] = null;
            } else if (day.isBefore(dart.nullCheck(this[_firstSelectedDay]))) {
              dart.nullCheck(this.widget.onRangeSelected)(day, this[_firstSelectedDay], this[_focusedDay$].value);
              this[_firstSelectedDay] = null;
            }
          }
        } else {
          t11$ = this.widget.onDaySelected;
          t11$ == null ? null : t11$(day, this[_focusedDay$].value);
        }
      }
      [_onDayLongPressed](day) {
        let t11, t11$;
        let isOutside = day.month !== this[_focusedDay$].value.month;
        if (isOutside && this[_shouldBlockOutsideDays]) {
          return;
        }
        if (this[_isDayDisabled](day)) {
          t11 = this.widget.onDisabledDayLongPressed;
          return t11 == null ? null : t11(day);
        }
        if (this.widget.onDayLongPressed != null) {
          this[_updateFocusOnTap](day);
          return dart.nullCheck(this.widget.onDayLongPressed)(day, this[_focusedDay$].value);
        }
        if (this.widget.onRangeSelected != null) {
          if (this[_isRangeSelectionToggleable]) {
            this[_updateFocusOnTap](day);
            this[_toggleRangeSelection]();
            if (this[_isRangeSelectionOn]) {
              this[_firstSelectedDay] = day;
              dart.nullCheck(this.widget.onRangeSelected)(this[_firstSelectedDay], null, this[_focusedDay$].value);
            } else {
              this[_firstSelectedDay] = null;
              t11$ = this.widget.onDaySelected;
              t11$ == null ? null : t11$(day, this[_focusedDay$].value);
            }
          }
        }
      }
      [_updateFocusOnTap](day) {
        if (this.widget.pageJumpingEnabled) {
          this[_focusedDay$].value = day;
          return;
        }
        if (this.widget.calendarFormat === utils$.CalendarFormat.month) {
          if (this[_isBeforeMonth](day, this[_focusedDay$].value)) {
            this[_focusedDay$].value = this[_firstDayOfMonth](this[_focusedDay$].value);
          } else if (this[_isAfterMonth](day, this[_focusedDay$].value)) {
            this[_focusedDay$].value = this[_lastDayOfMonth](this[_focusedDay$].value);
          } else {
            this[_focusedDay$].value = day;
          }
        } else {
          this[_focusedDay$].value = day;
        }
      }
      [_toggleRangeSelection]() {
        if (this[_rangeSelectionMode] === table_calendar$.RangeSelectionMode.toggledOn) {
          this[_rangeSelectionMode] = table_calendar$.RangeSelectionMode.toggledOff;
        } else {
          this[_rangeSelectionMode] = table_calendar$.RangeSelectionMode.toggledOn;
        }
      }
      [_onLeftChevronTap]() {
        this[_pageController].previousPage({duration: this.widget.pageAnimationDuration, curve: this.widget.pageAnimationCurve});
      }
      [_onRightChevronTap]() {
        this[_pageController].nextPage({duration: this.widget.pageAnimationDuration, curve: this.widget.pageAnimationCurve});
      }
      build(context) {
        return new basic.Column.new({children: (() => {
            let t11 = T$.JSArrayOfWidget().of([]);
            if (this.widget.headerVisible) t11.push(new (T$.ValueListenableBuilderOfDateTime()).new({valueListenable: this[_focusedDay$], builder: dart.fn((context, value, _) => new calendar_header.CalendarHeader.new({headerTitleBuilder: this.widget.calendarBuilders.headerTitleBuilder, focusedMonth: value, onLeftChevronTap: dart.bind(this, _onLeftChevronTap), onRightChevronTap: dart.bind(this, _onRightChevronTap), onHeaderTap: dart.fn(() => {
                  let t12;
                  t12 = this.widget.onHeaderTapped;
                  return t12 == null ? null : t12(value);
                }, T$.VoidTovoid()), onHeaderLongPress: dart.fn(() => {
                  let t12;
                  t12 = this.widget.onHeaderLongPressed;
                  return t12 == null ? null : t12(value);
                }, T$.VoidTovoid()), headerStyle: this.widget.headerStyle, availableCalendarFormats: this.widget.availableCalendarFormats, calendarFormat: this.widget.calendarFormat, locale: this.widget.locale, onFormatButtonTap: dart.fn(format => {
                  let t12;
                  if (!(this.widget.onFormatChanged != null)) dart.assertFailed("Using `FormatButton` without providing `onFormatChanged` will have no effect.", I[24], 470, 21, "widget.onFormatChanged != null");
                  t12 = this.widget.onFormatChanged;
                  t12 == null ? null : t12(format);
                }, T$.CalendarFormatTovoid())}), T$.BuildContextAndDateTimeAndWidgetNToCalendarHeader())}));
            t11.push(new basic.Flexible.new({flex: this.widget.shouldFillViewport ? 1 : 0, child: new table_calendar_base.TableCalendarBase.new({onCalendarCreated: dart.fn(pageController => {
                  let t12;
                  this[_pageController] = pageController;
                  t12 = this.widget.onCalendarCreated;
                  t12 == null ? null : t12(pageController);
                }, T$.PageControllerTovoid()), focusedDay: this[_focusedDay$].value, calendarFormat: this.widget.calendarFormat, availableGestures: this.widget.availableGestures, firstDay: this.widget.firstDay, lastDay: this.widget.lastDay, startingDayOfWeek: this.widget.startingDayOfWeek, dowDecoration: this.widget.daysOfWeekStyle.decoration, rowDecoration: this.widget.calendarStyle.rowDecoration, tableBorder: this.widget.calendarStyle.tableBorder, tablePadding: this.widget.calendarStyle.tablePadding, dowVisible: this.widget.daysOfWeekVisible, dowHeight: this.widget.daysOfWeekHeight, rowHeight: this.widget.rowHeight, formatAnimationDuration: this.widget.formatAnimationDuration, formatAnimationCurve: this.widget.formatAnimationCurve, pageAnimationEnabled: this.widget.pageAnimationEnabled, pageAnimationDuration: this.widget.pageAnimationDuration, pageAnimationCurve: this.widget.pageAnimationCurve, availableCalendarFormats: this.widget.availableCalendarFormats, simpleSwipeConfig: this.widget.simpleSwipeConfig, sixWeekMonthsEnforced: this.widget.sixWeekMonthsEnforced, onVerticalSwipe: dart.bind(this, _swipeCalendarFormat), onPageChanged: dart.fn(focusedDay => {
                  let t12;
                  this[_focusedDay$].value = focusedDay;
                  t12 = this.widget.onPageChanged;
                  t12 == null ? null : t12(focusedDay);
                }, T$.DateTimeTovoid()), weekNumbersVisible: this.widget.weekNumbersVisible, weekNumberBuilder: dart.fn((context, day) => {
                  let t12;
                  let weekNumber = this[_calculateWeekNumber](day);
                  let cell = (t12 = this.widget.calendarBuilders.weekNumberBuilder, t12 == null ? null : t12(context, weekNumber));
                  if (cell == null) {
                    cell = new basic.Padding.new({padding: C[123] || CT.C123, child: new basic.Center.new({child: new text$.Text.new(weekNumber[$toString](), {style: this.widget.calendarStyle.weekNumberTextStyle})})});
                  }
                  return cell;
                }, T$.BuildContextAndDateTimeToWidget()), dowBuilder: dart.fn((context, day) => {
                  let t12, t12$, t12$0;
                  let dowCell = (t12 = this.widget.calendarBuilders.dowBuilder, t12 == null ? null : t12(context, day));
                  if (dowCell == null) {
                    let weekdayString = (t12$0 = (t12$ = this.widget.daysOfWeekStyle.dowTextFormatter, t12$ == null ? null : t12$(day, this.widget.locale)), t12$0 == null ? new date_format.DateFormat.E(this.widget.locale).format(day) : t12$0);
                    let isWeekend = this[_isWeekend](day, {weekendDays: this.widget.weekendDays});
                    dowCell = new basic.Center.new({child: new basic.ExcludeSemantics.new({child: new text$.Text.new(weekdayString, {style: isWeekend ? this.widget.daysOfWeekStyle.weekendStyle : this.widget.daysOfWeekStyle.weekdayStyle})})});
                  }
                  return dowCell;
                }, T$.BuildContextAndDateTimeToWidget()), dayBuilder: dart.fn((context, day, focusedMonth) => new gesture_detector.GestureDetector.new({behavior: this.widget.dayHitTestBehavior, onTap: dart.fn(() => this[_onDayTapped](day), T$.VoidTovoid()), onLongPress: dart.fn(() => this[_onDayLongPressed](day), T$.VoidTovoid()), child: this[_buildCell](day, focusedMonth)}), T$.BuildContextAndDateTimeAndDateTimeToGestureDetector())})}));
            return t11;
          })()});
      }
      [_buildCell](day, focusedDay) {
        let isOutside = day.month !== focusedDay.month;
        if (isOutside && this[_shouldBlockOutsideDays]) {
          return new container.Container.new();
        }
        return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
            let t12, t12$, t12$0, t12$1, t12$2, t12$3, t12$4, t12$5, t12$6;
            let shorterSide = constraints.maxHeight > constraints.maxWidth ? constraints.maxWidth : constraints.maxHeight;
            let children = T$.JSArrayOfWidget().of([]);
            let isWithinRange = this.widget.rangeStartDay != null && this.widget.rangeEndDay != null && this[_isWithinRange](day, dart.nullCheck(this.widget.rangeStartDay), dart.nullCheck(this.widget.rangeEndDay));
            let isRangeStart = utils$.isSameDay(day, this.widget.rangeStartDay);
            let isRangeEnd = utils$.isSameDay(day, this.widget.rangeEndDay);
            let rangeHighlight = (t12 = this.widget.calendarBuilders.rangeHighlightBuilder, t12 == null ? null : t12(context, day, isWithinRange));
            if (rangeHighlight == null) {
              if (isWithinRange) {
                rangeHighlight = new basic.Center.new({child: new container.Container.new({margin: new edge_insets.EdgeInsetsDirectional.only({start: isRangeStart ? constraints.maxWidth * 0.5 : 0, end: isRangeEnd ? constraints.maxWidth * 0.5 : 0}), height: (shorterSide - this.widget.calendarStyle.cellMargin.vertical) * this.widget.calendarStyle.rangeHighlightScale, color: this.widget.calendarStyle.rangeHighlightColor})});
              }
            }
            if (rangeHighlight != null) {
              children[$add](rangeHighlight);
            }
            let isToday = utils$.isSameDay(day, this.widget.currentDay);
            let isDisabled = this[_isDayDisabled](day);
            let isWeekend = this[_isWeekend](day, {weekendDays: this.widget.weekendDays});
            let content = new cell_content.CellContent.new({key: new (T$.ValueKeyOfString()).new("CellContent-" + dart.str(day.year) + "-" + dart.str(day.month) + "-" + dart.str(day.day)), day: day, focusedDay: focusedDay, calendarStyle: this.widget.calendarStyle, calendarBuilders: this.widget.calendarBuilders, isTodayHighlighted: this.widget.calendarStyle.isTodayHighlighted, isToday: isToday, isSelected: (t12$0 = (t12$ = this.widget.selectedDayPredicate, t12$ == null ? null : t12$(day)), t12$0 == null ? false : t12$0), isRangeStart: isRangeStart, isRangeEnd: isRangeEnd, isWithinRange: isWithinRange, isOutside: isOutside, isDisabled: isDisabled, isWeekend: isWeekend, isHoliday: (t12$2 = (t12$1 = this.widget.holidayPredicate, t12$1 == null ? null : t12$1(day)), t12$2 == null ? false : t12$2), locale: this.widget.locale});
            children[$add](content);
            if (!isDisabled) {
              let events = (t12$4 = (t12$3 = this.widget.eventLoader, t12$3 == null ? null : t12$3(day)), t12$4 == null ? __t$JSArrayOfT().of([]) : t12$4);
              let markerWidget = (t12$5 = __t$BuildContextAndDateTimeAndListOfTToNWidgetN().as(this.widget.calendarBuilders.markerBuilder), t12$5 == null ? null : t12$5(context, day, events));
              if (events[$isNotEmpty] && markerWidget == null) {
                let center = constraints.maxHeight / 2;
                let markerSize = (t12$6 = this.widget.calendarStyle.markerSize, t12$6 == null ? (shorterSide - this.widget.calendarStyle.cellMargin.vertical) * this.widget.calendarStyle.markerSizeScale : t12$6);
                let markerAutoAlignmentTop = center + (shorterSide - this.widget.calendarStyle.cellMargin.vertical) / 2 - markerSize * this.widget.calendarStyle.markersAnchor;
                markerWidget = new basic.PositionedDirectional.new({top: this.widget.calendarStyle.markersAutoAligned ? markerAutoAlignmentTop : this.widget.calendarStyle.markersOffset.top, bottom: this.widget.calendarStyle.markersAutoAligned ? null : this.widget.calendarStyle.markersOffset.bottom, start: this.widget.calendarStyle.markersAutoAligned ? null : this.widget.calendarStyle.markersOffset.start, end: this.widget.calendarStyle.markersAutoAligned ? null : this.widget.calendarStyle.markersOffset.end, child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.min, children: events[$take](this.widget.calendarStyle.markersMaxCount)[$map](framework.Widget, dart.fn(event => this[_buildSingleMarker](day, event, markerSize), __t$TToWidget()))[$toList]()})});
              }
              if (markerWidget != null) {
                children[$add](markerWidget);
              }
            }
            return new basic.Stack.new({alignment: this.widget.calendarStyle.markersAlignment, children: children, clipBehavior: this.widget.calendarStyle.canMarkersOverflow ? ui.Clip.none : ui.Clip.hardEdge});
          }, T$.BuildContextAndBoxConstraintsToStack())});
      }
      [_buildSingleMarker](day, event, markerSize) {
        let t12, t12$;
        t12$ = (t12 = __t$BuildContextAndDateTimeAndTToNWidgetN().as(this.widget.calendarBuilders.singleMarkerBuilder), t12 == null ? null : t12(this.context, day, event));
        return t12$ == null ? new container.Container.new({width: markerSize, height: markerSize, margin: this.widget.calendarStyle.markerMargin, decoration: this.widget.calendarStyle.markerDecoration}) : t12$;
      }
      [_calculateWeekNumber](date) {
        let middleDay = date.add(C[124] || CT.C124);
        let dayOfYear = this[_dayOfYear](middleDay);
        return 1 + ((dayOfYear - 1) / 7)[$floor]();
      }
      [_dayOfYear](date) {
        return utils$.normalizeDate(date).difference(new core.DateTime.utc(date.year, 1, 1)).inDays + 1;
      }
      [_isWithinRange](day, start, end) {
        if (utils$.isSameDay(day, start) || utils$.isSameDay(day, end)) {
          return true;
        }
        if (day.isAfter(start) && day.isBefore(end)) {
          return true;
        }
        return false;
      }
      [_isDayDisabled](day) {
        return day.isBefore(this.widget.firstDay) || day.isAfter(this.widget.lastDay) || !this[_isDayAvailable](day);
      }
      [_isDayAvailable](day) {
        return this.widget.enabledDayPredicate == null ? true : dart.nullCheck(this.widget.enabledDayPredicate)(day);
      }
      [_firstDayOfMonth](month) {
        return new core.DateTime.utc(month.year, month.month, 1);
      }
      [_lastDayOfMonth](month) {
        let date = month.month < 12 ? new core.DateTime.utc(month.year, month.month + 1, 1) : new core.DateTime.utc(month.year + 1, 1, 1);
        return date.subtract(C[125] || CT.C125);
      }
      [_isBeforeMonth](day, month) {
        if (day.year === month.year) {
          return day.month < month.month;
        } else {
          return day.isBefore(month);
        }
      }
      [_isAfterMonth](day, month) {
        if (day.year === month.year) {
          return day.month > month.month;
        } else {
          return day.isAfter(month);
        }
      }
      [_isWeekend](day, opts) {
        let weekendDays = opts && 'weekendDays' in opts ? opts.weekendDays : C[111] || CT.C111;
        return weekendDays[$contains](day.weekday);
      }
      static ['_#new#tearOff'](T) {
        return new (table_calendar$._TableCalendarState$(T)).new();
      }
    }
    (_TableCalendarState.new = function() {
      this[___TableCalendarState__pageController] = null;
      this[___TableCalendarState__focusedDay] = null;
      this[___TableCalendarState__rangeSelectionMode] = null;
      this[_firstSelectedDay] = null;
      _TableCalendarState.__proto__.new.call(this);
      ;
    }).prototype = _TableCalendarState.prototype;
    dart.addTypeTests(_TableCalendarState);
    _TableCalendarState.prototype[_is__TableCalendarState_default] = true;
    dart.addTypeCaches(_TableCalendarState);
    dart.setMethodSignature(_TableCalendarState, () => ({
      __proto__: dart.getMethods(_TableCalendarState.__proto__),
      [_swipeCalendarFormat]: dart.fnType(dart.void, [simple_gesture_detector.SwipeDirection]),
      [_onDayTapped]: dart.fnType(dart.void, [core.DateTime]),
      [_onDayLongPressed]: dart.fnType(dart.void, [core.DateTime]),
      [_updateFocusOnTap]: dart.fnType(dart.void, [core.DateTime]),
      [_toggleRangeSelection]: dart.fnType(dart.void, []),
      [_onLeftChevronTap]: dart.fnType(dart.void, []),
      [_onRightChevronTap]: dart.fnType(dart.void, []),
      build: dart.fnType(framework.Widget, [framework.BuildContext]),
      [_buildCell]: dart.fnType(framework.Widget, [core.DateTime, core.DateTime]),
      [_buildSingleMarker]: dart.fnType(framework.Widget, [core.DateTime, T, core.double]),
      [_calculateWeekNumber]: dart.fnType(core.int, [core.DateTime]),
      [_dayOfYear]: dart.fnType(core.int, [core.DateTime]),
      [_isWithinRange]: dart.fnType(core.bool, [core.DateTime, core.DateTime, core.DateTime]),
      [_isDayDisabled]: dart.fnType(core.bool, [core.DateTime]),
      [_isDayAvailable]: dart.fnType(core.bool, [core.DateTime]),
      [_firstDayOfMonth]: dart.fnType(core.DateTime, [core.DateTime]),
      [_lastDayOfMonth]: dart.fnType(core.DateTime, [core.DateTime]),
      [_isBeforeMonth]: dart.fnType(core.bool, [core.DateTime, core.DateTime]),
      [_isAfterMonth]: dart.fnType(core.bool, [core.DateTime, core.DateTime]),
      [_isWeekend]: dart.fnType(core.bool, [core.DateTime], {weekendDays: core.List$(core.int)}, {})
    }));
    dart.setGetterSignature(_TableCalendarState, () => ({
      __proto__: dart.getGetters(_TableCalendarState.__proto__),
      [_pageController]: page_view.PageController,
      [_focusedDay$]: change_notifier.ValueNotifier$(core.DateTime),
      [_rangeSelectionMode]: table_calendar$.RangeSelectionMode,
      [_isRangeSelectionToggleable]: core.bool,
      [_isRangeSelectionOn]: core.bool,
      [_shouldBlockOutsideDays]: core.bool
    }));
    dart.setSetterSignature(_TableCalendarState, () => ({
      __proto__: dart.getSetters(_TableCalendarState.__proto__),
      [_pageController]: page_view.PageController,
      [_focusedDay$]: change_notifier.ValueNotifier$(core.DateTime),
      [_rangeSelectionMode]: table_calendar$.RangeSelectionMode
    }));
    dart.setLibraryUri(_TableCalendarState, I[23]);
    dart.setFieldSignature(_TableCalendarState, () => ({
      __proto__: dart.getFields(_TableCalendarState.__proto__),
      [___TableCalendarState__pageController]: dart.fieldType(dart.nullable(page_view.PageController)),
      [___TableCalendarState__focusedDay]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(core.DateTime))),
      [___TableCalendarState__rangeSelectionMode]: dart.fieldType(dart.nullable(table_calendar$.RangeSelectionMode)),
      [_firstSelectedDay]: dart.fieldType(dart.nullable(core.DateTime))
    }));
    return _TableCalendarState;
  });
  table_calendar$._TableCalendarState = table_calendar$._TableCalendarState$();
  dart.addTypeTests(table_calendar$._TableCalendarState, _is__TableCalendarState_default);
  var firstDay$0 = dart.privateName(table_calendar_base, "TableCalendarBase.firstDay");
  var lastDay$0 = dart.privateName(table_calendar_base, "TableCalendarBase.lastDay");
  var focusedDay$0 = dart.privateName(table_calendar_base, "TableCalendarBase.focusedDay");
  var calendarFormat$0 = dart.privateName(table_calendar_base, "TableCalendarBase.calendarFormat");
  var dowBuilder$0 = dart.privateName(table_calendar_base, "TableCalendarBase.dowBuilder");
  var weekNumberBuilder$0 = dart.privateName(table_calendar_base, "TableCalendarBase.weekNumberBuilder");
  var dayBuilder$ = dart.privateName(table_calendar_base, "TableCalendarBase.dayBuilder");
  var dowHeight$ = dart.privateName(table_calendar_base, "TableCalendarBase.dowHeight");
  var rowHeight$0 = dart.privateName(table_calendar_base, "TableCalendarBase.rowHeight");
  var sixWeekMonthsEnforced$0 = dart.privateName(table_calendar_base, "TableCalendarBase.sixWeekMonthsEnforced");
  var dowVisible$ = dart.privateName(table_calendar_base, "TableCalendarBase.dowVisible");
  var weekNumbersVisible$0 = dart.privateName(table_calendar_base, "TableCalendarBase.weekNumbersVisible");
  var dowDecoration$ = dart.privateName(table_calendar_base, "TableCalendarBase.dowDecoration");
  var rowDecoration$0 = dart.privateName(table_calendar_base, "TableCalendarBase.rowDecoration");
  var tableBorder$0 = dart.privateName(table_calendar_base, "TableCalendarBase.tableBorder");
  var tablePadding$0 = dart.privateName(table_calendar_base, "TableCalendarBase.tablePadding");
  var formatAnimationDuration$0 = dart.privateName(table_calendar_base, "TableCalendarBase.formatAnimationDuration");
  var formatAnimationCurve$0 = dart.privateName(table_calendar_base, "TableCalendarBase.formatAnimationCurve");
  var pageAnimationEnabled$0 = dart.privateName(table_calendar_base, "TableCalendarBase.pageAnimationEnabled");
  var pageAnimationDuration$0 = dart.privateName(table_calendar_base, "TableCalendarBase.pageAnimationDuration");
  var pageAnimationCurve$0 = dart.privateName(table_calendar_base, "TableCalendarBase.pageAnimationCurve");
  var startingDayOfWeek$0 = dart.privateName(table_calendar_base, "TableCalendarBase.startingDayOfWeek");
  var availableGestures$0 = dart.privateName(table_calendar_base, "TableCalendarBase.availableGestures");
  var simpleSwipeConfig$0 = dart.privateName(table_calendar_base, "TableCalendarBase.simpleSwipeConfig");
  var availableCalendarFormats$0 = dart.privateName(table_calendar_base, "TableCalendarBase.availableCalendarFormats");
  var onVerticalSwipe$ = dart.privateName(table_calendar_base, "TableCalendarBase.onVerticalSwipe");
  var onPageChanged$0 = dart.privateName(table_calendar_base, "TableCalendarBase.onPageChanged");
  var onCalendarCreated$0 = dart.privateName(table_calendar_base, "TableCalendarBase.onCalendarCreated");
  table_calendar_base.TableCalendarBase = class TableCalendarBase extends framework.StatefulWidget {
    get firstDay() {
      return this[firstDay$0];
    }
    set firstDay(value) {
      super.firstDay = value;
    }
    get lastDay() {
      return this[lastDay$0];
    }
    set lastDay(value) {
      super.lastDay = value;
    }
    get focusedDay() {
      return this[focusedDay$0];
    }
    set focusedDay(value) {
      super.focusedDay = value;
    }
    get calendarFormat() {
      return this[calendarFormat$0];
    }
    set calendarFormat(value) {
      super.calendarFormat = value;
    }
    get dowBuilder() {
      return this[dowBuilder$0];
    }
    set dowBuilder(value) {
      super.dowBuilder = value;
    }
    get weekNumberBuilder() {
      return this[weekNumberBuilder$0];
    }
    set weekNumberBuilder(value) {
      super.weekNumberBuilder = value;
    }
    get dayBuilder() {
      return this[dayBuilder$];
    }
    set dayBuilder(value) {
      super.dayBuilder = value;
    }
    get dowHeight() {
      return this[dowHeight$];
    }
    set dowHeight(value) {
      super.dowHeight = value;
    }
    get rowHeight() {
      return this[rowHeight$0];
    }
    set rowHeight(value) {
      super.rowHeight = value;
    }
    get sixWeekMonthsEnforced() {
      return this[sixWeekMonthsEnforced$0];
    }
    set sixWeekMonthsEnforced(value) {
      super.sixWeekMonthsEnforced = value;
    }
    get dowVisible() {
      return this[dowVisible$];
    }
    set dowVisible(value) {
      super.dowVisible = value;
    }
    get weekNumbersVisible() {
      return this[weekNumbersVisible$0];
    }
    set weekNumbersVisible(value) {
      super.weekNumbersVisible = value;
    }
    get dowDecoration() {
      return this[dowDecoration$];
    }
    set dowDecoration(value) {
      super.dowDecoration = value;
    }
    get rowDecoration() {
      return this[rowDecoration$0];
    }
    set rowDecoration(value) {
      super.rowDecoration = value;
    }
    get tableBorder() {
      return this[tableBorder$0];
    }
    set tableBorder(value) {
      super.tableBorder = value;
    }
    get tablePadding() {
      return this[tablePadding$0];
    }
    set tablePadding(value) {
      super.tablePadding = value;
    }
    get formatAnimationDuration() {
      return this[formatAnimationDuration$0];
    }
    set formatAnimationDuration(value) {
      super.formatAnimationDuration = value;
    }
    get formatAnimationCurve() {
      return this[formatAnimationCurve$0];
    }
    set formatAnimationCurve(value) {
      super.formatAnimationCurve = value;
    }
    get pageAnimationEnabled() {
      return this[pageAnimationEnabled$0];
    }
    set pageAnimationEnabled(value) {
      super.pageAnimationEnabled = value;
    }
    get pageAnimationDuration() {
      return this[pageAnimationDuration$0];
    }
    set pageAnimationDuration(value) {
      super.pageAnimationDuration = value;
    }
    get pageAnimationCurve() {
      return this[pageAnimationCurve$0];
    }
    set pageAnimationCurve(value) {
      super.pageAnimationCurve = value;
    }
    get startingDayOfWeek() {
      return this[startingDayOfWeek$0];
    }
    set startingDayOfWeek(value) {
      super.startingDayOfWeek = value;
    }
    get availableGestures() {
      return this[availableGestures$0];
    }
    set availableGestures(value) {
      super.availableGestures = value;
    }
    get simpleSwipeConfig() {
      return this[simpleSwipeConfig$0];
    }
    set simpleSwipeConfig(value) {
      super.simpleSwipeConfig = value;
    }
    get availableCalendarFormats() {
      return this[availableCalendarFormats$0];
    }
    set availableCalendarFormats(value) {
      super.availableCalendarFormats = value;
    }
    get onVerticalSwipe() {
      return this[onVerticalSwipe$];
    }
    set onVerticalSwipe(value) {
      super.onVerticalSwipe = value;
    }
    get onPageChanged() {
      return this[onPageChanged$0];
    }
    set onPageChanged(value) {
      super.onPageChanged = value;
    }
    get onCalendarCreated() {
      return this[onCalendarCreated$0];
    }
    set onCalendarCreated(value) {
      super.onCalendarCreated = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let firstDay = opts && 'firstDay' in opts ? opts.firstDay : null;
      let lastDay = opts && 'lastDay' in opts ? opts.lastDay : null;
      let focusedDay = opts && 'focusedDay' in opts ? opts.focusedDay : null;
      let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : C[95] || CT.C95;
      let dowBuilder = opts && 'dowBuilder' in opts ? opts.dowBuilder : null;
      let dayBuilder = opts && 'dayBuilder' in opts ? opts.dayBuilder : null;
      let dowHeight = opts && 'dowHeight' in opts ? opts.dowHeight : null;
      let rowHeight = opts && 'rowHeight' in opts ? opts.rowHeight : null;
      let sixWeekMonthsEnforced = opts && 'sixWeekMonthsEnforced' in opts ? opts.sixWeekMonthsEnforced : false;
      let dowVisible = opts && 'dowVisible' in opts ? opts.dowVisible : true;
      let weekNumberBuilder = opts && 'weekNumberBuilder' in opts ? opts.weekNumberBuilder : null;
      let weekNumbersVisible = opts && 'weekNumbersVisible' in opts ? opts.weekNumbersVisible : false;
      let dowDecoration = opts && 'dowDecoration' in opts ? opts.dowDecoration : null;
      let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
      let tableBorder = opts && 'tableBorder' in opts ? opts.tableBorder : null;
      let tablePadding = opts && 'tablePadding' in opts ? opts.tablePadding : null;
      let formatAnimationDuration = opts && 'formatAnimationDuration' in opts ? opts.formatAnimationDuration : C[113] || CT.C113;
      let formatAnimationCurve = opts && 'formatAnimationCurve' in opts ? opts.formatAnimationCurve : C[114] || CT.C114;
      let pageAnimationEnabled = opts && 'pageAnimationEnabled' in opts ? opts.pageAnimationEnabled : true;
      let pageAnimationDuration = opts && 'pageAnimationDuration' in opts ? opts.pageAnimationDuration : C[2] || CT.C2;
      let pageAnimationCurve = opts && 'pageAnimationCurve' in opts ? opts.pageAnimationCurve : C[115] || CT.C115;
      let startingDayOfWeek = opts && 'startingDayOfWeek' in opts ? opts.startingDayOfWeek : C[105] || CT.C105;
      let availableGestures = opts && 'availableGestures' in opts ? opts.availableGestures : C[93] || CT.C93;
      let simpleSwipeConfig = opts && 'simpleSwipeConfig' in opts ? opts.simpleSwipeConfig : C[117] || CT.C117;
      let availableCalendarFormats = opts && 'availableCalendarFormats' in opts ? opts.availableCalendarFormats : C[112] || CT.C112;
      let onVerticalSwipe = opts && 'onVerticalSwipe' in opts ? opts.onVerticalSwipe : null;
      let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
      let onCalendarCreated = opts && 'onCalendarCreated' in opts ? opts.onCalendarCreated : null;
      return new table_calendar_base.TableCalendarBase.new({key: key, firstDay: firstDay, lastDay: lastDay, focusedDay: focusedDay, calendarFormat: calendarFormat, dowBuilder: dowBuilder, dayBuilder: dayBuilder, dowHeight: dowHeight, rowHeight: rowHeight, sixWeekMonthsEnforced: sixWeekMonthsEnforced, dowVisible: dowVisible, weekNumberBuilder: weekNumberBuilder, weekNumbersVisible: weekNumbersVisible, dowDecoration: dowDecoration, rowDecoration: rowDecoration, tableBorder: tableBorder, tablePadding: tablePadding, formatAnimationDuration: formatAnimationDuration, formatAnimationCurve: formatAnimationCurve, pageAnimationEnabled: pageAnimationEnabled, pageAnimationDuration: pageAnimationDuration, pageAnimationCurve: pageAnimationCurve, startingDayOfWeek: startingDayOfWeek, availableGestures: availableGestures, simpleSwipeConfig: simpleSwipeConfig, availableCalendarFormats: availableCalendarFormats, onVerticalSwipe: onVerticalSwipe, onPageChanged: onPageChanged, onCalendarCreated: onCalendarCreated});
    }
    createState() {
      return new table_calendar_base._TableCalendarBaseState.new();
    }
  };
  (table_calendar_base.TableCalendarBase.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let firstDay = opts && 'firstDay' in opts ? opts.firstDay : null;
    let lastDay = opts && 'lastDay' in opts ? opts.lastDay : null;
    let focusedDay = opts && 'focusedDay' in opts ? opts.focusedDay : null;
    let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : C[95] || CT.C95;
    let dowBuilder = opts && 'dowBuilder' in opts ? opts.dowBuilder : null;
    let dayBuilder = opts && 'dayBuilder' in opts ? opts.dayBuilder : null;
    let dowHeight = opts && 'dowHeight' in opts ? opts.dowHeight : null;
    let rowHeight = opts && 'rowHeight' in opts ? opts.rowHeight : null;
    let sixWeekMonthsEnforced = opts && 'sixWeekMonthsEnforced' in opts ? opts.sixWeekMonthsEnforced : false;
    let dowVisible = opts && 'dowVisible' in opts ? opts.dowVisible : true;
    let weekNumberBuilder = opts && 'weekNumberBuilder' in opts ? opts.weekNumberBuilder : null;
    let weekNumbersVisible = opts && 'weekNumbersVisible' in opts ? opts.weekNumbersVisible : false;
    let dowDecoration = opts && 'dowDecoration' in opts ? opts.dowDecoration : null;
    let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
    let tableBorder = opts && 'tableBorder' in opts ? opts.tableBorder : null;
    let tablePadding = opts && 'tablePadding' in opts ? opts.tablePadding : null;
    let formatAnimationDuration = opts && 'formatAnimationDuration' in opts ? opts.formatAnimationDuration : C[113] || CT.C113;
    let formatAnimationCurve = opts && 'formatAnimationCurve' in opts ? opts.formatAnimationCurve : C[114] || CT.C114;
    let pageAnimationEnabled = opts && 'pageAnimationEnabled' in opts ? opts.pageAnimationEnabled : true;
    let pageAnimationDuration = opts && 'pageAnimationDuration' in opts ? opts.pageAnimationDuration : C[2] || CT.C2;
    let pageAnimationCurve = opts && 'pageAnimationCurve' in opts ? opts.pageAnimationCurve : C[115] || CT.C115;
    let startingDayOfWeek = opts && 'startingDayOfWeek' in opts ? opts.startingDayOfWeek : C[105] || CT.C105;
    let availableGestures = opts && 'availableGestures' in opts ? opts.availableGestures : C[93] || CT.C93;
    let simpleSwipeConfig = opts && 'simpleSwipeConfig' in opts ? opts.simpleSwipeConfig : C[117] || CT.C117;
    let availableCalendarFormats = opts && 'availableCalendarFormats' in opts ? opts.availableCalendarFormats : C[112] || CT.C112;
    let onVerticalSwipe = opts && 'onVerticalSwipe' in opts ? opts.onVerticalSwipe : null;
    let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
    let onCalendarCreated = opts && 'onCalendarCreated' in opts ? opts.onCalendarCreated : null;
    this[firstDay$0] = firstDay;
    this[lastDay$0] = lastDay;
    this[focusedDay$0] = focusedDay;
    this[calendarFormat$0] = calendarFormat;
    this[dowBuilder$0] = dowBuilder;
    this[dayBuilder$] = dayBuilder;
    this[dowHeight$] = dowHeight;
    this[rowHeight$0] = rowHeight;
    this[sixWeekMonthsEnforced$0] = sixWeekMonthsEnforced;
    this[dowVisible$] = dowVisible;
    this[weekNumberBuilder$0] = weekNumberBuilder;
    this[weekNumbersVisible$0] = weekNumbersVisible;
    this[dowDecoration$] = dowDecoration;
    this[rowDecoration$0] = rowDecoration;
    this[tableBorder$0] = tableBorder;
    this[tablePadding$0] = tablePadding;
    this[formatAnimationDuration$0] = formatAnimationDuration;
    this[formatAnimationCurve$0] = formatAnimationCurve;
    this[pageAnimationEnabled$0] = pageAnimationEnabled;
    this[pageAnimationDuration$0] = pageAnimationDuration;
    this[pageAnimationCurve$0] = pageAnimationCurve;
    this[startingDayOfWeek$0] = startingDayOfWeek;
    this[availableGestures$0] = availableGestures;
    this[simpleSwipeConfig$0] = simpleSwipeConfig;
    this[availableCalendarFormats$0] = availableCalendarFormats;
    this[onVerticalSwipe$] = onVerticalSwipe;
    this[onPageChanged$0] = onPageChanged;
    this[onCalendarCreated$0] = onCalendarCreated;
    if (!(!dowVisible || dowHeight != null && dowBuilder != null)) dart.assertFailed(null, I[25], 77, 16, "!dowVisible || (dowHeight != null && dowBuilder != null)");
    if (!(utils$.isSameDay(focusedDay, firstDay) || focusedDay.isAfter(firstDay))) dart.assertFailed(null, I[25], 78, 16, "isSameDay(focusedDay, firstDay) || focusedDay.isAfter(firstDay)");
    if (!(utils$.isSameDay(focusedDay, lastDay) || focusedDay.isBefore(lastDay))) dart.assertFailed(null, I[25], 79, 16, "isSameDay(focusedDay, lastDay) || focusedDay.isBefore(lastDay)");
    table_calendar_base.TableCalendarBase.__proto__.new.call(this, {key: key});
    ;
  }).prototype = table_calendar_base.TableCalendarBase.prototype;
  dart.addTypeTests(table_calendar_base.TableCalendarBase);
  dart.addTypeCaches(table_calendar_base.TableCalendarBase);
  dart.setMethodSignature(table_calendar_base.TableCalendarBase, () => ({
    __proto__: dart.getMethods(table_calendar_base.TableCalendarBase.__proto__),
    createState: dart.fnType(table_calendar_base._TableCalendarBaseState, [])
  }));
  dart.setLibraryUri(table_calendar_base.TableCalendarBase, I[26]);
  dart.setFieldSignature(table_calendar_base.TableCalendarBase, () => ({
    __proto__: dart.getFields(table_calendar_base.TableCalendarBase.__proto__),
    firstDay: dart.finalFieldType(core.DateTime),
    lastDay: dart.finalFieldType(core.DateTime),
    focusedDay: dart.finalFieldType(core.DateTime),
    calendarFormat: dart.finalFieldType(utils$.CalendarFormat),
    dowBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime]))),
    weekNumberBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime]))),
    dayBuilder: dart.finalFieldType(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime])),
    dowHeight: dart.finalFieldType(dart.nullable(core.double)),
    rowHeight: dart.finalFieldType(core.double),
    sixWeekMonthsEnforced: dart.finalFieldType(core.bool),
    dowVisible: dart.finalFieldType(core.bool),
    weekNumbersVisible: dart.finalFieldType(core.bool),
    dowDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    rowDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    tableBorder: dart.finalFieldType(dart.nullable(table_border.TableBorder)),
    tablePadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsets)),
    formatAnimationDuration: dart.finalFieldType(core.Duration),
    formatAnimationCurve: dart.finalFieldType(curves.Curve),
    pageAnimationEnabled: dart.finalFieldType(core.bool),
    pageAnimationDuration: dart.finalFieldType(core.Duration),
    pageAnimationCurve: dart.finalFieldType(curves.Curve),
    startingDayOfWeek: dart.finalFieldType(utils$.StartingDayOfWeek),
    availableGestures: dart.finalFieldType(utils$.AvailableGestures),
    simpleSwipeConfig: dart.finalFieldType(simple_gesture_detector.SimpleSwipeConfig),
    availableCalendarFormats: dart.finalFieldType(core.Map$(utils$.CalendarFormat, core.String)),
    onVerticalSwipe: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [simple_gesture_detector.SwipeDirection]))),
    onPageChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.DateTime]))),
    onCalendarCreated: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [page_view.PageController])))
  }));
  var ___TableCalendarBaseState__pageHeight = dart.privateName(table_calendar_base, "_#_TableCalendarBaseState#_pageHeight");
  var ___TableCalendarBaseState__pageController = dart.privateName(table_calendar_base, "_#_TableCalendarBaseState#_pageController");
  var ___TableCalendarBaseState__focusedDay = dart.privateName(table_calendar_base, "_#_TableCalendarBaseState#_focusedDay");
  var ___TableCalendarBaseState__previousIndex = dart.privateName(table_calendar_base, "_#_TableCalendarBaseState#_previousIndex");
  var ___TableCalendarBaseState__pageCallbackDisabled = dart.privateName(table_calendar_base, "_#_TableCalendarBaseState#_pageCallbackDisabled");
  var _pageHeight = dart.privateName(table_calendar_base, "_pageHeight");
  var _pageController$ = dart.privateName(table_calendar_base, "_pageController");
  var _focusedDay$0 = dart.privateName(table_calendar_base, "_focusedDay");
  var _previousIndex = dart.privateName(table_calendar_base, "_previousIndex");
  var _pageCallbackDisabled = dart.privateName(table_calendar_base, "_pageCallbackDisabled");
  var _getRowCount = dart.privateName(table_calendar_base, "_getRowCount");
  var _getPageHeight = dart.privateName(table_calendar_base, "_getPageHeight");
  var _calculateFocusedPage = dart.privateName(table_calendar_base, "_calculateFocusedPage");
  var _updatePage = dart.privateName(table_calendar_base, "_updatePage");
  var _canScrollHorizontally = dart.privateName(table_calendar_base, "_canScrollHorizontally");
  var _canScrollVertically = dart.privateName(table_calendar_base, "_canScrollVertically");
  var _getMonthCount = dart.privateName(table_calendar_base, "_getMonthCount");
  var _getTwoWeekCount = dart.privateName(table_calendar_base, "_getTwoWeekCount");
  var _getWeekCount = dart.privateName(table_calendar_base, "_getWeekCount");
  var _firstDayOfWeek = dart.privateName(table_calendar_base, "_firstDayOfWeek");
  var _firstDayOfMonth$ = dart.privateName(table_calendar_base, "_firstDayOfMonth");
  var _getDaysBefore = dart.privateName(table_calendar_base, "_getDaysBefore");
  var _lastDayOfMonth$ = dart.privateName(table_calendar_base, "_lastDayOfMonth");
  var _getDaysAfter = dart.privateName(table_calendar_base, "_getDaysAfter");
  table_calendar_base._TableCalendarBaseState = class _TableCalendarBaseState extends framework.State$(table_calendar_base.TableCalendarBase) {
    get [_pageHeight]() {
      let t12;
      t12 = this[___TableCalendarBaseState__pageHeight];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_pageHeight")) : t12;
    }
    set [_pageHeight](_pageHeight$35param) {
      if (this[___TableCalendarBaseState__pageHeight] == null)
        this[___TableCalendarBaseState__pageHeight] = _pageHeight$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_pageHeight"));
    }
    get [_pageController$]() {
      let t12;
      t12 = this[___TableCalendarBaseState__pageController];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_pageController")) : t12;
    }
    set [_pageController$](_pageController$35param) {
      if (this[___TableCalendarBaseState__pageController] == null)
        this[___TableCalendarBaseState__pageController] = _pageController$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_pageController"));
    }
    get [_focusedDay$0]() {
      let t12;
      t12 = this[___TableCalendarBaseState__focusedDay];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_focusedDay")) : t12;
    }
    set [_focusedDay$0](_focusedDay$35param) {
      this[___TableCalendarBaseState__focusedDay] = _focusedDay$35param;
    }
    get [_previousIndex]() {
      let t12;
      t12 = this[___TableCalendarBaseState__previousIndex];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_previousIndex")) : t12;
    }
    set [_previousIndex](_previousIndex$35param) {
      this[___TableCalendarBaseState__previousIndex] = _previousIndex$35param;
    }
    get [_pageCallbackDisabled]() {
      let t12;
      t12 = this[___TableCalendarBaseState__pageCallbackDisabled];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("_pageCallbackDisabled")) : t12;
    }
    set [_pageCallbackDisabled](_pageCallbackDisabled$35param) {
      this[___TableCalendarBaseState__pageCallbackDisabled] = _pageCallbackDisabled$35param;
    }
    initState() {
      let t12;
      super.initState();
      this[_focusedDay$0] = this.widget.focusedDay;
      let rowCount = this[_getRowCount](this.widget.calendarFormat, this[_focusedDay$0]);
      this[_pageHeight] = new (T$.ValueNotifierOfdouble()).new(this[_getPageHeight](rowCount));
      let initialPage = this[_calculateFocusedPage](this.widget.calendarFormat, this.widget.firstDay, this[_focusedDay$0]);
      this[_pageController$] = new page_view.PageController.new({initialPage: initialPage});
      t12 = this.widget.onCalendarCreated;
      t12 == null ? null : t12(this[_pageController$]);
      this[_previousIndex] = initialPage;
      this[_pageCallbackDisabled] = false;
    }
    didUpdateWidget(oldWidget) {
      table_calendar_base.TableCalendarBase.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!this[_focusedDay$0]._equals(this.widget.focusedDay) || this.widget.calendarFormat !== oldWidget.calendarFormat || this.widget.startingDayOfWeek !== oldWidget.startingDayOfWeek) {
        let shouldAnimate = !this[_focusedDay$0]._equals(this.widget.focusedDay);
        this[_focusedDay$0] = this.widget.focusedDay;
        this[_updatePage]({shouldAnimate: shouldAnimate});
      }
      if (this.widget.rowHeight !== oldWidget.rowHeight || this.widget.dowHeight != oldWidget.dowHeight || this.widget.dowVisible !== oldWidget.dowVisible || this.widget.sixWeekMonthsEnforced !== oldWidget.sixWeekMonthsEnforced) {
        let rowCount = this[_getRowCount](this.widget.calendarFormat, this[_focusedDay$0]);
        this[_pageHeight].value = this[_getPageHeight](rowCount);
      }
    }
    dispose() {
      this[_pageController$].dispose();
      this[_pageHeight].dispose();
      super.dispose();
    }
    get [_canScrollHorizontally]() {
      return this.widget.availableGestures === utils$.AvailableGestures.all || this.widget.availableGestures === utils$.AvailableGestures.horizontalSwipe;
    }
    get [_canScrollVertically]() {
      return this.widget.availableGestures === utils$.AvailableGestures.all || this.widget.availableGestures === utils$.AvailableGestures.verticalSwipe;
    }
    [_updatePage](opts) {
      let shouldAnimate = opts && 'shouldAnimate' in opts ? opts.shouldAnimate : false;
      let currentIndex = this[_calculateFocusedPage](this.widget.calendarFormat, this.widget.firstDay, this[_focusedDay$0]);
      let endIndex = this[_calculateFocusedPage](this.widget.calendarFormat, this.widget.firstDay, this.widget.lastDay);
      if (currentIndex !== this[_previousIndex] || currentIndex === 0 || currentIndex === endIndex) {
        this[_pageCallbackDisabled] = true;
      }
      if (shouldAnimate && this.widget.pageAnimationEnabled) {
        if ((currentIndex - this[_previousIndex])[$abs]() > 1) {
          let jumpIndex = currentIndex > this[_previousIndex] ? currentIndex - 1 : currentIndex + 1;
          this[_pageController$].jumpToPage(jumpIndex);
        }
        this[_pageController$].animateToPage(currentIndex, {duration: this.widget.pageAnimationDuration, curve: this.widget.pageAnimationCurve});
      } else {
        this[_pageController$].jumpToPage(currentIndex);
      }
      this[_previousIndex] = currentIndex;
      let rowCount = this[_getRowCount](this.widget.calendarFormat, this[_focusedDay$0]);
      this[_pageHeight].value = this[_getPageHeight](rowCount);
      this[_pageCallbackDisabled] = false;
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => new simple_gesture_detector.SimpleGestureDetector.new({onVerticalSwipe: this[_canScrollVertically] ? this.widget.onVerticalSwipe : null, swipeConfig: this.widget.simpleSwipeConfig, child: new (T$.ValueListenableBuilderOfdouble()).new({valueListenable: this[_pageHeight], builder: dart.fn((context, value, child) => {
              let height = constraints.hasBoundedHeight ? constraints.maxHeight : value;
              return new animated_size.AnimatedSize.new({duration: this.widget.formatAnimationDuration, curve: this.widget.formatAnimationCurve, alignment: alignment.Alignment.topCenter, child: new basic.SizedBox.new({height: height, child: child})});
            }, T$.BuildContextAnddoubleAndWidgetNToAnimatedSize()), child: new calendar_core.CalendarCore.new({constraints: constraints, pageController: this[_pageController$], scrollPhysics: this[_canScrollHorizontally] ? new page_view.PageScrollPhysics.new() : new scroll_physics.NeverScrollableScrollPhysics.new(), firstDay: this.widget.firstDay, lastDay: this.widget.lastDay, startingDayOfWeek: this.widget.startingDayOfWeek, calendarFormat: this.widget.calendarFormat, previousIndex: this[_previousIndex], focusedDay: this[_focusedDay$0], sixWeekMonthsEnforced: this.widget.sixWeekMonthsEnforced, dowVisible: this.widget.dowVisible, dowHeight: this.widget.dowHeight, rowHeight: this.widget.rowHeight, weekNumbersVisible: this.widget.weekNumbersVisible, weekNumberBuilder: this.widget.weekNumberBuilder, dowDecoration: this.widget.dowDecoration, rowDecoration: this.widget.rowDecoration, tableBorder: this.widget.tableBorder, tablePadding: this.widget.tablePadding, onPageChanged: dart.fn((index, focusedMonth) => {
                let t12;
                if (!this[_pageCallbackDisabled]) {
                  if (!utils$.isSameDay(this[_focusedDay$0], focusedMonth)) {
                    this[_focusedDay$0] = focusedMonth;
                  }
                  if (this.widget.calendarFormat === utils$.CalendarFormat.month && !this.widget.sixWeekMonthsEnforced && !constraints.hasBoundedHeight) {
                    let rowCount = this[_getRowCount](this.widget.calendarFormat, focusedMonth);
                    this[_pageHeight].value = this[_getPageHeight](rowCount);
                  }
                  this[_previousIndex] = index;
                  t12 = this.widget.onPageChanged;
                  t12 == null ? null : t12(focusedMonth);
                }
                this[_pageCallbackDisabled] = false;
              }, T$.intAndDateTimeTovoid()), dowBuilder: this.widget.dowBuilder, dayBuilder: this.widget.dayBuilder})})}), T$.BuildContextAndBoxConstraintsToSimpleGestureDetector())});
    }
    [_getPageHeight](rowCount) {
      let t12, t12$;
      let tablePaddingHeight = (t12$ = (t12 = this.widget.tablePadding, t12 == null ? null : t12.vertical), t12$ == null ? 0 : t12$);
      let dowHeight = this.widget.dowVisible ? dart.nullCheck(this.widget.dowHeight) : 0;
      return dowHeight + rowCount * this.widget.rowHeight + tablePaddingHeight;
    }
    [_calculateFocusedPage](format, startDay, focusedDay) {
      switch (format) {
        case C[95] || CT.C95:
          {
            return this[_getMonthCount](startDay, focusedDay);
          }
        case C[96] || CT.C96:
          {
            return this[_getTwoWeekCount](startDay, focusedDay);
          }
        case C[97] || CT.C97:
          {
            return this[_getWeekCount](startDay, focusedDay);
          }
        default:
          {
            return this[_getMonthCount](startDay, focusedDay);
          }
      }
    }
    [_getMonthCount](first, last) {
      let yearDif = last.year - first.year;
      let monthDif = last.month - first.month;
      return yearDif * 12 + monthDif;
    }
    [_getWeekCount](first, last) {
      return (last.difference(this[_firstDayOfWeek](first)).inDays / 7)[$truncate]();
    }
    [_getTwoWeekCount](first, last) {
      return (last.difference(this[_firstDayOfWeek](first)).inDays / 14)[$truncate]();
    }
    [_getRowCount](format, focusedDay) {
      if (format === utils$.CalendarFormat.twoWeeks) {
        return 2;
      } else if (format === utils$.CalendarFormat.week) {
        return 1;
      } else if (this.widget.sixWeekMonthsEnforced) {
        return 6;
      }
      let first = this[_firstDayOfMonth$](focusedDay);
      let daysBefore = this[_getDaysBefore](first);
      let firstToDisplay = first.subtract(new core.Duration.new({days: daysBefore}));
      let last = this[_lastDayOfMonth$](focusedDay);
      let daysAfter = this[_getDaysAfter](last);
      let lastToDisplay = last.add(new core.Duration.new({days: daysAfter}));
      return ((lastToDisplay.difference(firstToDisplay).inDays + 1) / 7)[$truncate]();
    }
    [_getDaysBefore](firstDay) {
      return (firstDay.weekday + 7 - utils$.getWeekdayNumber(this.widget.startingDayOfWeek))[$modulo](7);
    }
    [_getDaysAfter](lastDay) {
      let invertedStartingWeekday = 8 - utils$.getWeekdayNumber(this.widget.startingDayOfWeek);
      let daysAfter = 7 - (lastDay.weekday + invertedStartingWeekday)[$modulo](7);
      if (daysAfter === 7) {
        daysAfter = 0;
      }
      return daysAfter;
    }
    [_firstDayOfWeek](week) {
      let daysBefore = this[_getDaysBefore](week);
      return week.subtract(new core.Duration.new({days: daysBefore}));
    }
    [_firstDayOfMonth$](month) {
      return new core.DateTime.utc(month.year, month.month, 1);
    }
    [_lastDayOfMonth$](month) {
      let date = month.month < 12 ? new core.DateTime.utc(month.year, month.month + 1, 1) : new core.DateTime.utc(month.year + 1, 1, 1);
      return date.subtract(C[125] || CT.C125);
    }
    static ['_#new#tearOff']() {
      return new table_calendar_base._TableCalendarBaseState.new();
    }
  };
  (table_calendar_base._TableCalendarBaseState.new = function() {
    this[___TableCalendarBaseState__pageHeight] = null;
    this[___TableCalendarBaseState__pageController] = null;
    this[___TableCalendarBaseState__focusedDay] = null;
    this[___TableCalendarBaseState__previousIndex] = null;
    this[___TableCalendarBaseState__pageCallbackDisabled] = null;
    table_calendar_base._TableCalendarBaseState.__proto__.new.call(this);
    ;
  }).prototype = table_calendar_base._TableCalendarBaseState.prototype;
  dart.addTypeTests(table_calendar_base._TableCalendarBaseState);
  dart.addTypeCaches(table_calendar_base._TableCalendarBaseState);
  dart.setMethodSignature(table_calendar_base._TableCalendarBaseState, () => ({
    __proto__: dart.getMethods(table_calendar_base._TableCalendarBaseState.__proto__),
    [_updatePage]: dart.fnType(dart.void, [], {shouldAnimate: core.bool}, {}),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getPageHeight]: dart.fnType(core.double, [core.int]),
    [_calculateFocusedPage]: dart.fnType(core.int, [utils$.CalendarFormat, core.DateTime, core.DateTime]),
    [_getMonthCount]: dart.fnType(core.int, [core.DateTime, core.DateTime]),
    [_getWeekCount]: dart.fnType(core.int, [core.DateTime, core.DateTime]),
    [_getTwoWeekCount]: dart.fnType(core.int, [core.DateTime, core.DateTime]),
    [_getRowCount]: dart.fnType(core.int, [utils$.CalendarFormat, core.DateTime]),
    [_getDaysBefore]: dart.fnType(core.int, [core.DateTime]),
    [_getDaysAfter]: dart.fnType(core.int, [core.DateTime]),
    [_firstDayOfWeek]: dart.fnType(core.DateTime, [core.DateTime]),
    [_firstDayOfMonth$]: dart.fnType(core.DateTime, [core.DateTime]),
    [_lastDayOfMonth$]: dart.fnType(core.DateTime, [core.DateTime])
  }));
  dart.setGetterSignature(table_calendar_base._TableCalendarBaseState, () => ({
    __proto__: dart.getGetters(table_calendar_base._TableCalendarBaseState.__proto__),
    [_pageHeight]: change_notifier.ValueNotifier$(core.double),
    [_pageController$]: page_view.PageController,
    [_focusedDay$0]: core.DateTime,
    [_previousIndex]: core.int,
    [_pageCallbackDisabled]: core.bool,
    [_canScrollHorizontally]: core.bool,
    [_canScrollVertically]: core.bool
  }));
  dart.setSetterSignature(table_calendar_base._TableCalendarBaseState, () => ({
    __proto__: dart.getSetters(table_calendar_base._TableCalendarBaseState.__proto__),
    [_pageHeight]: change_notifier.ValueNotifier$(core.double),
    [_pageController$]: page_view.PageController,
    [_focusedDay$0]: core.DateTime,
    [_previousIndex]: core.int,
    [_pageCallbackDisabled]: core.bool
  }));
  dart.setLibraryUri(table_calendar_base._TableCalendarBaseState, I[26]);
  dart.setFieldSignature(table_calendar_base._TableCalendarBaseState, () => ({
    __proto__: dart.getFields(table_calendar_base._TableCalendarBaseState.__proto__),
    [___TableCalendarBaseState__pageHeight]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(core.double))),
    [___TableCalendarBaseState__pageController]: dart.fieldType(dart.nullable(page_view.PageController)),
    [___TableCalendarBaseState__focusedDay]: dart.fieldType(dart.nullable(core.DateTime)),
    [___TableCalendarBaseState__previousIndex]: dart.fieldType(dart.nullable(core.int)),
    [___TableCalendarBaseState__pageCallbackDisabled]: dart.fieldType(dart.nullable(core.bool))
  }));
  var scheme$ = dart.privateName(authentication_challenge, "AuthenticationChallenge.scheme");
  var parameters$ = dart.privateName(authentication_challenge, "AuthenticationChallenge.parameters");
  authentication_challenge.AuthenticationChallenge = class AuthenticationChallenge extends core.Object {
    get scheme() {
      return this[scheme$];
    }
    set scheme(value) {
      super.scheme = value;
    }
    get parameters() {
      return this[parameters$];
    }
    set parameters(value) {
      super.parameters = value;
    }
    static parseHeader(header) {
      return utils$0.wrapFormatException(T$.ListOfAuthenticationChallenge(), "authentication header", header, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(header);
        scanner.scan(scan.whitespace);
        let challenges = scan.parseList(authentication_challenge.AuthenticationChallenge, scanner, dart.fn(() => {
          let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner, {whitespaceName: "\" \" or \"=\""});
          let params = new (T$.IdentityMapOfString$String()).new();
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
          }
          authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params);
          let beforeComma = scanner.position;
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
            if (scanner.matches(",") || scanner.isDone) continue;
            scanner.expect(scan.token, {name: "a token"});
            let name = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
            scanner.scan(scan.whitespace);
            if (!scanner.scan("=")) {
              scanner.position = beforeComma;
              break;
            }
            scanner.scan(scan.whitespace);
            if (scanner.scan(scan.token)) {
              params[$_set](name, dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
            } else {
              params[$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
            }
            scanner.scan(scan.whitespace);
            beforeComma = scanner.position;
          }
          return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
        }, T$.VoidToAuthenticationChallenge()));
        scanner.expectDone();
        return challenges;
      }, T$.VoidToListOfAuthenticationChallenge()));
    }
    static parse(challenge) {
      return utils$0.wrapFormatException(authentication_challenge.AuthenticationChallenge, "authentication challenge", challenge, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(challenge);
        scanner.scan(scan.whitespace);
        let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner);
        let params = new (T$.IdentityMapOfString$String()).new();
        scan.parseList(dart.void, scanner, dart.fn(() => authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params), T$.VoidTovoid()));
        scanner.expectDone();
        return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
      }, T$.VoidToAuthenticationChallenge()));
    }
    static ['_#parse#tearOff'](challenge) {
      return authentication_challenge.AuthenticationChallenge.parse(challenge);
    }
    static _scanScheme(scanner, opts) {
      let whitespaceName = opts && 'whitespaceName' in opts ? opts.whitespaceName : null;
      scanner.expect(scan.token, {name: "a token"});
      let scheme = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$toLowerCase]();
      scanner.scan(scan.whitespace);
      if (scanner.lastMatch == null || !dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$contains](" ")) {
        scanner.expect(" ", {name: whitespaceName});
      }
      return scheme;
    }
    static _scanAuthParam(scanner, params) {
      scanner.expect(scan.token, {name: "a token"});
      let name = dart.nullCheck(scanner.lastMatch)._get(0);
      scanner.scan(scan.whitespace);
      scanner.expect("=");
      scanner.scan(scan.whitespace);
      if (scanner.scan(scan.token)) {
        params[$_set](name, dart.nullCheck(scanner.lastMatch)._get(0));
      } else {
        params[$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
      }
      scanner.scan(scan.whitespace);
    }
    static ['_#new#tearOff'](scheme, parameters) {
      return new authentication_challenge.AuthenticationChallenge.new(scheme, parameters);
    }
  };
  (authentication_challenge.AuthenticationChallenge.new = function(scheme, parameters) {
    this[scheme$] = scheme;
    this[parameters$] = new (T$.UnmodifiableMapViewOfString$String()).new(new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = authentication_challenge.AuthenticationChallenge.prototype;
  dart.addTypeTests(authentication_challenge.AuthenticationChallenge);
  dart.addTypeCaches(authentication_challenge.AuthenticationChallenge);
  dart.setStaticMethodSignature(authentication_challenge.AuthenticationChallenge, () => ['parseHeader', 'parse', '_scanScheme', '_scanAuthParam']);
  dart.setLibraryUri(authentication_challenge.AuthenticationChallenge, I[27]);
  dart.setFieldSignature(authentication_challenge.AuthenticationChallenge, () => ({
    __proto__: dart.getFields(authentication_challenge.AuthenticationChallenge.__proto__),
    scheme: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  const _is_CaseInsensitiveMap_default = Symbol('_is_CaseInsensitiveMap_default');
  case_insensitive_map.CaseInsensitiveMap$ = dart.generic(V => {
    class CaseInsensitiveMap extends canonicalized_map.CanonicalizedMap$(core.String, core.String, V) {
      static ['_#new#tearOff'](V) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).new();
      }
      static ['_#from#tearOff'](V, other) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).from(other);
      }
    }
    (CaseInsensitiveMap.new = function() {
      CaseInsensitiveMap.__proto__.new.call(this, dart.fn(key => key[$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    (CaseInsensitiveMap.from = function(other) {
      CaseInsensitiveMap.__proto__.from.call(this, other, dart.fn(key => key[$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    dart.addTypeTests(CaseInsensitiveMap);
    CaseInsensitiveMap.prototype[_is_CaseInsensitiveMap_default] = true;
    dart.addTypeCaches(CaseInsensitiveMap);
    dart.setLibraryUri(CaseInsensitiveMap, I[28]);
    return CaseInsensitiveMap;
  });
  case_insensitive_map.CaseInsensitiveMap = case_insensitive_map.CaseInsensitiveMap$();
  dart.addTypeTests(case_insensitive_map.CaseInsensitiveMap, _is_CaseInsensitiveMap_default);
  chunked_coding.ChunkedCodingCodec = class ChunkedCodingCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
    get encoder() {
      return encoder.chunkedCodingEncoder;
    }
    get decoder() {
      return decoder.chunkedCodingDecoder;
    }
    static ['_#_#tearOff']() {
      return new chunked_coding.ChunkedCodingCodec.__();
    }
  };
  (chunked_coding.ChunkedCodingCodec.__ = function() {
    chunked_coding.ChunkedCodingCodec.__proto__.new.call(this);
    ;
  }).prototype = chunked_coding.ChunkedCodingCodec.prototype;
  dart.addTypeTests(chunked_coding.ChunkedCodingCodec);
  dart.addTypeCaches(chunked_coding.ChunkedCodingCodec);
  dart.setGetterSignature(chunked_coding.ChunkedCodingCodec, () => ({
    __proto__: dart.getGetters(chunked_coding.ChunkedCodingCodec.__proto__),
    encoder: encoder.ChunkedCodingEncoder,
    decoder: decoder.ChunkedCodingDecoder
  }));
  dart.setLibraryUri(chunked_coding.ChunkedCodingCodec, I[29]);
  dart.defineLazy(chunked_coding, {
    /*chunked_coding.chunkedCoding*/get chunkedCoding() {
      return C[126] || CT.C126;
    }
  }, false);
  http_date.formatHttpDate = function formatHttpDate(date) {
    let t12;
    date = date.toUtc();
    let buffer = (t12 = new core.StringBuffer.new(), (() => {
      t12.write(http_date._weekdays[$_get](date.weekday - 1));
      t12.write(", ");
      t12.write(date.day <= 9 ? "0" : "");
      t12.write(date.day[$toString]());
      t12.write(" ");
      t12.write(http_date._months[$_get](date.month - 1));
      t12.write(" ");
      t12.write(date.year[$toString]());
      t12.write(date.hour <= 9 ? " 0" : " ");
      t12.write(date.hour[$toString]());
      t12.write(date.minute <= 9 ? ":0" : ":");
      t12.write(date.minute[$toString]());
      t12.write(date.second <= 9 ? ":0" : ":");
      t12.write(date.second[$toString]());
      t12.write(" GMT");
      return t12;
    })());
    return buffer.toString();
  };
  http_date.parseHttpDate = function parseHttpDate(date) {
    return utils$0.wrapFormatException(core.DateTime, "HTTP date", date, dart.fn(() => {
      let scanner = new string_scanner.StringScanner.new(date);
      if (scanner.scan(http_date._longWeekdayRegExp)) {
        scanner.expect(", ");
        let day = http_date._parseInt(scanner, 2);
        scanner.expect("-");
        let month = http_date._parseMonth(scanner);
        scanner.expect("-");
        let year = 1900 + http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(http_date._shortWeekdayRegExp);
      if (scanner.scan(", ")) {
        let day = http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let month = http_date._parseMonth(scanner);
        scanner.expect(" ");
        let year = http_date._parseInt(scanner, 4);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(" ");
      let month = http_date._parseMonth(scanner);
      scanner.expect(" ");
      let day = scanner.scan(" ") ? http_date._parseInt(scanner, 1) : http_date._parseInt(scanner, 2);
      scanner.expect(" ");
      let time = http_date._parseTime(scanner);
      scanner.expect(" ");
      let year = http_date._parseInt(scanner, 4);
      scanner.expectDone();
      return http_date._makeDateTime(year, month, day, time);
    }, T$.VoidToDateTime()));
  };
  http_date._parseMonth = function _parseMonth(scanner) {
    scanner.expect(http_date._monthRegExp);
    return http_date._months[$indexOf](dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))) + 1;
  };
  http_date._parseInt = function _parseInt(scanner, digits) {
    scanner.expect(http_date._digitRegExp);
    if (dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)).length !== digits) {
      scanner.error("expected a " + dart.str(digits) + "-digit number.");
    }
    return core.int.parse(dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
  };
  http_date._parseTime = function _parseTime(scanner) {
    let hours = http_date._parseInt(scanner, 2);
    if (hours >= 24) scanner.error("hours may not be greater than 24.");
    scanner.expect(":");
    let minutes = http_date._parseInt(scanner, 2);
    if (minutes >= 60) scanner.error("minutes may not be greater than 60.");
    scanner.expect(":");
    let seconds = http_date._parseInt(scanner, 2);
    if (seconds >= 60) scanner.error("seconds may not be greater than 60.");
    return new core.DateTime.new(1, 1, 1, hours, minutes, seconds);
  };
  http_date._makeDateTime = function _makeDateTime(year, month, day, time) {
    let dateTime = new core.DateTime.utc(year, month, day, time.hour, time.minute, time.second);
    if (dateTime.month !== month) {
      dart.throw(new core.FormatException.new("invalid day '" + dart.str(day) + "' for month '" + dart.str(month) + "'."));
    }
    return dateTime;
  };
  dart.defineLazy(http_date, {
    /*http_date._weekdays*/get _weekdays() {
      return C[127] || CT.C127;
    },
    /*http_date._months*/get _months() {
      return C[128] || CT.C128;
    },
    /*http_date._shortWeekdayRegExp*/get _shortWeekdayRegExp() {
      return core.RegExp.new("Mon|Tue|Wed|Thu|Fri|Sat|Sun");
    },
    /*http_date._longWeekdayRegExp*/get _longWeekdayRegExp() {
      return core.RegExp.new("Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday");
    },
    /*http_date._monthRegExp*/get _monthRegExp() {
      return core.RegExp.new("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec");
    },
    /*http_date._digitRegExp*/get _digitRegExp() {
      return core.RegExp.new("\\d+");
    }
  }, false);
  var type$ = dart.privateName(media_type, "MediaType.type");
  var subtype$ = dart.privateName(media_type, "MediaType.subtype");
  var parameters$0 = dart.privateName(media_type, "MediaType.parameters");
  media_type.MediaType = class MediaType extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get subtype() {
      return this[subtype$];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get parameters() {
      return this[parameters$0];
    }
    set parameters(value) {
      super.parameters = value;
    }
    get mimeType() {
      return this.type + "/" + this.subtype;
    }
    static parse(mediaType) {
      return utils$0.wrapFormatException(media_type.MediaType, "media type", mediaType, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(mediaType);
        scanner.scan(scan.whitespace);
        scanner.expect(scan.token);
        let type = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.expect("/");
        scanner.expect(scan.token);
        let subtype = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.scan(scan.whitespace);
        let parameters = new (T$.IdentityMapOfString$String()).new();
        while (scanner.scan(";")) {
          scanner.scan(scan.whitespace);
          scanner.expect(scan.token);
          let attribute = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          scanner.expect("=");
          let value = null;
          if (scanner.scan(scan.token)) {
            value = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          } else {
            value = scan.expectQuotedString(scanner);
          }
          scanner.scan(scan.whitespace);
          parameters[$_set](attribute, value);
        }
        scanner.expectDone();
        return new media_type.MediaType.new(type, subtype, parameters);
      }, T$.VoidToMediaType()));
    }
    static ['_#parse#tearOff'](mediaType) {
      return media_type.MediaType.parse(mediaType);
    }
    static ['_#new#tearOff'](type, subtype, parameters = null) {
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    change(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let subtype = opts && 'subtype' in opts ? opts.subtype : null;
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let clearParameters = opts && 'clearParameters' in opts ? opts.clearParameters : false;
      if (mimeType != null) {
        if (type != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [type] and [mimeType]."));
        } else if (subtype != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [subtype] and " + "[mimeType]."));
        }
        let segments = mimeType[$split]("/");
        if (segments[$length] !== 2) {
          dart.throw(new core.FormatException.new("Invalid mime type \"" + dart.str(mimeType) + "\"."));
        }
        type = segments[$_get](0);
        subtype = segments[$_get](1);
      }
      type == null ? type = this.type : null;
      subtype == null ? subtype = this.subtype : null;
      parameters == null ? parameters = new (T$.IdentityMapOfString$String()).new() : null;
      if (!clearParameters) {
        let newParameters = parameters;
        parameters = T$.LinkedHashMapOfString$String().from(this.parameters);
        parameters[$addAll](newParameters);
      }
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    toString() {
      let t12;
      let buffer = (t12 = new core.StringBuffer.new(), (() => {
        t12.write(this.type);
        t12.write("/");
        t12.write(this.subtype);
        return t12;
      })());
      this.parameters[$forEach](dart.fn((attribute, value) => {
        let t12;
        buffer.write("; " + attribute + "=");
        if (scan.nonToken.hasMatch(value)) {
          t12 = buffer;
          (() => {
            t12.write("\"");
            t12.write(value[$replaceAllMapped](media_type._escapedChar, dart.fn(match => "\\" + dart.str(match._get(0)), T$.MatchToString())));
            t12.write("\"");
            return t12;
          })();
        } else {
          buffer.write(value);
        }
      }, T$.StringAndStringTovoid()));
      return buffer.toString();
    }
  };
  (media_type.MediaType.new = function(type, subtype, parameters = null) {
    this[type$] = type[$toLowerCase]();
    this[subtype$] = subtype[$toLowerCase]();
    this[parameters$0] = new (T$.UnmodifiableMapViewOfString$String()).new(parameters == null ? new (T$.IdentityMapOfString$String()).new() : new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = media_type.MediaType.prototype;
  dart.addTypeTests(media_type.MediaType);
  dart.addTypeCaches(media_type.MediaType);
  dart.setMethodSignature(media_type.MediaType, () => ({
    __proto__: dart.getMethods(media_type.MediaType.__proto__),
    change: dart.fnType(media_type.MediaType, [], {clearParameters: core.bool, mimeType: dart.nullable(core.String), parameters: dart.nullable(core.Map$(core.String, core.String)), subtype: dart.nullable(core.String), type: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(media_type.MediaType, () => ['parse']);
  dart.setGetterSignature(media_type.MediaType, () => ({
    __proto__: dart.getGetters(media_type.MediaType.__proto__),
    mimeType: core.String
  }));
  dart.setLibraryUri(media_type.MediaType, I[30]);
  dart.setFieldSignature(media_type.MediaType, () => ({
    __proto__: dart.getFields(media_type.MediaType.__proto__),
    type: dart.finalFieldType(core.String),
    subtype: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  dart.defineExtensionMethods(media_type.MediaType, ['toString']);
  dart.defineLazy(media_type, {
    /*media_type._escapedChar*/get _escapedChar() {
      return core.RegExp.new("[\"\\x00-\\x1F\\x7F]");
    }
  }, false);
  simple_gesture_detector.SwipeDirection = class SwipeDirection extends core._Enum {
    [_enumToString]() {
      return "SwipeDirection." + this[_name];
    }
  };
  (simple_gesture_detector.SwipeDirection.new = function(index, name) {
    simple_gesture_detector.SwipeDirection.__proto__.new.call(this, index, name);
    ;
  }).prototype = simple_gesture_detector.SwipeDirection.prototype;
  dart.addTypeTests(simple_gesture_detector.SwipeDirection);
  dart.addTypeCaches(simple_gesture_detector.SwipeDirection);
  dart.setMethodSignature(simple_gesture_detector.SwipeDirection, () => ({
    __proto__: dart.getMethods(simple_gesture_detector.SwipeDirection.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(simple_gesture_detector.SwipeDirection, I[31]);
  dart.setStaticFieldSignature(simple_gesture_detector.SwipeDirection, () => ['values', 'left', 'right', 'up', 'down']);
  dart.defineLazy(simple_gesture_detector.SwipeDirection, {
    /*simple_gesture_detector.SwipeDirection.values*/get values() {
      return C[129] || CT.C129;
    },
    /*simple_gesture_detector.SwipeDirection.left*/get left() {
      return C[130] || CT.C130;
    },
    /*simple_gesture_detector.SwipeDirection.right*/get right() {
      return C[131] || CT.C131;
    },
    /*simple_gesture_detector.SwipeDirection.up*/get up() {
      return C[132] || CT.C132;
    },
    /*simple_gesture_detector.SwipeDirection.down*/get down() {
      return C[133] || CT.C133;
    }
  }, false);
  var child$ = dart.privateName(simple_gesture_detector, "SimpleGestureDetector.child");
  var swipeConfig$ = dart.privateName(simple_gesture_detector, "SimpleGestureDetector.swipeConfig");
  var behavior$ = dart.privateName(simple_gesture_detector, "SimpleGestureDetector.behavior");
  var onVerticalSwipe$0 = dart.privateName(simple_gesture_detector, "SimpleGestureDetector.onVerticalSwipe");
  var onHorizontalSwipe$ = dart.privateName(simple_gesture_detector, "SimpleGestureDetector.onHorizontalSwipe");
  var onTap$ = dart.privateName(simple_gesture_detector, "SimpleGestureDetector.onTap");
  var onDoubleTap$ = dart.privateName(simple_gesture_detector, "SimpleGestureDetector.onDoubleTap");
  var onLongPress$ = dart.privateName(simple_gesture_detector, "SimpleGestureDetector.onLongPress");
  simple_gesture_detector.SimpleGestureDetector = class SimpleGestureDetector extends framework.StatefulWidget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get swipeConfig() {
      return this[swipeConfig$];
    }
    set swipeConfig(value) {
      super.swipeConfig = value;
    }
    get behavior() {
      return this[behavior$];
    }
    set behavior(value) {
      super.behavior = value;
    }
    get onVerticalSwipe() {
      return this[onVerticalSwipe$0];
    }
    set onVerticalSwipe(value) {
      super.onVerticalSwipe = value;
    }
    get onHorizontalSwipe() {
      return this[onHorizontalSwipe$];
    }
    set onHorizontalSwipe(value) {
      super.onHorizontalSwipe = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onDoubleTap() {
      return this[onDoubleTap$];
    }
    set onDoubleTap(value) {
      super.onDoubleTap = value;
    }
    get onLongPress() {
      return this[onLongPress$];
    }
    set onLongPress(value) {
      super.onLongPress = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let swipeConfig = opts && 'swipeConfig' in opts ? opts.swipeConfig : C[134] || CT.C134;
      let behavior = opts && 'behavior' in opts ? opts.behavior : C[136] || CT.C136;
      let onVerticalSwipe = opts && 'onVerticalSwipe' in opts ? opts.onVerticalSwipe : null;
      let onHorizontalSwipe = opts && 'onHorizontalSwipe' in opts ? opts.onHorizontalSwipe : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let onDoubleTap = opts && 'onDoubleTap' in opts ? opts.onDoubleTap : null;
      let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
      return new simple_gesture_detector.SimpleGestureDetector.new({key: key, child: child, swipeConfig: swipeConfig, behavior: behavior, onVerticalSwipe: onVerticalSwipe, onHorizontalSwipe: onHorizontalSwipe, onTap: onTap, onDoubleTap: onDoubleTap, onLongPress: onLongPress});
    }
    createState() {
      return new simple_gesture_detector._SimpleGestureDetectorState.new();
    }
  };
  (simple_gesture_detector.SimpleGestureDetector.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let swipeConfig = opts && 'swipeConfig' in opts ? opts.swipeConfig : C[134] || CT.C134;
    let behavior = opts && 'behavior' in opts ? opts.behavior : C[136] || CT.C136;
    let onVerticalSwipe = opts && 'onVerticalSwipe' in opts ? opts.onVerticalSwipe : null;
    let onHorizontalSwipe = opts && 'onHorizontalSwipe' in opts ? opts.onHorizontalSwipe : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onDoubleTap = opts && 'onDoubleTap' in opts ? opts.onDoubleTap : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    this[child$] = child;
    this[swipeConfig$] = swipeConfig;
    this[behavior$] = behavior;
    this[onVerticalSwipe$0] = onVerticalSwipe;
    this[onHorizontalSwipe$] = onHorizontalSwipe;
    this[onTap$] = onTap;
    this[onDoubleTap$] = onDoubleTap;
    this[onLongPress$] = onLongPress;
    simple_gesture_detector.SimpleGestureDetector.__proto__.new.call(this, {key: key});
    ;
  }).prototype = simple_gesture_detector.SimpleGestureDetector.prototype;
  dart.addTypeTests(simple_gesture_detector.SimpleGestureDetector);
  dart.addTypeCaches(simple_gesture_detector.SimpleGestureDetector);
  dart.setMethodSignature(simple_gesture_detector.SimpleGestureDetector, () => ({
    __proto__: dart.getMethods(simple_gesture_detector.SimpleGestureDetector.__proto__),
    createState: dart.fnType(simple_gesture_detector._SimpleGestureDetectorState, [])
  }));
  dart.setLibraryUri(simple_gesture_detector.SimpleGestureDetector, I[31]);
  dart.setFieldSignature(simple_gesture_detector.SimpleGestureDetector, () => ({
    __proto__: dart.getFields(simple_gesture_detector.SimpleGestureDetector.__proto__),
    child: dart.finalFieldType(framework.Widget),
    swipeConfig: dart.finalFieldType(simple_gesture_detector.SimpleSwipeConfig),
    behavior: dart.finalFieldType(proxy_box.HitTestBehavior),
    onVerticalSwipe: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [simple_gesture_detector.SwipeDirection]))),
    onHorizontalSwipe: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [simple_gesture_detector.SwipeDirection]))),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDoubleTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onLongPress: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  var _initialSwipeOffset = dart.privateName(simple_gesture_detector, "_initialSwipeOffset");
  var _finalSwipeOffset = dart.privateName(simple_gesture_detector, "_finalSwipeOffset");
  var _previousDirection = dart.privateName(simple_gesture_detector, "_previousDirection");
  var _onVerticalDragStart = dart.privateName(simple_gesture_detector, "_onVerticalDragStart");
  var _onVerticalDragUpdate = dart.privateName(simple_gesture_detector, "_onVerticalDragUpdate");
  var _onVerticalDragEnd = dart.privateName(simple_gesture_detector, "_onVerticalDragEnd");
  var _onHorizontalDragStart = dart.privateName(simple_gesture_detector, "_onHorizontalDragStart");
  var _onHorizontalDragUpdate = dart.privateName(simple_gesture_detector, "_onHorizontalDragUpdate");
  var _onHorizontalDragEnd = dart.privateName(simple_gesture_detector, "_onHorizontalDragEnd");
  simple_gesture_detector._SimpleGestureDetectorState = class _SimpleGestureDetectorState extends framework.State$(simple_gesture_detector.SimpleGestureDetector) {
    [_onVerticalDragStart](details) {
      this[_initialSwipeOffset] = details.globalPosition;
    }
    [_onVerticalDragUpdate](details) {
      this[_finalSwipeOffset] = details.globalPosition;
      if (this.widget.swipeConfig.swipeDetectionBehavior === simple_gesture_detector.SwipeDetectionBehavior.singularOnEnd) {
        return;
      }
      let initialOffset = this[_initialSwipeOffset];
      let finalOffset = this[_finalSwipeOffset];
      if (initialOffset != null && finalOffset != null) {
        let offsetDifference = initialOffset.dy - finalOffset.dy;
        if (offsetDifference[$abs]() > this.widget.swipeConfig.verticalThreshold) {
          this[_initialSwipeOffset] = this.widget.swipeConfig.swipeDetectionBehavior === simple_gesture_detector.SwipeDetectionBehavior.singular ? null : this[_finalSwipeOffset];
          let direction = offsetDifference > 0 ? simple_gesture_detector.SwipeDirection.up : simple_gesture_detector.SwipeDirection.down;
          if (this.widget.swipeConfig.swipeDetectionBehavior === simple_gesture_detector.SwipeDetectionBehavior.continuous || this[_previousDirection] == null || direction !== this[_previousDirection]) {
            this[_previousDirection] = direction;
            dart.nullCheck(this.widget.onVerticalSwipe)(direction);
          }
        }
      }
    }
    [_onVerticalDragEnd](details) {
      if (this.widget.swipeConfig.swipeDetectionBehavior === simple_gesture_detector.SwipeDetectionBehavior.singularOnEnd) {
        let initialOffset = this[_initialSwipeOffset];
        let finalOffset = this[_finalSwipeOffset];
        if (initialOffset != null && finalOffset != null) {
          let offsetDifference = initialOffset.dy - finalOffset.dy;
          if (offsetDifference[$abs]() > this.widget.swipeConfig.verticalThreshold) {
            let direction = offsetDifference > 0 ? simple_gesture_detector.SwipeDirection.up : simple_gesture_detector.SwipeDirection.down;
            dart.nullCheck(this.widget.onVerticalSwipe)(direction);
          }
        }
      }
      this[_initialSwipeOffset] = null;
      this[_previousDirection] = null;
    }
    [_onHorizontalDragStart](details) {
      this[_initialSwipeOffset] = details.globalPosition;
    }
    [_onHorizontalDragUpdate](details) {
      this[_finalSwipeOffset] = details.globalPosition;
      if (this.widget.swipeConfig.swipeDetectionBehavior === simple_gesture_detector.SwipeDetectionBehavior.singularOnEnd) {
        return;
      }
      let initialOffset = this[_initialSwipeOffset];
      let finalOffset = this[_finalSwipeOffset];
      if (initialOffset != null && finalOffset != null) {
        let offsetDifference = initialOffset.dx - finalOffset.dx;
        if (offsetDifference[$abs]() > this.widget.swipeConfig.horizontalThreshold) {
          this[_initialSwipeOffset] = this.widget.swipeConfig.swipeDetectionBehavior === simple_gesture_detector.SwipeDetectionBehavior.singular ? null : this[_finalSwipeOffset];
          let direction = offsetDifference > 0 ? simple_gesture_detector.SwipeDirection.left : simple_gesture_detector.SwipeDirection.right;
          if (this.widget.swipeConfig.swipeDetectionBehavior === simple_gesture_detector.SwipeDetectionBehavior.continuous || this[_previousDirection] == null || direction !== this[_previousDirection]) {
            this[_previousDirection] = direction;
            dart.nullCheck(this.widget.onHorizontalSwipe)(direction);
          }
        }
      }
    }
    [_onHorizontalDragEnd](details) {
      if (this.widget.swipeConfig.swipeDetectionBehavior === simple_gesture_detector.SwipeDetectionBehavior.singularOnEnd) {
        let initialOffset = this[_initialSwipeOffset];
        let finalOffset = this[_finalSwipeOffset];
        if (initialOffset != null && finalOffset != null) {
          let offsetDifference = initialOffset.dx - finalOffset.dx;
          if (offsetDifference[$abs]() > this.widget.swipeConfig.horizontalThreshold) {
            let direction = offsetDifference > 0 ? simple_gesture_detector.SwipeDirection.left : simple_gesture_detector.SwipeDirection.right;
            dart.nullCheck(this.widget.onHorizontalSwipe)(direction);
          }
        }
      }
      this[_initialSwipeOffset] = null;
      this[_previousDirection] = null;
    }
    build(context) {
      return new gesture_detector.GestureDetector.new({behavior: this.widget.behavior, child: this.widget.child, onTap: this.widget.onTap, onLongPress: this.widget.onLongPress, onDoubleTap: this.widget.onDoubleTap, onVerticalDragStart: this.widget.onVerticalSwipe != null ? dart.bind(this, _onVerticalDragStart) : null, onVerticalDragUpdate: this.widget.onVerticalSwipe != null ? dart.bind(this, _onVerticalDragUpdate) : null, onVerticalDragEnd: this.widget.onVerticalSwipe != null ? dart.bind(this, _onVerticalDragEnd) : null, onHorizontalDragStart: this.widget.onHorizontalSwipe != null ? dart.bind(this, _onHorizontalDragStart) : null, onHorizontalDragUpdate: this.widget.onHorizontalSwipe != null ? dart.bind(this, _onHorizontalDragUpdate) : null, onHorizontalDragEnd: this.widget.onHorizontalSwipe != null ? dart.bind(this, _onHorizontalDragEnd) : null});
    }
    static ['_#new#tearOff']() {
      return new simple_gesture_detector._SimpleGestureDetectorState.new();
    }
  };
  (simple_gesture_detector._SimpleGestureDetectorState.new = function() {
    this[_initialSwipeOffset] = null;
    this[_finalSwipeOffset] = null;
    this[_previousDirection] = null;
    simple_gesture_detector._SimpleGestureDetectorState.__proto__.new.call(this);
    ;
  }).prototype = simple_gesture_detector._SimpleGestureDetectorState.prototype;
  dart.addTypeTests(simple_gesture_detector._SimpleGestureDetectorState);
  dart.addTypeCaches(simple_gesture_detector._SimpleGestureDetectorState);
  dart.setMethodSignature(simple_gesture_detector._SimpleGestureDetectorState, () => ({
    __proto__: dart.getMethods(simple_gesture_detector._SimpleGestureDetectorState.__proto__),
    [_onVerticalDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_onVerticalDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_onVerticalDragEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [_onHorizontalDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_onHorizontalDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_onHorizontalDragEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(simple_gesture_detector._SimpleGestureDetectorState, I[31]);
  dart.setFieldSignature(simple_gesture_detector._SimpleGestureDetectorState, () => ({
    __proto__: dart.getFields(simple_gesture_detector._SimpleGestureDetectorState.__proto__),
    [_initialSwipeOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [_finalSwipeOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [_previousDirection]: dart.fieldType(dart.nullable(simple_gesture_detector.SwipeDirection))
  }));
  simple_gesture_detector.SwipeDetectionBehavior = class SwipeDetectionBehavior extends core._Enum {
    [_enumToString]() {
      return "SwipeDetectionBehavior." + this[_name];
    }
  };
  (simple_gesture_detector.SwipeDetectionBehavior.new = function(index, name) {
    simple_gesture_detector.SwipeDetectionBehavior.__proto__.new.call(this, index, name);
    ;
  }).prototype = simple_gesture_detector.SwipeDetectionBehavior.prototype;
  dart.addTypeTests(simple_gesture_detector.SwipeDetectionBehavior);
  dart.addTypeCaches(simple_gesture_detector.SwipeDetectionBehavior);
  dart.setMethodSignature(simple_gesture_detector.SwipeDetectionBehavior, () => ({
    __proto__: dart.getMethods(simple_gesture_detector.SwipeDetectionBehavior.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(simple_gesture_detector.SwipeDetectionBehavior, I[31]);
  dart.setStaticFieldSignature(simple_gesture_detector.SwipeDetectionBehavior, () => ['values', 'singular', 'singularOnEnd', 'continuous', 'continuousDistinct']);
  dart.defineLazy(simple_gesture_detector.SwipeDetectionBehavior, {
    /*simple_gesture_detector.SwipeDetectionBehavior.values*/get values() {
      return C[137] || CT.C137;
    },
    /*simple_gesture_detector.SwipeDetectionBehavior.singular*/get singular() {
      return C[138] || CT.C138;
    },
    /*simple_gesture_detector.SwipeDetectionBehavior.singularOnEnd*/get singularOnEnd() {
      return C[135] || CT.C135;
    },
    /*simple_gesture_detector.SwipeDetectionBehavior.continuous*/get continuous() {
      return C[139] || CT.C139;
    },
    /*simple_gesture_detector.SwipeDetectionBehavior.continuousDistinct*/get continuousDistinct() {
      return C[118] || CT.C118;
    }
  }, false);
  const verticalThreshold$ = SimpleSwipeConfig_verticalThreshold;
  const horizontalThreshold$ = SimpleSwipeConfig_horizontalThreshold;
  const swipeDetectionBehavior$ = SimpleSwipeConfig_swipeDetectionBehavior;
  simple_gesture_detector.SimpleSwipeConfig = class SimpleSwipeConfig extends core.Object {
    get verticalThreshold() {
      return this[verticalThreshold$];
    }
    set verticalThreshold(value) {
      super.verticalThreshold = value;
    }
    get horizontalThreshold() {
      return this[horizontalThreshold$];
    }
    set horizontalThreshold(value) {
      super.horizontalThreshold = value;
    }
    get swipeDetectionBehavior() {
      return this[swipeDetectionBehavior$];
    }
    set swipeDetectionBehavior(value) {
      super.swipeDetectionBehavior = value;
    }
    static ['_#new#tearOff'](opts) {
      let verticalThreshold = opts && 'verticalThreshold' in opts ? opts.verticalThreshold : 50;
      let horizontalThreshold = opts && 'horizontalThreshold' in opts ? opts.horizontalThreshold : 50;
      let swipeDetectionBehavior = opts && 'swipeDetectionBehavior' in opts ? opts.swipeDetectionBehavior : C[135] || CT.C135;
      return new simple_gesture_detector.SimpleSwipeConfig.new({verticalThreshold: verticalThreshold, horizontalThreshold: horizontalThreshold, swipeDetectionBehavior: swipeDetectionBehavior});
    }
  };
  (simple_gesture_detector.SimpleSwipeConfig.new = function(opts) {
    let verticalThreshold = opts && 'verticalThreshold' in opts ? opts.verticalThreshold : 50;
    let horizontalThreshold = opts && 'horizontalThreshold' in opts ? opts.horizontalThreshold : 50;
    let swipeDetectionBehavior = opts && 'swipeDetectionBehavior' in opts ? opts.swipeDetectionBehavior : C[135] || CT.C135;
    this[verticalThreshold$] = verticalThreshold;
    this[horizontalThreshold$] = horizontalThreshold;
    this[swipeDetectionBehavior$] = swipeDetectionBehavior;
    ;
  }).prototype = simple_gesture_detector.SimpleSwipeConfig.prototype;
  dart.addTypeTests(simple_gesture_detector.SimpleSwipeConfig);
  dart.addTypeCaches(simple_gesture_detector.SimpleSwipeConfig);
  dart.setLibraryUri(simple_gesture_detector.SimpleSwipeConfig, I[31]);
  dart.setFieldSignature(simple_gesture_detector.SimpleSwipeConfig, () => ({
    __proto__: dart.getFields(simple_gesture_detector.SimpleSwipeConfig.__proto__),
    verticalThreshold: dart.finalFieldType(core.double),
    horizontalThreshold: dart.finalFieldType(core.double),
    swipeDetectionBehavior: dart.finalFieldType(simple_gesture_detector.SwipeDetectionBehavior)
  }));
  var locale$0 = dart.privateName(calendar_header, "CalendarHeader.locale");
  var focusedMonth$ = dart.privateName(calendar_header, "CalendarHeader.focusedMonth");
  var calendarFormat$1 = dart.privateName(calendar_header, "CalendarHeader.calendarFormat");
  var headerStyle$0 = dart.privateName(calendar_header, "CalendarHeader.headerStyle");
  var onLeftChevronTap$ = dart.privateName(calendar_header, "CalendarHeader.onLeftChevronTap");
  var onRightChevronTap$ = dart.privateName(calendar_header, "CalendarHeader.onRightChevronTap");
  var onHeaderTap$ = dart.privateName(calendar_header, "CalendarHeader.onHeaderTap");
  var onHeaderLongPress$ = dart.privateName(calendar_header, "CalendarHeader.onHeaderLongPress");
  var onFormatButtonTap$ = dart.privateName(calendar_header, "CalendarHeader.onFormatButtonTap");
  var availableCalendarFormats$1 = dart.privateName(calendar_header, "CalendarHeader.availableCalendarFormats");
  var headerTitleBuilder$0 = dart.privateName(calendar_header, "CalendarHeader.headerTitleBuilder");
  calendar_header.CalendarHeader = class CalendarHeader extends framework.StatelessWidget {
    get locale() {
      return this[locale$0];
    }
    set locale(value) {
      super.locale = value;
    }
    get focusedMonth() {
      return this[focusedMonth$];
    }
    set focusedMonth(value) {
      super.focusedMonth = value;
    }
    get calendarFormat() {
      return this[calendarFormat$1];
    }
    set calendarFormat(value) {
      super.calendarFormat = value;
    }
    get headerStyle() {
      return this[headerStyle$0];
    }
    set headerStyle(value) {
      super.headerStyle = value;
    }
    get onLeftChevronTap() {
      return this[onLeftChevronTap$];
    }
    set onLeftChevronTap(value) {
      super.onLeftChevronTap = value;
    }
    get onRightChevronTap() {
      return this[onRightChevronTap$];
    }
    set onRightChevronTap(value) {
      super.onRightChevronTap = value;
    }
    get onHeaderTap() {
      return this[onHeaderTap$];
    }
    set onHeaderTap(value) {
      super.onHeaderTap = value;
    }
    get onHeaderLongPress() {
      return this[onHeaderLongPress$];
    }
    set onHeaderLongPress(value) {
      super.onHeaderLongPress = value;
    }
    get onFormatButtonTap() {
      return this[onFormatButtonTap$];
    }
    set onFormatButtonTap(value) {
      super.onFormatButtonTap = value;
    }
    get availableCalendarFormats() {
      return this[availableCalendarFormats$1];
    }
    set availableCalendarFormats(value) {
      super.availableCalendarFormats = value;
    }
    get headerTitleBuilder() {
      return this[headerTitleBuilder$0];
    }
    set headerTitleBuilder(value) {
      super.headerTitleBuilder = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let focusedMonth = opts && 'focusedMonth' in opts ? opts.focusedMonth : null;
      let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : null;
      let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
      let onLeftChevronTap = opts && 'onLeftChevronTap' in opts ? opts.onLeftChevronTap : null;
      let onRightChevronTap = opts && 'onRightChevronTap' in opts ? opts.onRightChevronTap : null;
      let onHeaderTap = opts && 'onHeaderTap' in opts ? opts.onHeaderTap : null;
      let onHeaderLongPress = opts && 'onHeaderLongPress' in opts ? opts.onHeaderLongPress : null;
      let onFormatButtonTap = opts && 'onFormatButtonTap' in opts ? opts.onFormatButtonTap : null;
      let availableCalendarFormats = opts && 'availableCalendarFormats' in opts ? opts.availableCalendarFormats : null;
      let headerTitleBuilder = opts && 'headerTitleBuilder' in opts ? opts.headerTitleBuilder : null;
      return new calendar_header.CalendarHeader.new({key: key, locale: locale, focusedMonth: focusedMonth, calendarFormat: calendarFormat, headerStyle: headerStyle, onLeftChevronTap: onLeftChevronTap, onRightChevronTap: onRightChevronTap, onHeaderTap: onHeaderTap, onHeaderLongPress: onHeaderLongPress, onFormatButtonTap: onFormatButtonTap, availableCalendarFormats: availableCalendarFormats, headerTitleBuilder: headerTitleBuilder});
    }
    build(context) {
      let t16, t16$, t17, t17$;
      let text = (t16$ = (t16 = this.headerStyle.titleTextFormatter, t16 == null ? null : t16(this.focusedMonth, this.locale)), t16$ == null ? new date_format.DateFormat.yMMMM(this.locale).format(this.focusedMonth) : t16$);
      return new container.Container.new({decoration: this.headerStyle.decoration, margin: this.headerStyle.headerMargin, padding: this.headerStyle.headerPadding, child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, children: (() => {
            let t16 = T$.JSArrayOfWidget().of([]);
            if (this.headerStyle.leftChevronVisible) t16.push(new custom_icon_button.CustomIconButton.new({icon: this.headerStyle.leftChevronIcon, onTap: this.onLeftChevronTap, margin: this.headerStyle.leftChevronMargin, padding: this.headerStyle.leftChevronPadding}));
            t16.push(new basic.Expanded.new({child: (t17$ = (t17 = this.headerTitleBuilder, t17 == null ? null : t17(context, this.focusedMonth)), t17$ == null ? new gesture_detector.GestureDetector.new({onTap: this.onHeaderTap, onLongPress: this.onHeaderLongPress, child: new text$.Text.new(text, {style: this.headerStyle.titleTextStyle, textAlign: this.headerStyle.titleCentered ? ui.TextAlign.center : ui.TextAlign.start})}) : t17$)}));
            if (this.headerStyle.formatButtonVisible && this.availableCalendarFormats[$length] > 1) t16.push(new basic.Padding.new({padding: C[140] || CT.C140, child: new format_button.FormatButton.new({onTap: this.onFormatButtonTap, availableCalendarFormats: this.availableCalendarFormats, calendarFormat: this.calendarFormat, decoration: this.headerStyle.formatButtonDecoration, padding: this.headerStyle.formatButtonPadding, textStyle: this.headerStyle.formatButtonTextStyle, showsNextFormat: this.headerStyle.formatButtonShowsNext})}));
            if (this.headerStyle.rightChevronVisible) t16.push(new custom_icon_button.CustomIconButton.new({icon: this.headerStyle.rightChevronIcon, onTap: this.onRightChevronTap, margin: this.headerStyle.rightChevronMargin, padding: this.headerStyle.rightChevronPadding}));
            return t16;
          })()})});
    }
  };
  (calendar_header.CalendarHeader.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let focusedMonth = opts && 'focusedMonth' in opts ? opts.focusedMonth : null;
    let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : null;
    let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
    let onLeftChevronTap = opts && 'onLeftChevronTap' in opts ? opts.onLeftChevronTap : null;
    let onRightChevronTap = opts && 'onRightChevronTap' in opts ? opts.onRightChevronTap : null;
    let onHeaderTap = opts && 'onHeaderTap' in opts ? opts.onHeaderTap : null;
    let onHeaderLongPress = opts && 'onHeaderLongPress' in opts ? opts.onHeaderLongPress : null;
    let onFormatButtonTap = opts && 'onFormatButtonTap' in opts ? opts.onFormatButtonTap : null;
    let availableCalendarFormats = opts && 'availableCalendarFormats' in opts ? opts.availableCalendarFormats : null;
    let headerTitleBuilder = opts && 'headerTitleBuilder' in opts ? opts.headerTitleBuilder : null;
    this[locale$0] = locale;
    this[focusedMonth$] = focusedMonth;
    this[calendarFormat$1] = calendarFormat;
    this[headerStyle$0] = headerStyle;
    this[onLeftChevronTap$] = onLeftChevronTap;
    this[onRightChevronTap$] = onRightChevronTap;
    this[onHeaderTap$] = onHeaderTap;
    this[onHeaderLongPress$] = onHeaderLongPress;
    this[onFormatButtonTap$] = onFormatButtonTap;
    this[availableCalendarFormats$1] = availableCalendarFormats;
    this[headerTitleBuilder$0] = headerTitleBuilder;
    calendar_header.CalendarHeader.__proto__.new.call(this, {key: key});
    ;
  }).prototype = calendar_header.CalendarHeader.prototype;
  dart.addTypeTests(calendar_header.CalendarHeader);
  dart.addTypeCaches(calendar_header.CalendarHeader);
  dart.setMethodSignature(calendar_header.CalendarHeader, () => ({
    __proto__: dart.getMethods(calendar_header.CalendarHeader.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(calendar_header.CalendarHeader, I[32]);
  dart.setFieldSignature(calendar_header.CalendarHeader, () => ({
    __proto__: dart.getFields(calendar_header.CalendarHeader.__proto__),
    locale: dart.finalFieldType(dart.dynamic),
    focusedMonth: dart.finalFieldType(core.DateTime),
    calendarFormat: dart.finalFieldType(utils$.CalendarFormat),
    headerStyle: dart.finalFieldType(header_style.HeaderStyle),
    onLeftChevronTap: dart.finalFieldType(dart.fnType(dart.void, [])),
    onRightChevronTap: dart.finalFieldType(dart.fnType(dart.void, [])),
    onHeaderTap: dart.finalFieldType(dart.fnType(dart.void, [])),
    onHeaderLongPress: dart.finalFieldType(dart.fnType(dart.void, [])),
    onFormatButtonTap: dart.finalFieldType(dart.fnType(dart.void, [utils$.CalendarFormat])),
    availableCalendarFormats: dart.finalFieldType(core.Map$(utils$.CalendarFormat, core.String)),
    headerTitleBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime])))
  }));
  var day$ = dart.privateName(cell_content, "CellContent.day");
  var focusedDay$1 = dart.privateName(cell_content, "CellContent.focusedDay");
  var locale$1 = dart.privateName(cell_content, "CellContent.locale");
  var isTodayHighlighted$0 = dart.privateName(cell_content, "CellContent.isTodayHighlighted");
  var isToday$ = dart.privateName(cell_content, "CellContent.isToday");
  var isSelected$ = dart.privateName(cell_content, "CellContent.isSelected");
  var isRangeStart$ = dart.privateName(cell_content, "CellContent.isRangeStart");
  var isRangeEnd$ = dart.privateName(cell_content, "CellContent.isRangeEnd");
  var isWithinRange$ = dart.privateName(cell_content, "CellContent.isWithinRange");
  var isOutside$ = dart.privateName(cell_content, "CellContent.isOutside");
  var isDisabled$ = dart.privateName(cell_content, "CellContent.isDisabled");
  var isHoliday$ = dart.privateName(cell_content, "CellContent.isHoliday");
  var isWeekend$ = dart.privateName(cell_content, "CellContent.isWeekend");
  var calendarStyle$0 = dart.privateName(cell_content, "CellContent.calendarStyle");
  var calendarBuilders$0 = dart.privateName(cell_content, "CellContent.calendarBuilders");
  cell_content.CellContent = class CellContent extends framework.StatelessWidget {
    get day() {
      return this[day$];
    }
    set day(value) {
      super.day = value;
    }
    get focusedDay() {
      return this[focusedDay$1];
    }
    set focusedDay(value) {
      super.focusedDay = value;
    }
    get locale() {
      return this[locale$1];
    }
    set locale(value) {
      super.locale = value;
    }
    get isTodayHighlighted() {
      return this[isTodayHighlighted$0];
    }
    set isTodayHighlighted(value) {
      super.isTodayHighlighted = value;
    }
    get isToday() {
      return this[isToday$];
    }
    set isToday(value) {
      super.isToday = value;
    }
    get isSelected() {
      return this[isSelected$];
    }
    set isSelected(value) {
      super.isSelected = value;
    }
    get isRangeStart() {
      return this[isRangeStart$];
    }
    set isRangeStart(value) {
      super.isRangeStart = value;
    }
    get isRangeEnd() {
      return this[isRangeEnd$];
    }
    set isRangeEnd(value) {
      super.isRangeEnd = value;
    }
    get isWithinRange() {
      return this[isWithinRange$];
    }
    set isWithinRange(value) {
      super.isWithinRange = value;
    }
    get isOutside() {
      return this[isOutside$];
    }
    set isOutside(value) {
      super.isOutside = value;
    }
    get isDisabled() {
      return this[isDisabled$];
    }
    set isDisabled(value) {
      super.isDisabled = value;
    }
    get isHoliday() {
      return this[isHoliday$];
    }
    set isHoliday(value) {
      super.isHoliday = value;
    }
    get isWeekend() {
      return this[isWeekend$];
    }
    set isWeekend(value) {
      super.isWeekend = value;
    }
    get calendarStyle() {
      return this[calendarStyle$0];
    }
    set calendarStyle(value) {
      super.calendarStyle = value;
    }
    get calendarBuilders() {
      return this[calendarBuilders$0];
    }
    set calendarBuilders(value) {
      super.calendarBuilders = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let day = opts && 'day' in opts ? opts.day : null;
      let focusedDay = opts && 'focusedDay' in opts ? opts.focusedDay : null;
      let calendarStyle = opts && 'calendarStyle' in opts ? opts.calendarStyle : null;
      let calendarBuilders = opts && 'calendarBuilders' in opts ? opts.calendarBuilders : null;
      let isTodayHighlighted = opts && 'isTodayHighlighted' in opts ? opts.isTodayHighlighted : null;
      let isToday = opts && 'isToday' in opts ? opts.isToday : null;
      let isSelected = opts && 'isSelected' in opts ? opts.isSelected : null;
      let isRangeStart = opts && 'isRangeStart' in opts ? opts.isRangeStart : null;
      let isRangeEnd = opts && 'isRangeEnd' in opts ? opts.isRangeEnd : null;
      let isWithinRange = opts && 'isWithinRange' in opts ? opts.isWithinRange : null;
      let isOutside = opts && 'isOutside' in opts ? opts.isOutside : null;
      let isDisabled = opts && 'isDisabled' in opts ? opts.isDisabled : null;
      let isHoliday = opts && 'isHoliday' in opts ? opts.isHoliday : null;
      let isWeekend = opts && 'isWeekend' in opts ? opts.isWeekend : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      return new cell_content.CellContent.new({key: key, day: day, focusedDay: focusedDay, calendarStyle: calendarStyle, calendarBuilders: calendarBuilders, isTodayHighlighted: isTodayHighlighted, isToday: isToday, isSelected: isSelected, isRangeStart: isRangeStart, isRangeEnd: isRangeEnd, isWithinRange: isWithinRange, isOutside: isOutside, isDisabled: isDisabled, isHoliday: isHoliday, isWeekend: isWeekend, locale: locale});
    }
    build(context) {
      let t17, t17$, t17$0, t17$1, t17$2, t17$3, t17$4, t17$5, t17$6, t17$7, t17$8, t17$9, t17$10, t17$11, t17$12, t17$13, t17$14, t17$15, t17$16;
      let dowLabel = new date_format.DateFormat.EEEE(this.locale).format(this.day);
      let dayLabel = new date_format.DateFormat.yMMMMd(this.locale).format(this.day);
      let semanticsLabel = dowLabel + ", " + dayLabel;
      let cell = (t17 = this.calendarBuilders.prioritizedBuilder, t17 == null ? null : t17(context, this.day, this.focusedDay));
      if (cell != null) {
        return new basic.Semantics.new({label: semanticsLabel, excludeSemantics: true, child: cell});
      }
      let text = dart.str(this.day.day);
      let margin = this.calendarStyle.cellMargin;
      let padding = this.calendarStyle.cellPadding;
      let alignment = this.calendarStyle.cellAlignment;
      let duration = C[141] || CT.C141;
      if (this.isDisabled) {
        cell = (t17$0 = (t17$ = this.calendarBuilders.disabledBuilder, t17$ == null ? null : t17$(context, this.day, this.focusedDay)), t17$0 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.calendarStyle.disabledDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.calendarStyle.disabledTextStyle})}) : t17$0);
      } else if (this.isSelected) {
        cell = (t17$2 = (t17$1 = this.calendarBuilders.selectedBuilder, t17$1 == null ? null : t17$1(context, this.day, this.focusedDay)), t17$2 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.calendarStyle.selectedDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.calendarStyle.selectedTextStyle})}) : t17$2);
      } else if (this.isRangeStart) {
        cell = (t17$4 = (t17$3 = this.calendarBuilders.rangeStartBuilder, t17$3 == null ? null : t17$3(context, this.day, this.focusedDay)), t17$4 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.calendarStyle.rangeStartDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.calendarStyle.rangeStartTextStyle})}) : t17$4);
      } else if (this.isRangeEnd) {
        cell = (t17$6 = (t17$5 = this.calendarBuilders.rangeEndBuilder, t17$5 == null ? null : t17$5(context, this.day, this.focusedDay)), t17$6 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.calendarStyle.rangeEndDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.calendarStyle.rangeEndTextStyle})}) : t17$6);
      } else if (this.isToday && this.isTodayHighlighted) {
        cell = (t17$8 = (t17$7 = this.calendarBuilders.todayBuilder, t17$7 == null ? null : t17$7(context, this.day, this.focusedDay)), t17$8 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.calendarStyle.todayDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.calendarStyle.todayTextStyle})}) : t17$8);
      } else if (this.isHoliday) {
        cell = (t17$10 = (t17$9 = this.calendarBuilders.holidayBuilder, t17$9 == null ? null : t17$9(context, this.day, this.focusedDay)), t17$10 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.calendarStyle.holidayDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.calendarStyle.holidayTextStyle})}) : t17$10);
      } else if (this.isWithinRange) {
        cell = (t17$12 = (t17$11 = this.calendarBuilders.withinRangeBuilder, t17$11 == null ? null : t17$11(context, this.day, this.focusedDay)), t17$12 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.calendarStyle.withinRangeDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.calendarStyle.withinRangeTextStyle})}) : t17$12);
      } else if (this.isOutside) {
        cell = (t17$14 = (t17$13 = this.calendarBuilders.outsideBuilder, t17$13 == null ? null : t17$13(context, this.day, this.focusedDay)), t17$14 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.calendarStyle.outsideDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.calendarStyle.outsideTextStyle})}) : t17$14);
      } else {
        cell = (t17$16 = (t17$15 = this.calendarBuilders.defaultBuilder, t17$15 == null ? null : t17$15(context, this.day, this.focusedDay)), t17$16 == null ? new implicit_animations.AnimatedContainer.new({duration: duration, margin: margin, padding: padding, decoration: this.isWeekend ? this.calendarStyle.weekendDecoration : this.calendarStyle.defaultDecoration, alignment: alignment, child: new text$.Text.new(text, {style: this.isWeekend ? this.calendarStyle.weekendTextStyle : this.calendarStyle.defaultTextStyle})}) : t17$16);
      }
      return new basic.Semantics.new({label: semanticsLabel, excludeSemantics: true, child: cell});
    }
  };
  (cell_content.CellContent.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let day = opts && 'day' in opts ? opts.day : null;
    let focusedDay = opts && 'focusedDay' in opts ? opts.focusedDay : null;
    let calendarStyle = opts && 'calendarStyle' in opts ? opts.calendarStyle : null;
    let calendarBuilders = opts && 'calendarBuilders' in opts ? opts.calendarBuilders : null;
    let isTodayHighlighted = opts && 'isTodayHighlighted' in opts ? opts.isTodayHighlighted : null;
    let isToday = opts && 'isToday' in opts ? opts.isToday : null;
    let isSelected = opts && 'isSelected' in opts ? opts.isSelected : null;
    let isRangeStart = opts && 'isRangeStart' in opts ? opts.isRangeStart : null;
    let isRangeEnd = opts && 'isRangeEnd' in opts ? opts.isRangeEnd : null;
    let isWithinRange = opts && 'isWithinRange' in opts ? opts.isWithinRange : null;
    let isOutside = opts && 'isOutside' in opts ? opts.isOutside : null;
    let isDisabled = opts && 'isDisabled' in opts ? opts.isDisabled : null;
    let isHoliday = opts && 'isHoliday' in opts ? opts.isHoliday : null;
    let isWeekend = opts && 'isWeekend' in opts ? opts.isWeekend : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    this[day$] = day;
    this[focusedDay$1] = focusedDay;
    this[calendarStyle$0] = calendarStyle;
    this[calendarBuilders$0] = calendarBuilders;
    this[isTodayHighlighted$0] = isTodayHighlighted;
    this[isToday$] = isToday;
    this[isSelected$] = isSelected;
    this[isRangeStart$] = isRangeStart;
    this[isRangeEnd$] = isRangeEnd;
    this[isWithinRange$] = isWithinRange;
    this[isOutside$] = isOutside;
    this[isDisabled$] = isDisabled;
    this[isHoliday$] = isHoliday;
    this[isWeekend$] = isWeekend;
    this[locale$1] = locale;
    cell_content.CellContent.__proto__.new.call(this, {key: key});
    ;
  }).prototype = cell_content.CellContent.prototype;
  dart.addTypeTests(cell_content.CellContent);
  dart.addTypeCaches(cell_content.CellContent);
  dart.setMethodSignature(cell_content.CellContent, () => ({
    __proto__: dart.getMethods(cell_content.CellContent.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(cell_content.CellContent, I[33]);
  dart.setFieldSignature(cell_content.CellContent, () => ({
    __proto__: dart.getFields(cell_content.CellContent.__proto__),
    day: dart.finalFieldType(core.DateTime),
    focusedDay: dart.finalFieldType(core.DateTime),
    locale: dart.finalFieldType(dart.dynamic),
    isTodayHighlighted: dart.finalFieldType(core.bool),
    isToday: dart.finalFieldType(core.bool),
    isSelected: dart.finalFieldType(core.bool),
    isRangeStart: dart.finalFieldType(core.bool),
    isRangeEnd: dart.finalFieldType(core.bool),
    isWithinRange: dart.finalFieldType(core.bool),
    isOutside: dart.finalFieldType(core.bool),
    isDisabled: dart.finalFieldType(core.bool),
    isHoliday: dart.finalFieldType(core.bool),
    isWeekend: dart.finalFieldType(core.bool),
    calendarStyle: dart.finalFieldType(calendar_style.CalendarStyle),
    calendarBuilders: dart.finalFieldType(calendar_builders.CalendarBuilders)
  }));
  var focusedDay$2 = dart.privateName(calendar_core, "CalendarCore.focusedDay");
  var firstDay$1 = dart.privateName(calendar_core, "CalendarCore.firstDay");
  var lastDay$1 = dart.privateName(calendar_core, "CalendarCore.lastDay");
  var calendarFormat$2 = dart.privateName(calendar_core, "CalendarCore.calendarFormat");
  var dowBuilder$1 = dart.privateName(calendar_core, "CalendarCore.dowBuilder");
  var weekNumberBuilder$1 = dart.privateName(calendar_core, "CalendarCore.weekNumberBuilder");
  var dayBuilder$0 = dart.privateName(calendar_core, "CalendarCore.dayBuilder");
  var sixWeekMonthsEnforced$1 = dart.privateName(calendar_core, "CalendarCore.sixWeekMonthsEnforced");
  var dowVisible$0 = dart.privateName(calendar_core, "CalendarCore.dowVisible");
  var weekNumbersVisible$1 = dart.privateName(calendar_core, "CalendarCore.weekNumbersVisible");
  var dowDecoration$0 = dart.privateName(calendar_core, "CalendarCore.dowDecoration");
  var rowDecoration$1 = dart.privateName(calendar_core, "CalendarCore.rowDecoration");
  var tableBorder$1 = dart.privateName(calendar_core, "CalendarCore.tableBorder");
  var tablePadding$1 = dart.privateName(calendar_core, "CalendarCore.tablePadding");
  var dowHeight$0 = dart.privateName(calendar_core, "CalendarCore.dowHeight");
  var rowHeight$1 = dart.privateName(calendar_core, "CalendarCore.rowHeight");
  var constraints$ = dart.privateName(calendar_core, "CalendarCore.constraints");
  var previousIndex$ = dart.privateName(calendar_core, "CalendarCore.previousIndex");
  var startingDayOfWeek$1 = dart.privateName(calendar_core, "CalendarCore.startingDayOfWeek");
  var pageController$ = dart.privateName(calendar_core, "CalendarCore.pageController");
  var scrollPhysics$ = dart.privateName(calendar_core, "CalendarCore.scrollPhysics");
  var onPageChanged$1 = dart.privateName(calendar_core, "CalendarCore.onPageChanged");
  var _getPageCount = dart.privateName(calendar_core, "_getPageCount");
  var _getBaseDay = dart.privateName(calendar_core, "_getBaseDay");
  var _getVisibleRange = dart.privateName(calendar_core, "_getVisibleRange");
  var _daysInRange = dart.privateName(calendar_core, "_daysInRange");
  var _getRowCount$ = dart.privateName(calendar_core, "_getRowCount");
  var _getFocusedDay = dart.privateName(calendar_core, "_getFocusedDay");
  var _getMonthCount$ = dart.privateName(calendar_core, "_getMonthCount");
  var _getTwoWeekCount$ = dart.privateName(calendar_core, "_getTwoWeekCount");
  var _getWeekCount$ = dart.privateName(calendar_core, "_getWeekCount");
  var _firstDayOfWeek$ = dart.privateName(calendar_core, "_firstDayOfWeek");
  var _daysInMonth = dart.privateName(calendar_core, "_daysInMonth");
  var _daysInTwoWeeks = dart.privateName(calendar_core, "_daysInTwoWeeks");
  var _daysInWeek = dart.privateName(calendar_core, "_daysInWeek");
  var _getDaysBefore$ = dart.privateName(calendar_core, "_getDaysBefore");
  var _firstDayOfMonth$0 = dart.privateName(calendar_core, "_firstDayOfMonth");
  var _lastDayOfMonth$0 = dart.privateName(calendar_core, "_lastDayOfMonth");
  var _getDaysAfter$ = dart.privateName(calendar_core, "_getDaysAfter");
  calendar_core.CalendarCore = class CalendarCore extends framework.StatelessWidget {
    get focusedDay() {
      return this[focusedDay$2];
    }
    set focusedDay(value) {
      super.focusedDay = value;
    }
    get firstDay() {
      return this[firstDay$1];
    }
    set firstDay(value) {
      super.firstDay = value;
    }
    get lastDay() {
      return this[lastDay$1];
    }
    set lastDay(value) {
      super.lastDay = value;
    }
    get calendarFormat() {
      return this[calendarFormat$2];
    }
    set calendarFormat(value) {
      super.calendarFormat = value;
    }
    get dowBuilder() {
      return this[dowBuilder$1];
    }
    set dowBuilder(value) {
      super.dowBuilder = value;
    }
    get weekNumberBuilder() {
      return this[weekNumberBuilder$1];
    }
    set weekNumberBuilder(value) {
      super.weekNumberBuilder = value;
    }
    get dayBuilder() {
      return this[dayBuilder$0];
    }
    set dayBuilder(value) {
      super.dayBuilder = value;
    }
    get sixWeekMonthsEnforced() {
      return this[sixWeekMonthsEnforced$1];
    }
    set sixWeekMonthsEnforced(value) {
      super.sixWeekMonthsEnforced = value;
    }
    get dowVisible() {
      return this[dowVisible$0];
    }
    set dowVisible(value) {
      super.dowVisible = value;
    }
    get weekNumbersVisible() {
      return this[weekNumbersVisible$1];
    }
    set weekNumbersVisible(value) {
      super.weekNumbersVisible = value;
    }
    get dowDecoration() {
      return this[dowDecoration$0];
    }
    set dowDecoration(value) {
      super.dowDecoration = value;
    }
    get rowDecoration() {
      return this[rowDecoration$1];
    }
    set rowDecoration(value) {
      super.rowDecoration = value;
    }
    get tableBorder() {
      return this[tableBorder$1];
    }
    set tableBorder(value) {
      super.tableBorder = value;
    }
    get tablePadding() {
      return this[tablePadding$1];
    }
    set tablePadding(value) {
      super.tablePadding = value;
    }
    get dowHeight() {
      return this[dowHeight$0];
    }
    set dowHeight(value) {
      super.dowHeight = value;
    }
    get rowHeight() {
      return this[rowHeight$1];
    }
    set rowHeight(value) {
      super.rowHeight = value;
    }
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get previousIndex() {
      return this[previousIndex$];
    }
    set previousIndex(value) {
      super.previousIndex = value;
    }
    get startingDayOfWeek() {
      return this[startingDayOfWeek$1];
    }
    set startingDayOfWeek(value) {
      super.startingDayOfWeek = value;
    }
    get pageController() {
      return this[pageController$];
    }
    set pageController(value) {
      super.pageController = value;
    }
    get scrollPhysics() {
      return this[scrollPhysics$];
    }
    set scrollPhysics(value) {
      super.scrollPhysics = value;
    }
    get onPageChanged() {
      return this[onPageChanged$1];
    }
    set onPageChanged(value) {
      super.onPageChanged = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let dowBuilder = opts && 'dowBuilder' in opts ? opts.dowBuilder : null;
      let dayBuilder = opts && 'dayBuilder' in opts ? opts.dayBuilder : null;
      let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
      let firstDay = opts && 'firstDay' in opts ? opts.firstDay : null;
      let lastDay = opts && 'lastDay' in opts ? opts.lastDay : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let dowHeight = opts && 'dowHeight' in opts ? opts.dowHeight : null;
      let rowHeight = opts && 'rowHeight' in opts ? opts.rowHeight : null;
      let startingDayOfWeek = opts && 'startingDayOfWeek' in opts ? opts.startingDayOfWeek : C[105] || CT.C105;
      let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : C[95] || CT.C95;
      let pageController = opts && 'pageController' in opts ? opts.pageController : null;
      let focusedDay = opts && 'focusedDay' in opts ? opts.focusedDay : null;
      let previousIndex = opts && 'previousIndex' in opts ? opts.previousIndex : null;
      let sixWeekMonthsEnforced = opts && 'sixWeekMonthsEnforced' in opts ? opts.sixWeekMonthsEnforced : false;
      let dowVisible = opts && 'dowVisible' in opts ? opts.dowVisible : true;
      let weekNumberBuilder = opts && 'weekNumberBuilder' in opts ? opts.weekNumberBuilder : null;
      let weekNumbersVisible = opts && 'weekNumbersVisible' in opts ? opts.weekNumbersVisible : null;
      let dowDecoration = opts && 'dowDecoration' in opts ? opts.dowDecoration : null;
      let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
      let tableBorder = opts && 'tableBorder' in opts ? opts.tableBorder : null;
      let tablePadding = opts && 'tablePadding' in opts ? opts.tablePadding : null;
      let scrollPhysics = opts && 'scrollPhysics' in opts ? opts.scrollPhysics : null;
      return new calendar_core.CalendarCore.new({key: key, dowBuilder: dowBuilder, dayBuilder: dayBuilder, onPageChanged: onPageChanged, firstDay: firstDay, lastDay: lastDay, constraints: constraints, dowHeight: dowHeight, rowHeight: rowHeight, startingDayOfWeek: startingDayOfWeek, calendarFormat: calendarFormat, pageController: pageController, focusedDay: focusedDay, previousIndex: previousIndex, sixWeekMonthsEnforced: sixWeekMonthsEnforced, dowVisible: dowVisible, weekNumberBuilder: weekNumberBuilder, weekNumbersVisible: weekNumbersVisible, dowDecoration: dowDecoration, rowDecoration: rowDecoration, tableBorder: tableBorder, tablePadding: tablePadding, scrollPhysics: scrollPhysics});
    }
    build(context) {
      return new page_view.PageView.builder({controller: this.pageController, physics: this.scrollPhysics, itemCount: this[_getPageCount](this.calendarFormat, this.firstDay, this.lastDay), itemBuilder: dart.fn((context, index) => {
          let baseDay = this[_getBaseDay](this.calendarFormat, index);
          let visibleRange = this[_getVisibleRange](this.calendarFormat, baseDay);
          let visibleDays = this[_daysInRange](visibleRange.start, visibleRange.end);
          let actualDowHeight = this.dowVisible ? dart.nullCheck(this.dowHeight) : 0;
          let constrainedRowHeight = this.constraints.hasBoundedHeight ? (this.constraints.maxHeight - actualDowHeight) / this[_getRowCount$](this.calendarFormat, baseDay) : null;
          return new calendar_page.CalendarPage.new({visibleDays: visibleDays, dowVisible: this.dowVisible, dowDecoration: this.dowDecoration, rowDecoration: this.rowDecoration, tableBorder: this.tableBorder, tablePadding: this.tablePadding, dowBuilder: dart.fn((context, day) => {
              let t17;
              return new basic.SizedBox.new({height: this.dowHeight, child: (t17 = this.dowBuilder, t17 == null ? null : t17(context, day))});
            }, T$.BuildContextAndDateTimeToSizedBox()), dayBuilder: dart.fn((context, day) => {
              let t17, t19, t18, t17$;
              let baseDay = null;
              let previousFocusedDay = this.focusedDay;
              if (previousFocusedDay == null || this.previousIndex == null) {
                baseDay = this[_getBaseDay](this.calendarFormat, index);
              } else {
                baseDay = this[_getFocusedDay](this.calendarFormat, previousFocusedDay, index);
              }
              return new basic.SizedBox.new({height: (t17 = constrainedRowHeight, t17 == null ? this.rowHeight : t17), child: (t17$ = context, t18 = day, t19 = baseDay, this.dayBuilder(t17$, t18, t19))});
            }, T$.BuildContextAndDateTimeToSizedBox()), dowHeight: this.dowHeight, weekNumberVisible: this.weekNumbersVisible, weekNumberBuilder: dart.fn((context, day) => {
              let t17, t17$;
              return new basic.SizedBox.new({height: (t17 = constrainedRowHeight, t17 == null ? this.rowHeight : t17), child: (t17$ = this.weekNumberBuilder, t17$ == null ? null : t17$(context, day))});
            }, T$.BuildContextAndDateTimeToSizedBox())});
        }, T$.BuildContextAndintToCalendarPage()), onPageChanged: dart.fn(index => {
          let t18, t17;
          let baseDay = null;
          let previousFocusedDay = this.focusedDay;
          if (previousFocusedDay == null || this.previousIndex == null) {
            baseDay = this[_getBaseDay](this.calendarFormat, index);
          } else {
            baseDay = this[_getFocusedDay](this.calendarFormat, previousFocusedDay, index);
          }
          t17 = index;
          t18 = baseDay;
          return this.onPageChanged(t17, t18);
        }, T$.intTovoid())});
    }
    [_getPageCount](format, first, last) {
      switch (format) {
        case C[95] || CT.C95:
          {
            return this[_getMonthCount$](first, last) + 1;
          }
        case C[96] || CT.C96:
          {
            return this[_getTwoWeekCount$](first, last) + 1;
          }
        case C[97] || CT.C97:
          {
            return this[_getWeekCount$](first, last) + 1;
          }
        default:
          {
            return this[_getMonthCount$](first, last) + 1;
          }
      }
    }
    [_getMonthCount$](first, last) {
      let yearDif = last.year - first.year;
      let monthDif = last.month - first.month;
      return yearDif * 12 + monthDif;
    }
    [_getWeekCount$](first, last) {
      return (last.difference(this[_firstDayOfWeek$](first)).inDays / 7)[$truncate]();
    }
    [_getTwoWeekCount$](first, last) {
      return (last.difference(this[_firstDayOfWeek$](first)).inDays / 14)[$truncate]();
    }
    [_getFocusedDay](format, prevFocusedDay, pageIndex) {
      if (pageIndex === this.previousIndex) {
        return prevFocusedDay;
      }
      let pageDif = pageIndex - dart.nullCheck(this.previousIndex);
      let day = null;
      switch (format) {
        case C[95] || CT.C95:
          {
            day = new core.DateTime.utc(prevFocusedDay.year, prevFocusedDay.month + pageDif);
            break;
          }
        case C[96] || CT.C96:
          {
            day = new core.DateTime.utc(prevFocusedDay.year, prevFocusedDay.month, prevFocusedDay.day + pageDif * 14);
            break;
          }
        case C[97] || CT.C97:
          {
            day = new core.DateTime.utc(prevFocusedDay.year, prevFocusedDay.month, prevFocusedDay.day + pageDif * 7);
            break;
          }
      }
      if (day.isBefore(this.firstDay)) {
        day = this.firstDay;
      } else if (day.isAfter(this.lastDay)) {
        day = this.lastDay;
      }
      return day;
    }
    [_getBaseDay](format, pageIndex) {
      let day = null;
      switch (format) {
        case C[95] || CT.C95:
          {
            day = new core.DateTime.utc(this.firstDay.year, this.firstDay.month + pageIndex);
            break;
          }
        case C[96] || CT.C96:
          {
            day = new core.DateTime.utc(this.firstDay.year, this.firstDay.month, this.firstDay.day + pageIndex * 14);
            break;
          }
        case C[97] || CT.C97:
          {
            day = new core.DateTime.utc(this.firstDay.year, this.firstDay.month, this.firstDay.day + pageIndex * 7);
            break;
          }
      }
      if (day.isBefore(this.firstDay)) {
        day = this.firstDay;
      } else if (day.isAfter(this.lastDay)) {
        day = this.lastDay;
      }
      return day;
    }
    [_getVisibleRange](format, focusedDay) {
      switch (format) {
        case C[95] || CT.C95:
          {
            return this[_daysInMonth](focusedDay);
          }
        case C[96] || CT.C96:
          {
            return this[_daysInTwoWeeks](focusedDay);
          }
        case C[97] || CT.C97:
          {
            return this[_daysInWeek](focusedDay);
          }
        default:
          {
            return this[_daysInMonth](focusedDay);
          }
      }
    }
    [_daysInWeek](focusedDay) {
      let daysBefore = this[_getDaysBefore$](focusedDay);
      let firstToDisplay = focusedDay.subtract(new core.Duration.new({days: daysBefore}));
      let lastToDisplay = firstToDisplay.add(C[142] || CT.C142);
      return new date.DateTimeRange.new({start: firstToDisplay, end: lastToDisplay});
    }
    [_daysInTwoWeeks](focusedDay) {
      let daysBefore = this[_getDaysBefore$](focusedDay);
      let firstToDisplay = focusedDay.subtract(new core.Duration.new({days: daysBefore}));
      let lastToDisplay = firstToDisplay.add(C[143] || CT.C143);
      return new date.DateTimeRange.new({start: firstToDisplay, end: lastToDisplay});
    }
    [_daysInMonth](focusedDay) {
      let first = this[_firstDayOfMonth$0](focusedDay);
      let daysBefore = this[_getDaysBefore$](first);
      let firstToDisplay = first.subtract(new core.Duration.new({days: daysBefore}));
      if (this.sixWeekMonthsEnforced) {
        let end = firstToDisplay.add(C[144] || CT.C144);
        return new date.DateTimeRange.new({start: firstToDisplay, end: end});
      }
      let last = this[_lastDayOfMonth$0](focusedDay);
      let daysAfter = this[_getDaysAfter$](last);
      let lastToDisplay = last.add(new core.Duration.new({days: daysAfter}));
      return new date.DateTimeRange.new({start: firstToDisplay, end: lastToDisplay});
    }
    [_daysInRange](first, last) {
      let dayCount = last.difference(first).inDays + 1;
      return T$.ListOfDateTime().generate(dayCount, dart.fn(index => new core.DateTime.utc(first.year, first.month, first.day + index), T$.intToDateTime()));
    }
    [_firstDayOfWeek$](week) {
      let daysBefore = this[_getDaysBefore$](week);
      return week.subtract(new core.Duration.new({days: daysBefore}));
    }
    [_firstDayOfMonth$0](month) {
      return new core.DateTime.utc(month.year, month.month, 1);
    }
    [_lastDayOfMonth$0](month) {
      let date = month.month < 12 ? new core.DateTime.utc(month.year, month.month + 1, 1) : new core.DateTime.utc(month.year + 1, 1, 1);
      return date.subtract(C[125] || CT.C125);
    }
    [_getRowCount$](format, focusedDay) {
      if (format === utils$.CalendarFormat.twoWeeks) {
        return 2;
      } else if (format === utils$.CalendarFormat.week) {
        return 1;
      } else if (this.sixWeekMonthsEnforced) {
        return 6;
      }
      let first = this[_firstDayOfMonth$0](focusedDay);
      let daysBefore = this[_getDaysBefore$](first);
      let firstToDisplay = first.subtract(new core.Duration.new({days: daysBefore}));
      let last = this[_lastDayOfMonth$0](focusedDay);
      let daysAfter = this[_getDaysAfter$](last);
      let lastToDisplay = last.add(new core.Duration.new({days: daysAfter}));
      return ((lastToDisplay.difference(firstToDisplay).inDays + 1) / 7)[$truncate]();
    }
    [_getDaysBefore$](firstDay) {
      return (firstDay.weekday + 7 - utils$.getWeekdayNumber(this.startingDayOfWeek))[$modulo](7);
    }
    [_getDaysAfter$](lastDay) {
      let invertedStartingWeekday = 8 - utils$.getWeekdayNumber(this.startingDayOfWeek);
      let daysAfter = 7 - (lastDay.weekday + invertedStartingWeekday)[$modulo](7);
      if (daysAfter === 7) {
        daysAfter = 0;
      }
      return daysAfter;
    }
  };
  (calendar_core.CalendarCore.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let dowBuilder = opts && 'dowBuilder' in opts ? opts.dowBuilder : null;
    let dayBuilder = opts && 'dayBuilder' in opts ? opts.dayBuilder : null;
    let onPageChanged = opts && 'onPageChanged' in opts ? opts.onPageChanged : null;
    let firstDay = opts && 'firstDay' in opts ? opts.firstDay : null;
    let lastDay = opts && 'lastDay' in opts ? opts.lastDay : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let dowHeight = opts && 'dowHeight' in opts ? opts.dowHeight : null;
    let rowHeight = opts && 'rowHeight' in opts ? opts.rowHeight : null;
    let startingDayOfWeek = opts && 'startingDayOfWeek' in opts ? opts.startingDayOfWeek : C[105] || CT.C105;
    let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : C[95] || CT.C95;
    let pageController = opts && 'pageController' in opts ? opts.pageController : null;
    let focusedDay = opts && 'focusedDay' in opts ? opts.focusedDay : null;
    let previousIndex = opts && 'previousIndex' in opts ? opts.previousIndex : null;
    let sixWeekMonthsEnforced = opts && 'sixWeekMonthsEnforced' in opts ? opts.sixWeekMonthsEnforced : false;
    let dowVisible = opts && 'dowVisible' in opts ? opts.dowVisible : true;
    let weekNumberBuilder = opts && 'weekNumberBuilder' in opts ? opts.weekNumberBuilder : null;
    let weekNumbersVisible = opts && 'weekNumbersVisible' in opts ? opts.weekNumbersVisible : null;
    let dowDecoration = opts && 'dowDecoration' in opts ? opts.dowDecoration : null;
    let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
    let tableBorder = opts && 'tableBorder' in opts ? opts.tableBorder : null;
    let tablePadding = opts && 'tablePadding' in opts ? opts.tablePadding : null;
    let scrollPhysics = opts && 'scrollPhysics' in opts ? opts.scrollPhysics : null;
    this[dowBuilder$1] = dowBuilder;
    this[dayBuilder$0] = dayBuilder;
    this[onPageChanged$1] = onPageChanged;
    this[firstDay$1] = firstDay;
    this[lastDay$1] = lastDay;
    this[constraints$] = constraints;
    this[dowHeight$0] = dowHeight;
    this[rowHeight$1] = rowHeight;
    this[startingDayOfWeek$1] = startingDayOfWeek;
    this[calendarFormat$2] = calendarFormat;
    this[pageController$] = pageController;
    this[focusedDay$2] = focusedDay;
    this[previousIndex$] = previousIndex;
    this[sixWeekMonthsEnforced$1] = sixWeekMonthsEnforced;
    this[dowVisible$0] = dowVisible;
    this[weekNumberBuilder$1] = weekNumberBuilder;
    this[weekNumbersVisible$1] = weekNumbersVisible;
    this[dowDecoration$0] = dowDecoration;
    this[rowDecoration$1] = rowDecoration;
    this[tableBorder$1] = tableBorder;
    this[tablePadding$1] = tablePadding;
    this[scrollPhysics$] = scrollPhysics;
    if (!(!dowVisible || dowHeight != null && dowBuilder != null)) dart.assertFailed(null, I[34], 60, 16, "!dowVisible || (dowHeight != null && dowBuilder != null)");
    calendar_core.CalendarCore.__proto__.new.call(this, {key: key});
    ;
  }).prototype = calendar_core.CalendarCore.prototype;
  dart.addTypeTests(calendar_core.CalendarCore);
  dart.addTypeCaches(calendar_core.CalendarCore);
  dart.setMethodSignature(calendar_core.CalendarCore, () => ({
    __proto__: dart.getMethods(calendar_core.CalendarCore.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getPageCount]: dart.fnType(core.int, [utils$.CalendarFormat, core.DateTime, core.DateTime]),
    [_getMonthCount$]: dart.fnType(core.int, [core.DateTime, core.DateTime]),
    [_getWeekCount$]: dart.fnType(core.int, [core.DateTime, core.DateTime]),
    [_getTwoWeekCount$]: dart.fnType(core.int, [core.DateTime, core.DateTime]),
    [_getFocusedDay]: dart.fnType(core.DateTime, [utils$.CalendarFormat, core.DateTime, core.int]),
    [_getBaseDay]: dart.fnType(core.DateTime, [utils$.CalendarFormat, core.int]),
    [_getVisibleRange]: dart.fnType(date.DateTimeRange, [utils$.CalendarFormat, core.DateTime]),
    [_daysInWeek]: dart.fnType(date.DateTimeRange, [core.DateTime]),
    [_daysInTwoWeeks]: dart.fnType(date.DateTimeRange, [core.DateTime]),
    [_daysInMonth]: dart.fnType(date.DateTimeRange, [core.DateTime]),
    [_daysInRange]: dart.fnType(core.List$(core.DateTime), [core.DateTime, core.DateTime]),
    [_firstDayOfWeek$]: dart.fnType(core.DateTime, [core.DateTime]),
    [_firstDayOfMonth$0]: dart.fnType(core.DateTime, [core.DateTime]),
    [_lastDayOfMonth$0]: dart.fnType(core.DateTime, [core.DateTime]),
    [_getRowCount$]: dart.fnType(core.int, [utils$.CalendarFormat, core.DateTime]),
    [_getDaysBefore$]: dart.fnType(core.int, [core.DateTime]),
    [_getDaysAfter$]: dart.fnType(core.int, [core.DateTime])
  }));
  dart.setLibraryUri(calendar_core.CalendarCore, I[35]);
  dart.setFieldSignature(calendar_core.CalendarCore, () => ({
    __proto__: dart.getFields(calendar_core.CalendarCore.__proto__),
    focusedDay: dart.finalFieldType(dart.nullable(core.DateTime)),
    firstDay: dart.finalFieldType(core.DateTime),
    lastDay: dart.finalFieldType(core.DateTime),
    calendarFormat: dart.finalFieldType(utils$.CalendarFormat),
    dowBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime]))),
    weekNumberBuilder: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime]))),
    dayBuilder: dart.finalFieldType(dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, core.DateTime, core.DateTime])),
    sixWeekMonthsEnforced: dart.finalFieldType(core.bool),
    dowVisible: dart.finalFieldType(core.bool),
    weekNumbersVisible: dart.finalFieldType(core.bool),
    dowDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    rowDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    tableBorder: dart.finalFieldType(dart.nullable(table_border.TableBorder)),
    tablePadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsets)),
    dowHeight: dart.finalFieldType(dart.nullable(core.double)),
    rowHeight: dart.finalFieldType(dart.nullable(core.double)),
    constraints: dart.finalFieldType(box.BoxConstraints),
    previousIndex: dart.finalFieldType(dart.nullable(core.int)),
    startingDayOfWeek: dart.finalFieldType(utils$.StartingDayOfWeek),
    pageController: dart.finalFieldType(dart.nullable(page_view.PageController)),
    scrollPhysics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    onPageChanged: dart.finalFieldType(dart.fnType(dart.void, [core.int, core.DateTime]))
  }));
  scan.parseList = function parseList(T, scanner, parseElement) {
    let result = _interceptors.JSArray$(T).of([]);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
    }
    result[$add](parseElement());
    scanner.scan(scan.whitespace);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
      if (scanner.matches(",") || scanner.isDone) continue;
      result[$add](parseElement());
      scanner.scan(scan.whitespace);
    }
    return result;
  };
  scan.expectQuotedString = function expectQuotedString(scanner, opts) {
    let name = opts && 'name' in opts ? opts.name : "quoted string";
    scanner.expect(scan._quotedString, {name: name});
    let string = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
    return string[$substring](1, string.length - 1)[$replaceAllMapped](scan._quotedPair, dart.fn(match => dart.nullCheck(match._get(1)), T$.MatchToString()));
  };
  dart.defineLazy(scan, {
    /*scan.token*/get token() {
      return core.RegExp.new("[^()<>@,;:\"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+");
    },
    /*scan._lws*/get _lws() {
      return core.RegExp.new("(?:\\r\\n)?[ \\t]+");
    },
    /*scan._quotedString*/get _quotedString() {
      return core.RegExp.new("\"(?:[^\"\\x00-\\x1F\\x7F]|\\\\.)*\"");
    },
    /*scan._quotedPair*/get _quotedPair() {
      return core.RegExp.new("\\\\(.)");
    },
    /*scan.nonToken*/get nonToken() {
      return core.RegExp.new("[()<>@,;:\"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]");
    },
    /*scan.whitespace*/get whitespace() {
      return core.RegExp.new("(?:" + scan._lws.pattern + ")*");
    }
  }, false);
  utils$0.wrapFormatException = function wrapFormatException(T, name, value, body) {
    try {
      return body();
    } catch (e) {
      let ex = dart.getThrown(e);
      if (span_exception.SourceSpanFormatException.is(ex)) {
        let error = ex;
        dart.throw(new span_exception.SourceSpanFormatException.new("Invalid " + name + ": " + error.message, error.span, error.source));
      } else if (core.FormatException.is(ex)) {
        let error = ex;
        dart.throw(new core.FormatException.new("Invalid " + name + " \"" + value + "\": " + error.message, error.source, error.offset));
      } else
        throw e;
    }
  };
  var _decode = dart.privateName(decoder, "_decode");
  var _state = dart.privateName(decoder, "_state");
  decoder.ChunkedCodingDecoder = class ChunkedCodingDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new decoder.ChunkedCodingDecoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      let sink = new decoder._Sink.new(T$.StreamControllerOfListOfint().new());
      let output = sink[_decode](input, 0, input[$length]);
      if (sink[_state][$_equals](decoder._State.end)) return output;
      dart.throw(new core.FormatException.new("Input ended unexpectedly.", input, input[$length]));
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfint().as(sink);
      return new decoder._Sink.new(sink);
    }
  };
  (decoder.ChunkedCodingDecoder.__ = function() {
    decoder.ChunkedCodingDecoder.__proto__.new.call(this);
    ;
  }).prototype = decoder.ChunkedCodingDecoder.prototype;
  dart.addTypeTests(decoder.ChunkedCodingDecoder);
  dart.addTypeCaches(decoder.ChunkedCodingDecoder);
  dart.setMethodSignature(decoder.ChunkedCodingDecoder, () => ({
    __proto__: dart.getMethods(decoder.ChunkedCodingDecoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(decoder.ChunkedCodingDecoder, I[36]);
  var ___Sink__size = dart.privateName(decoder, "_#_Sink#_size");
  var _sink$ = dart.privateName(decoder, "_sink");
  var _size = dart.privateName(decoder, "_size");
  var _close = dart.privateName(decoder, "_close");
  var _digitForByte = dart.privateName(decoder, "_digitForByte");
  var _State__name = dart.privateName(decoder, "_State._name");
  decoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    get [_size]() {
      let t19;
      t19 = this[___Sink__size];
      return t19 == null ? dart.throw(new _internal.LateError.fieldNI("_size")) : t19;
    }
    set [_size](_size$35param) {
      this[___Sink__size] = _size$35param;
    }
    static ['_#new#tearOff'](_sink) {
      return new decoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      return this.addSlice(chunk, 0, chunk[$length], false);
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[$length]);
      let output = this[_decode](chunk, start, end);
      if (output[$isNotEmpty]) this[_sink$].add(output);
      if (isLast) this[_close](chunk, end);
    }
    close() {
      return this[_close]();
    }
    [_close](chunk = null, index = null) {
      if (!this[_state][$_equals](decoder._State.end)) {
        dart.throw(new core.FormatException.new("Input ended unexpectedly.", chunk, index));
      }
      this[_sink$].close();
    }
    [_decode](bytes, start, end) {
      function assertCurrentChar(char, name) {
        if (bytes[$_get](start) !== char) {
          dart.throw(new core.FormatException.new("Expected " + name + ".", bytes, start));
        }
      }
      dart.fn(assertCurrentChar, T$.intAndStringTovoid());
      let buffer = new typed_buffer.Uint8Buffer.new();
      while (start !== end) {
        switch (this[_state]) {
          case C[145] || CT.C145:
            {
              this[_size] = this[_digitForByte](bytes, start);
              this[_state] = decoder._State.size;
              start = start + 1;
              break;
            }
          case C[146] || CT.C146:
            {
              if (bytes[$_get](start) === 13) {
                this[_state] = decoder._State.sizeBeforeLF;
              } else {
                this[_size] = (this[_size] << 4 >>> 0) + this[_digitForByte](bytes, start);
              }
              start = start + 1;
              break;
            }
          case C[147] || CT.C147:
            {
              assertCurrentChar(10, "LF");
              this[_state] = this[_size] === 0 ? decoder._State.endBeforeCR : decoder._State.body;
              start = start + 1;
              break;
            }
          case C[148] || CT.C148:
            {
              let chunkEnd = math.min(core.int, end, start + this[_size]);
              buffer.addAll(bytes, start, chunkEnd);
              this[_size] = this[_size] - (chunkEnd - start);
              start = chunkEnd;
              if (this[_size] === 0) this[_state] = decoder._State.bodyBeforeCR;
              break;
            }
          case C[149] || CT.C149:
            {
              assertCurrentChar(13, "CR");
              this[_state] = decoder._State.bodyBeforeLF;
              start = start + 1;
              break;
            }
          case C[150] || CT.C150:
            {
              assertCurrentChar(10, "LF");
              this[_state] = decoder._State.boundary;
              start = start + 1;
              break;
            }
          case C[151] || CT.C151:
            {
              assertCurrentChar(13, "CR");
              this[_state] = decoder._State.endBeforeLF;
              start = start + 1;
              break;
            }
          case C[152] || CT.C152:
            {
              assertCurrentChar(10, "LF");
              this[_state] = decoder._State.end;
              start = start + 1;
              break;
            }
          case C[153] || CT.C153:
            {
              dart.throw(new core.FormatException.new("Expected no more data.", bytes, start));
            }
        }
      }
      return buffer.buffer[$asUint8List](0, buffer.length);
    }
    [_digitForByte](bytes, index) {
      let byte = bytes[$_get](index);
      let digit = (48 ^ byte) >>> 0;
      if (digit <= 9) {
        if (digit >= 0) return digit;
      } else {
        let letter = (32 | byte) >>> 0;
        if (97 <= letter && letter <= 102) return letter - 97 + 10;
      }
      dart.throw(new core.FormatException.new("Invalid hexadecimal byte 0x" + byte[$toRadixString](16)[$toUpperCase]() + ".", bytes, index));
    }
  };
  (decoder._Sink.new = function(_sink) {
    this[_state] = decoder._State.boundary;
    this[___Sink__size] = null;
    this[_sink$] = _sink;
    decoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = decoder._Sink.prototype;
  dart.addTypeTests(decoder._Sink);
  dart.addTypeCaches(decoder._Sink);
  dart.setMethodSignature(decoder._Sink, () => ({
    __proto__: dart.getMethods(decoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    [_close]: dart.fnType(dart.void, [], [dart.nullable(core.List$(core.int)), dart.nullable(core.int)]),
    [_decode]: dart.fnType(typed_data.Uint8List, [core.List$(core.int), core.int, core.int]),
    [_digitForByte]: dart.fnType(core.int, [core.List$(core.int), core.int])
  }));
  dart.setGetterSignature(decoder._Sink, () => ({
    __proto__: dart.getGetters(decoder._Sink.__proto__),
    [_size]: core.int
  }));
  dart.setSetterSignature(decoder._Sink, () => ({
    __proto__: dart.getSetters(decoder._Sink.__proto__),
    [_size]: core.int
  }));
  dart.setLibraryUri(decoder._Sink, I[36]);
  dart.setFieldSignature(decoder._Sink, () => ({
    __proto__: dart.getFields(decoder._Sink.__proto__),
    [_sink$]: dart.finalFieldType(core.Sink$(core.List$(core.int))),
    [_state]: dart.fieldType(decoder._State),
    [___Sink__size]: dart.fieldType(dart.nullable(core.int))
  }));
  var _name$ = dart.privateName(decoder, "_name");
  const _name$0 = _State__name;
  decoder._State = class _State extends core.Object {
    get [_name$]() {
      return this[_name$0];
    }
    set [_name$](value) {
      super[_name$] = value;
    }
    static ['_#_#tearOff'](_name) {
      return new decoder._State.__(_name);
    }
    toString() {
      return this[_name$];
    }
  };
  (decoder._State.__ = function(_name) {
    this[_name$0] = _name;
    ;
  }).prototype = decoder._State.prototype;
  dart.addTypeTests(decoder._State);
  dart.addTypeCaches(decoder._State);
  dart.setLibraryUri(decoder._State, I[36]);
  dart.setFieldSignature(decoder._State, () => ({
    __proto__: dart.getFields(decoder._State.__proto__),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(decoder._State, () => ['boundary', 'size', 'sizeBeforeLF', 'body', 'bodyBeforeCR', 'bodyBeforeLF', 'endBeforeCR', 'endBeforeLF', 'end']);
  dart.defineExtensionMethods(decoder._State, ['toString']);
  dart.defineLazy(decoder._State, {
    /*decoder._State.boundary*/get boundary() {
      return C[145] || CT.C145;
    },
    /*decoder._State.size*/get size() {
      return C[146] || CT.C146;
    },
    /*decoder._State.sizeBeforeLF*/get sizeBeforeLF() {
      return C[147] || CT.C147;
    },
    /*decoder._State.body*/get body() {
      return C[148] || CT.C148;
    },
    /*decoder._State.bodyBeforeCR*/get bodyBeforeCR() {
      return C[149] || CT.C149;
    },
    /*decoder._State.bodyBeforeLF*/get bodyBeforeLF() {
      return C[150] || CT.C150;
    },
    /*decoder._State.endBeforeCR*/get endBeforeCR() {
      return C[151] || CT.C151;
    },
    /*decoder._State.endBeforeLF*/get endBeforeLF() {
      return C[152] || CT.C152;
    },
    /*decoder._State.end*/get end() {
      return C[153] || CT.C153;
    }
  }, false);
  dart.defineLazy(decoder, {
    /*decoder.chunkedCodingDecoder*/get chunkedCodingDecoder() {
      return C[154] || CT.C154;
    }
  }, false);
  encoder.ChunkedCodingEncoder = class ChunkedCodingEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new encoder.ChunkedCodingEncoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      return encoder._convert(input, 0, input[$length], {isLast: true});
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfint().as(sink);
      return new encoder._Sink.new(sink);
    }
  };
  (encoder.ChunkedCodingEncoder.__ = function() {
    encoder.ChunkedCodingEncoder.__proto__.new.call(this);
    ;
  }).prototype = encoder.ChunkedCodingEncoder.prototype;
  dart.addTypeTests(encoder.ChunkedCodingEncoder);
  dart.addTypeCaches(encoder.ChunkedCodingEncoder);
  dart.setMethodSignature(encoder.ChunkedCodingEncoder, () => ({
    __proto__: dart.getMethods(encoder.ChunkedCodingEncoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(encoder.ChunkedCodingEncoder, I[37]);
  var _sink$0 = dart.privateName(encoder, "_sink");
  encoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    static ['_#new#tearOff'](_sink) {
      return new encoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      this[_sink$0].add(encoder._convert(chunk, 0, chunk[$length]));
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[$length]);
      this[_sink$0].add(encoder._convert(chunk, start, end, {isLast: isLast}));
      if (isLast) this[_sink$0].close();
    }
    close() {
      this[_sink$0].add(encoder._doneChunk);
      this[_sink$0].close();
    }
  };
  (encoder._Sink.new = function(_sink) {
    this[_sink$0] = _sink;
    encoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = encoder._Sink.prototype;
  dart.addTypeTests(encoder._Sink);
  dart.addTypeCaches(encoder._Sink);
  dart.setMethodSignature(encoder._Sink, () => ({
    __proto__: dart.getMethods(encoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(encoder._Sink, I[37]);
  dart.setFieldSignature(encoder._Sink, () => ({
    __proto__: dart.getFields(encoder._Sink.__proto__),
    [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
  }));
  encoder._convert = function _convert(bytes, start, end, opts) {
    let t19, t19$, t19$0, t19$1;
    let isLast = opts && 'isLast' in opts ? opts.isLast : false;
    if (end === start) return isLast ? encoder._doneChunk : C[155] || CT.C155;
    let size = end - start;
    let sizeInHex = size[$toRadixString](16);
    let footerSize = isLast ? encoder._doneChunk[$length] : 0;
    let list = _native_typed_data.NativeUint8List.new(sizeInHex.length + 4 + size + footerSize);
    list[$setRange](0, sizeInHex.length, sizeInHex[$codeUnits]);
    let cursor = sizeInHex.length;
    list[$_set]((t19 = cursor, cursor = t19 + 1, t19), 13);
    list[$_set]((t19$ = cursor, cursor = t19$ + 1, t19$), 10);
    list[$setRange](cursor, cursor + end - start, bytes, start);
    cursor = cursor + (end - start);
    list[$_set]((t19$0 = cursor, cursor = t19$0 + 1, t19$0), 13);
    list[$_set]((t19$1 = cursor, cursor = t19$1 + 1, t19$1), 10);
    if (isLast) {
      list[$setRange](list[$length] - footerSize, list[$length], encoder._doneChunk);
    }
    return list;
  };
  dart.defineLazy(encoder, {
    /*encoder.chunkedCodingEncoder*/get chunkedCodingEncoder() {
      return C[156] || CT.C156;
    },
    /*encoder._doneChunk*/get _doneChunk() {
      return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([48, 13, 10, 13, 10]));
    }
  }, false);
  var icon$ = dart.privateName(custom_icon_button, "CustomIconButton.icon");
  var onTap$0 = dart.privateName(custom_icon_button, "CustomIconButton.onTap");
  var margin$ = dart.privateName(custom_icon_button, "CustomIconButton.margin");
  var padding$ = dart.privateName(custom_icon_button, "CustomIconButton.padding");
  custom_icon_button.CustomIconButton = class CustomIconButton extends framework.StatelessWidget {
    get icon() {
      return this[icon$];
    }
    set icon(value) {
      super.icon = value;
    }
    get onTap() {
      return this[onTap$0];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get margin() {
      return this[margin$];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let margin = opts && 'margin' in opts ? opts.margin : C[33] || CT.C33;
      let padding = opts && 'padding' in opts ? opts.padding : C[19] || CT.C19;
      return new custom_icon_button.CustomIconButton.new({key: key, icon: icon, onTap: onTap, margin: margin, padding: padding});
    }
    build(context) {
      let platform = theme.Theme.of(context).platform;
      return new basic.Padding.new({padding: this.margin, child: false && (platform === platform$.TargetPlatform.iOS || platform === platform$.TargetPlatform.macOS) ? new button.CupertinoButton.new({onPressed: this.onTap, padding: this.padding, child: this.icon}) : new ink_well.InkWell.new({onTap: this.onTap, borderRadius: new border_radius.BorderRadius.circular(100), child: new basic.Padding.new({padding: this.padding, child: this.icon})})});
    }
  };
  (custom_icon_button.CustomIconButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let margin = opts && 'margin' in opts ? opts.margin : C[33] || CT.C33;
    let padding = opts && 'padding' in opts ? opts.padding : C[19] || CT.C19;
    this[icon$] = icon;
    this[onTap$0] = onTap;
    this[margin$] = margin;
    this[padding$] = padding;
    custom_icon_button.CustomIconButton.__proto__.new.call(this, {key: key});
    ;
  }).prototype = custom_icon_button.CustomIconButton.prototype;
  dart.addTypeTests(custom_icon_button.CustomIconButton);
  dart.addTypeCaches(custom_icon_button.CustomIconButton);
  dart.setMethodSignature(custom_icon_button.CustomIconButton, () => ({
    __proto__: dart.getMethods(custom_icon_button.CustomIconButton.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(custom_icon_button.CustomIconButton, I[38]);
  dart.setFieldSignature(custom_icon_button.CustomIconButton, () => ({
    __proto__: dart.getFields(custom_icon_button.CustomIconButton.__proto__),
    icon: dart.finalFieldType(framework.Widget),
    onTap: dart.finalFieldType(dart.fnType(dart.void, [])),
    margin: dart.finalFieldType(edge_insets.EdgeInsets),
    padding: dart.finalFieldType(edge_insets.EdgeInsets)
  }));
  var calendarFormat$3 = dart.privateName(format_button, "FormatButton.calendarFormat");
  var onTap$1 = dart.privateName(format_button, "FormatButton.onTap");
  var textStyle$ = dart.privateName(format_button, "FormatButton.textStyle");
  var decoration$1 = dart.privateName(format_button, "FormatButton.decoration");
  var padding$0 = dart.privateName(format_button, "FormatButton.padding");
  var showsNextFormat$ = dart.privateName(format_button, "FormatButton.showsNextFormat");
  var availableCalendarFormats$2 = dart.privateName(format_button, "FormatButton.availableCalendarFormats");
  var _formatButtonText = dart.privateName(format_button, "_formatButtonText");
  var _nextFormat = dart.privateName(format_button, "_nextFormat");
  format_button.FormatButton = class FormatButton extends framework.StatelessWidget {
    get calendarFormat() {
      return this[calendarFormat$3];
    }
    set calendarFormat(value) {
      super.calendarFormat = value;
    }
    get onTap() {
      return this[onTap$1];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get decoration() {
      return this[decoration$1];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get padding() {
      return this[padding$0];
    }
    set padding(value) {
      super.padding = value;
    }
    get showsNextFormat() {
      return this[showsNextFormat$];
    }
    set showsNextFormat(value) {
      super.showsNextFormat = value;
    }
    get availableCalendarFormats() {
      return this[availableCalendarFormats$2];
    }
    set availableCalendarFormats(value) {
      super.availableCalendarFormats = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let showsNextFormat = opts && 'showsNextFormat' in opts ? opts.showsNextFormat : null;
      let availableCalendarFormats = opts && 'availableCalendarFormats' in opts ? opts.availableCalendarFormats : null;
      return new format_button.FormatButton.new({key: key, calendarFormat: calendarFormat, onTap: onTap, textStyle: textStyle, decoration: decoration, padding: padding, showsNextFormat: showsNextFormat, availableCalendarFormats: availableCalendarFormats});
    }
    build(context) {
      let t19;
      let child = new container.Container.new({decoration: this.decoration, padding: this.padding, child: new text$.Text.new(this[_formatButtonText], {style: this.textStyle})});
      let platform = theme.Theme.of(context).platform;
      return false && (platform === platform$.TargetPlatform.iOS || platform === platform$.TargetPlatform.macOS) ? new button.CupertinoButton.new({onPressed: dart.fn(() => {
          let t19;
          t19 = this[_nextFormat]();
          return this.onTap(t19);
        }, T$.VoidTovoid()), padding: edge_insets.EdgeInsets.zero, child: child}) : new ink_well.InkWell.new({borderRadius: (t19 = this.decoration.borderRadius, t19 == null ? null : t19.resolve(basic.Directionality.of(context))), onTap: dart.fn(() => {
          let t19;
          t19 = this[_nextFormat]();
          return this.onTap(t19);
        }, T$.VoidTovoid()), child: child});
    }
    get [_formatButtonText]() {
      return this.showsNextFormat ? dart.nullCheck(this.availableCalendarFormats[$_get](this[_nextFormat]())) : dart.nullCheck(this.availableCalendarFormats[$_get](this.calendarFormat));
    }
    [_nextFormat]() {
      let formats = this.availableCalendarFormats[$keys][$toList]();
      let id = formats[$indexOf](this.calendarFormat);
      id = (id + 1)[$modulo](formats[$length]);
      return formats[$_get](id);
    }
  };
  (format_button.FormatButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let calendarFormat = opts && 'calendarFormat' in opts ? opts.calendarFormat : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let showsNextFormat = opts && 'showsNextFormat' in opts ? opts.showsNextFormat : null;
    let availableCalendarFormats = opts && 'availableCalendarFormats' in opts ? opts.availableCalendarFormats : null;
    this[calendarFormat$3] = calendarFormat;
    this[onTap$1] = onTap;
    this[textStyle$] = textStyle;
    this[decoration$1] = decoration;
    this[padding$0] = padding;
    this[showsNextFormat$] = showsNextFormat;
    this[availableCalendarFormats$2] = availableCalendarFormats;
    format_button.FormatButton.__proto__.new.call(this, {key: key});
    ;
  }).prototype = format_button.FormatButton.prototype;
  dart.addTypeTests(format_button.FormatButton);
  dart.addTypeCaches(format_button.FormatButton);
  dart.setMethodSignature(format_button.FormatButton, () => ({
    __proto__: dart.getMethods(format_button.FormatButton.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_nextFormat]: dart.fnType(utils$.CalendarFormat, [])
  }));
  dart.setGetterSignature(format_button.FormatButton, () => ({
    __proto__: dart.getGetters(format_button.FormatButton.__proto__),
    [_formatButtonText]: core.String
  }));
  dart.setLibraryUri(format_button.FormatButton, I[39]);
  dart.setFieldSignature(format_button.FormatButton, () => ({
    __proto__: dart.getFields(format_button.FormatButton.__proto__),
    calendarFormat: dart.finalFieldType(utils$.CalendarFormat),
    onTap: dart.finalFieldType(dart.fnType(dart.void, [utils$.CalendarFormat])),
    textStyle: dart.finalFieldType(text_style.TextStyle),
    decoration: dart.finalFieldType(box_decoration.BoxDecoration),
    padding: dart.finalFieldType(edge_insets.EdgeInsets),
    showsNextFormat: dart.finalFieldType(core.bool),
    availableCalendarFormats: dart.finalFieldType(core.Map$(utils$.CalendarFormat, core.String))
  }));
  var dowBuilder$2 = dart.privateName(calendar_page, "CalendarPage.dowBuilder");
  var dayBuilder$1 = dart.privateName(calendar_page, "CalendarPage.dayBuilder");
  var weekNumberBuilder$2 = dart.privateName(calendar_page, "CalendarPage.weekNumberBuilder");
  var visibleDays$ = dart.privateName(calendar_page, "CalendarPage.visibleDays");
  var dowDecoration$1 = dart.privateName(calendar_page, "CalendarPage.dowDecoration");
  var rowDecoration$2 = dart.privateName(calendar_page, "CalendarPage.rowDecoration");
  var tableBorder$2 = dart.privateName(calendar_page, "CalendarPage.tableBorder");
  var tablePadding$2 = dart.privateName(calendar_page, "CalendarPage.tablePadding");
  var dowVisible$1 = dart.privateName(calendar_page, "CalendarPage.dowVisible");
  var weekNumberVisible$ = dart.privateName(calendar_page, "CalendarPage.weekNumberVisible");
  var dowHeight$1 = dart.privateName(calendar_page, "CalendarPage.dowHeight");
  var _buildWeekNumbers = dart.privateName(calendar_page, "_buildWeekNumbers");
  var _buildDaysOfWeek = dart.privateName(calendar_page, "_buildDaysOfWeek");
  var _buildCalendarDays = dart.privateName(calendar_page, "_buildCalendarDays");
  calendar_page.CalendarPage = class CalendarPage extends framework.StatelessWidget {
    get dowBuilder() {
      return this[dowBuilder$2];
    }
    set dowBuilder(value) {
      super.dowBuilder = value;
    }
    get dayBuilder() {
      return this[dayBuilder$1];
    }
    set dayBuilder(value) {
      super.dayBuilder = value;
    }
    get weekNumberBuilder() {
      return this[weekNumberBuilder$2];
    }
    set weekNumberBuilder(value) {
      super.weekNumberBuilder = value;
    }
    get visibleDays() {
      return this[visibleDays$];
    }
    set visibleDays(value) {
      super.visibleDays = value;
    }
    get dowDecoration() {
      return this[dowDecoration$1];
    }
    set dowDecoration(value) {
      super.dowDecoration = value;
    }
    get rowDecoration() {
      return this[rowDecoration$2];
    }
    set rowDecoration(value) {
      super.rowDecoration = value;
    }
    get tableBorder() {
      return this[tableBorder$2];
    }
    set tableBorder(value) {
      super.tableBorder = value;
    }
    get tablePadding() {
      return this[tablePadding$2];
    }
    set tablePadding(value) {
      super.tablePadding = value;
    }
    get dowVisible() {
      return this[dowVisible$1];
    }
    set dowVisible(value) {
      super.dowVisible = value;
    }
    get weekNumberVisible() {
      return this[weekNumberVisible$];
    }
    set weekNumberVisible(value) {
      super.weekNumberVisible = value;
    }
    get dowHeight() {
      return this[dowHeight$1];
    }
    set dowHeight(value) {
      super.dowHeight = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let visibleDays = opts && 'visibleDays' in opts ? opts.visibleDays : null;
      let dowBuilder = opts && 'dowBuilder' in opts ? opts.dowBuilder : null;
      let dayBuilder = opts && 'dayBuilder' in opts ? opts.dayBuilder : null;
      let weekNumberBuilder = opts && 'weekNumberBuilder' in opts ? opts.weekNumberBuilder : null;
      let dowDecoration = opts && 'dowDecoration' in opts ? opts.dowDecoration : null;
      let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
      let tableBorder = opts && 'tableBorder' in opts ? opts.tableBorder : null;
      let tablePadding = opts && 'tablePadding' in opts ? opts.tablePadding : null;
      let dowVisible = opts && 'dowVisible' in opts ? opts.dowVisible : true;
      let weekNumberVisible = opts && 'weekNumberVisible' in opts ? opts.weekNumberVisible : false;
      let dowHeight = opts && 'dowHeight' in opts ? opts.dowHeight : null;
      return new calendar_page.CalendarPage.new({key: key, visibleDays: visibleDays, dowBuilder: dowBuilder, dayBuilder: dayBuilder, weekNumberBuilder: weekNumberBuilder, dowDecoration: dowDecoration, rowDecoration: rowDecoration, tableBorder: tableBorder, tablePadding: tablePadding, dowVisible: dowVisible, weekNumberVisible: weekNumberVisible, dowHeight: dowHeight});
    }
    build(context) {
      let t19;
      return new basic.Padding.new({padding: (t19 = this.tablePadding, t19 == null ? edge_insets.EdgeInsets.zero : t19), child: new basic.Row.new({crossAxisAlignment: flex.CrossAxisAlignment.stretch, children: (() => {
            let t19 = T$.JSArrayOfWidget().of([]);
            if (this.weekNumberVisible) t19.push(this[_buildWeekNumbers](context));
            t19.push(new basic.Expanded.new({child: new table.Table.new({border: this.tableBorder, children: (() => {
                  let t20 = T$.JSArrayOfTableRow().of([]);
                  if (this.dowVisible) t20.push(this[_buildDaysOfWeek](context));
                  t20[$addAll](this[_buildCalendarDays](context));
                  return t20;
                })()})}));
            return t19;
          })()})});
    }
    [_buildWeekNumbers](context) {
      let t22;
      let rowAmount = (this.visibleDays[$length] / 7)[$truncate]();
      return new basic.Column.new({children: (() => {
          let t21 = T$.JSArrayOfWidget().of([]);
          if (this.dowVisible) t21.push(new basic.SizedBox.new({height: (t22 = this.dowHeight, t22 == null ? 0 : t22)}));
          t21[$addAll](T$.ListOfint().generate(rowAmount, dart.fn(index => index * 7, T$.intToint()))[$map](basic.Expanded, dart.fn(index => new basic.Expanded.new({child: dart.nullCheck(this.weekNumberBuilder)(context, this.visibleDays[$_get](index))}), T$.intToExpanded()))[$toList]());
          return t21;
        })()});
    }
    [_buildDaysOfWeek](context) {
      return new table.TableRow.new({decoration: this.dowDecoration, children: T$.ListOfWidget().generate(7, dart.fn(index => dart.nullCheck(this.dowBuilder)(context, this.visibleDays[$_get](index)), T$.intToWidget()))[$toList]()});
    }
    [_buildCalendarDays](context) {
      let rowAmount = (this.visibleDays[$length] / 7)[$truncate]();
      return T$.ListOfint().generate(rowAmount, dart.fn(index => index * 7, T$.intToint()))[$map](table.TableRow, dart.fn(index => new table.TableRow.new({decoration: this.rowDecoration, children: T$.ListOfWidget().generate(7, dart.fn(id => {
          let t23, t22;
          t22 = context;
          t23 = this.visibleDays[$_get](index + id);
          return this.dayBuilder(t22, t23);
        }, T$.intToWidget()))}), T$.intToTableRow()))[$toList]();
    }
  };
  (calendar_page.CalendarPage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let visibleDays = opts && 'visibleDays' in opts ? opts.visibleDays : null;
    let dowBuilder = opts && 'dowBuilder' in opts ? opts.dowBuilder : null;
    let dayBuilder = opts && 'dayBuilder' in opts ? opts.dayBuilder : null;
    let weekNumberBuilder = opts && 'weekNumberBuilder' in opts ? opts.weekNumberBuilder : null;
    let dowDecoration = opts && 'dowDecoration' in opts ? opts.dowDecoration : null;
    let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
    let tableBorder = opts && 'tableBorder' in opts ? opts.tableBorder : null;
    let tablePadding = opts && 'tablePadding' in opts ? opts.tablePadding : null;
    let dowVisible = opts && 'dowVisible' in opts ? opts.dowVisible : true;
    let weekNumberVisible = opts && 'weekNumberVisible' in opts ? opts.weekNumberVisible : false;
    let dowHeight = opts && 'dowHeight' in opts ? opts.dowHeight : null;
    this[visibleDays$] = visibleDays;
    this[dowBuilder$2] = dowBuilder;
    this[dayBuilder$1] = dayBuilder;
    this[weekNumberBuilder$2] = weekNumberBuilder;
    this[dowDecoration$1] = dowDecoration;
    this[rowDecoration$2] = rowDecoration;
    this[tableBorder$2] = tableBorder;
    this[tablePadding$2] = tablePadding;
    this[dowVisible$1] = dowVisible;
    this[weekNumberVisible$] = weekNumberVisible;
    this[dowHeight$1] = dowHeight;
    if (!(!dowVisible || dowHeight != null && dowBuilder != null)) dart.assertFailed(null, I[40], 32, 16, "!dowVisible || (dowHeight != null && dowBuilder != null)");
    if (!(!weekNumberVisible || weekNumberBuilder != null)) dart.assertFailed(null, I[40], 33, 16, "!weekNumberVisible || weekNumberBuilder != null");
    calendar_page.CalendarPage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = calendar_page.CalendarPage.prototype;
  dart.addTypeTests(calendar_page.CalendarPage);
  dart.addTypeCaches(calendar_page.CalendarPage);
  dart.setMethodSignature(calendar_page.CalendarPage, () => ({
    __proto__: dart.getMethods(calendar_page.CalendarPage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_buildWeekNumbers]: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_buildDaysOfWeek]: dart.fnType(table.TableRow, [framework.BuildContext]),
    [_buildCalendarDays]: dart.fnType(core.List$(table.TableRow), [framework.BuildContext])
  }));
  dart.setLibraryUri(calendar_page.CalendarPage, I[41]);
  dart.setFieldSignature(calendar_page.CalendarPage, () => ({
    __proto__: dart.getFields(calendar_page.CalendarPage.__proto__),
    dowBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, core.DateTime]))),
    dayBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, core.DateTime])),
    weekNumberBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, core.DateTime]))),
    visibleDays: dart.finalFieldType(core.List$(core.DateTime)),
    dowDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    rowDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    tableBorder: dart.finalFieldType(dart.nullable(table_border.TableBorder)),
    tablePadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsets)),
    dowVisible: dart.finalFieldType(core.bool),
    weekNumberVisible: dart.finalFieldType(core.bool),
    dowHeight: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.defineLazy(charcodes, {
    /*charcodes.$lf*/get $lf() {
      return 10;
    },
    /*charcodes.$cr*/get $cr() {
      return 13;
    },
    /*charcodes.$0*/get $0() {
      return 48;
    },
    /*charcodes.$1*/get $1() {
      return 49;
    },
    /*charcodes.$3*/get $3() {
      return 51;
    },
    /*charcodes.$4*/get $4() {
      return 52;
    },
    /*charcodes.$7*/get $7() {
      return 55;
    },
    /*charcodes.$A*/get $A() {
      return 65;
    },
    /*charcodes.$q*/get $q() {
      return 113;
    },
    /*charcodes.$a*/get $a() {
      return 97;
    },
    /*charcodes.$f*/get $f() {
      return 102;
    }
  }, false);
  var _table = dart.privateName(typed_queue, "_TypedQueue._table");
  var _head = dart.privateName(typed_queue, "_TypedQueue._head");
  var _tail = dart.privateName(typed_queue, "_TypedQueue._tail");
  var _table$ = dart.privateName(typed_queue, "_table");
  var _head$ = dart.privateName(typed_queue, "_head");
  var _tail$ = dart.privateName(typed_queue, "_tail");
  var _createBuffer = dart.privateName(typed_queue, "_createBuffer");
  var _createList = dart.privateName(typed_queue, "_createList");
  var _writeToList = dart.privateName(typed_queue, "_writeToList");
  var _growAtCapacity = dart.privateName(typed_queue, "_growAtCapacity");
  var _growTo = dart.privateName(typed_queue, "_growTo");
  var _defaultValue = dart.privateName(typed_queue, "_defaultValue");
  const _is__TypedQueue_default = Symbol('_is__TypedQueue_default');
  typed_queue._TypedQueue$ = dart.generic((E, L) => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    class _TypedQueue extends Object_ListMixin$36 {
      get [_table$]() {
        return this[_table];
      }
      set [_table$](value) {
        this[_table] = value;
      }
      get [_head$]() {
        return this[_head];
      }
      set [_head$](value) {
        this[_head] = value;
      }
      get [_tail$]() {
        return this[_tail];
      }
      set [_tail$](value) {
        this[_tail] = value;
      }
      get length() {
        return (this[_tail$] - this[_head$] & this[_table$][$length] - 1) >>> 0;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        let list = growable ? this[_createBuffer](this.length) : this[_createList](this.length);
        this[_writeToList](list);
        return list;
      }
      cast(T) {
        if (queue_list.QueueList$(T).is(this)) return queue_list.QueueList$(T).as(this);
        dart.throw(new core.UnsupportedError.new(dart.str(this) + " cannot be cast to the desired type."));
      }
      retype(T) {
        return this.cast(T);
      }
      addLast(value) {
        E.as(value);
        this[_table$][$_set](this[_tail$], value);
        this[_tail$] = (this[_tail$] + 1 & this[_table$][$length] - 1) >>> 0;
        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();
      }
      addFirst(value) {
        E.as(value);
        this[_head$] = (this[_head$] - 1 & this[_table$][$length] - 1) >>> 0;
        this[_table$][$_set](this[_head$], value);
        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();
      }
      removeFirst() {
        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new("No element"));
        let result = this[_table$][$_get](this[_head$]);
        this[_head$] = (this[_head$] + 1 & this[_table$][$length] - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new("No element"));
        this[_tail$] = (this[_tail$] - 1 & this[_table$][$length] - 1) >>> 0;
        return this[_table$][$_get](this[_tail$]);
      }
      add(value) {
        E.as(value);
        return this.addLast(value);
      }
      set length(value) {
        core.RangeError.checkNotNegative(value, "length");
        let delta = value - this.length;
        if (delta >= 0) {
          let needsToGrow = this[_table$][$length] <= value;
          if (needsToGrow) this[_growTo](value);
          this[_tail$] = (this[_tail$] + delta & this[_table$][$length] - 1) >>> 0;
          if (!needsToGrow) this.fillRange(value - delta, value, this[_defaultValue]);
        } else {
          this.removeRange(value, this.length);
        }
      }
      _get(index) {
        core.RangeError.checkValidIndex(index, this, null, this.length);
        return this[_table$][$_get]((this[_head$] + index & this[_table$][$length] - 1) >>> 0);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        core.RangeError.checkValidIndex(index, this);
        this[_table$][$_set]((this[_head$] + index & this[_table$][$length] - 1) >>> 0, value);
        return value$;
      }
      removeRange(start, end) {
        let length = this.length;
        core.RangeError.checkValidRange(start, end, length);
        if (start === 0) {
          this[_head$] = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let elementsAfter = length - end;
        if (elementsAfter === 0) {
          this[_tail$] = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let removedElements = end - start;
        if (start < elementsAfter) {
          this.setRange(removedElements, end, this);
          this[_head$] = (this[_head$] + removedElements & this[_table$][$length] - 1) >>> 0;
        } else {
          this.setRange(start, length - removedElements, this, end);
          this[_tail$] = (this[_tail$] - removedElements & this[_table$][$length] - 1) >>> 0;
        }
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        if (start === end) return;
        let targetStart = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
        let targetEnd = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
        let targetIsContiguous = targetStart < targetEnd;
        if (iterable === this) {
          let sourceStart = (this[_head$] + skipCount & this[_table$][$length] - 1) >>> 0;
          let sourceEnd = (sourceStart + (end - start) & this[_table$][$length] - 1) >>> 0;
          if (sourceStart === targetStart) return;
          let sourceIsContiguous = sourceStart < sourceEnd;
          if (targetIsContiguous && sourceIsContiguous) {
            this[_table$][$setRange](targetStart, targetEnd, this[_table$], sourceStart);
          } else if (!targetIsContiguous && !sourceIsContiguous) {
            if (sourceStart > targetStart) {
              let startGap = sourceStart - targetStart;
              let firstEnd = this[_table$][$length] - startGap;
              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);
              this[_table$][$setRange](firstEnd, this[_table$][$length], this[_table$]);
              this[_table$][$setRange](0, targetEnd, this[_table$], startGap);
            } else if (sourceEnd < targetEnd) {
              let firstStart = targetEnd - sourceEnd;
              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);
              this[_table$][$setRange](0, firstStart, this[_table$], this[_table$][$length] - firstStart);
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
            }
          } else if (sourceStart < targetEnd) {
            if (sourceIsContiguous) {
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));
            } else {
              let firstEnd = this[_table$][$length] - sourceStart;
              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);
              this[_table$][$setRange](firstEnd, targetEnd, this[_table$]);
            }
          } else {
            if (sourceIsContiguous) {
              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
            } else {
              let firstStart = targetEnd - sourceEnd;
              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);
              this[_table$][$setRange](targetStart, firstStart, this[_table$], sourceStart);
            }
          }
        } else if (targetIsContiguous) {
          this[_table$][$setRange](targetStart, targetEnd, iterable, skipCount);
        } else if (__t$ListOfE().is(iterable)) {
          this[_table$][$setRange](targetStart, this[_table$][$length], iterable, skipCount);
          this[_table$][$setRange](0, targetEnd, iterable, skipCount + (this[_table$][$length] - targetStart));
        } else {
          super.setRange(start, end, iterable, skipCount);
        }
      }
      fillRange(start, end, value = null) {
        __t$EN().as(value);
        let startInTable = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
        let endInTable = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          this[_table$][$fillRange](startInTable, endInTable, value);
        } else {
          this[_table$][$fillRange](startInTable, this[_table$][$length], value);
          this[_table$][$fillRange](0, endInTable, value);
        }
      }
      sublist(start, end = null) {
        let length = this.length;
        let nonNullEnd = core.RangeError.checkValidRange(start, end, length);
        let list = this[_createList](nonNullEnd - start);
        this[_writeToList](list, start, nonNullEnd);
        return list;
      }
      [_writeToList](target, start = null, end = null) {
        start == null ? start = 0 : null;
        end == null ? end = this.length : null;
        if (!(target[$length] >= dart.notNull(end) - dart.notNull(start))) dart.assertFailed(null, I[42], 278, 12, "target.length >= end - start");
        if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[42], 279, 12, "start <= end");
        let elementsToWrite = dart.notNull(end) - dart.notNull(start);
        let startInTable = (this[_head$] + dart.notNull(start) & this[_table$][$length] - 1) >>> 0;
        let endInTable = (this[_head$] + dart.notNull(end) & this[_table$][$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          target[$setRange](0, elementsToWrite, this[_table$], startInTable);
        } else {
          let firstPartSize = this[_table$][$length] - startInTable;
          target[$setRange](0, firstPartSize, this[_table$], startInTable);
          target[$setRange](firstPartSize, firstPartSize + endInTable, this[_table$], 0);
        }
        return elementsToWrite;
      }
      [_growAtCapacity]() {
        if (!(this[_head$] === this[_tail$])) dart.assertFailed(null, I[42], 297, 12, "_head == _tail");
        let newTable = this[_createList](this[_table$][$length] * 2);
        let partitionPoint = this[_table$][$length] - this[_head$];
        newTable[$setRange](0, partitionPoint, this[_table$], this[_head$]);
        if (partitionPoint !== this[_table$][$length]) {
          newTable[$setRange](partitionPoint, this[_table$][$length], this[_table$]);
        }
        this[_head$] = 0;
        this[_tail$] = this[_table$][$length];
        this[_table$] = newTable;
      }
      [_growTo](newElementCount) {
        if (!(newElementCount >= this.length)) dart.assertFailed(null, I[42], 316, 12, "newElementCount >= length");
        newElementCount = newElementCount + newElementCount[$rightShift](1);
        let newTable = this[_createList](typed_queue._nextPowerOf2(newElementCount));
        this[_tail$] = this[_writeToList](newTable);
        this[_table$] = newTable;
        this[_head$] = 0;
      }
    }
    (_TypedQueue.new = function(table) {
      this[_table] = L.as(table);
      this[_head] = 0;
      this[_tail] = 0;
      ;
    }).prototype = _TypedQueue.prototype;
    dart.addTypeTests(_TypedQueue);
    _TypedQueue.prototype[_is__TypedQueue_default] = true;
    dart.addTypeCaches(_TypedQueue);
    dart.setMethodSignature(_TypedQueue, () => ({
      __proto__: dart.getMethods(_TypedQueue.__proto__),
      cast: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      sublist: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [$sublist]: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [_writeToList]: dart.fnType(core.int, [core.List$(E)], [dart.nullable(core.int), dart.nullable(core.int)]),
      [_growAtCapacity]: dart.fnType(dart.void, []),
      [_growTo]: dart.fnType(dart.void, [core.int])
    }));
    dart.setGetterSignature(_TypedQueue, () => ({
      __proto__: dart.getGetters(_TypedQueue.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(_TypedQueue, () => ({
      __proto__: dart.getSetters(_TypedQueue.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(_TypedQueue, I[43]);
    dart.setFieldSignature(_TypedQueue, () => ({
      __proto__: dart.getFields(_TypedQueue.__proto__),
      [_table$]: dart.fieldType(L),
      [_head$]: dart.fieldType(core.int),
      [_tail$]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_TypedQueue, [
      'toList',
      'cast',
      'removeLast',
      'add',
      '_get',
      '_set',
      'removeRange',
      'setRange',
      'fillRange',
      'sublist'
    ]);
    dart.defineExtensionAccessors(_TypedQueue, ['length']);
    return _TypedQueue;
  });
  typed_queue._TypedQueue = typed_queue._TypedQueue$();
  dart.addTypeTests(typed_queue._TypedQueue, _is__TypedQueue_default);
  const _is__IntQueue_default = Symbol('_is__IntQueue_default');
  typed_queue._IntQueue$ = dart.generic(L => {
    class _IntQueue extends typed_queue._TypedQueue$(core.int, L) {
      get [_defaultValue]() {
        return 0;
      }
    }
    (_IntQueue.new = function(queue) {
      _IntQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _IntQueue.prototype;
    dart.addTypeTests(_IntQueue);
    _IntQueue.prototype[_is__IntQueue_default] = true;
    dart.addTypeCaches(_IntQueue);
    dart.setGetterSignature(_IntQueue, () => ({
      __proto__: dart.getGetters(_IntQueue.__proto__),
      [_defaultValue]: core.int
    }));
    dart.setLibraryUri(_IntQueue, I[43]);
    return _IntQueue;
  });
  typed_queue._IntQueue = typed_queue._IntQueue$();
  dart.addTypeTests(typed_queue._IntQueue, _is__IntQueue_default);
  const _is__FloatQueue_default = Symbol('_is__FloatQueue_default');
  typed_queue._FloatQueue$ = dart.generic(L => {
    class _FloatQueue extends typed_queue._TypedQueue$(core.double, L) {
      get [_defaultValue]() {
        return 0;
      }
    }
    (_FloatQueue.new = function(queue) {
      _FloatQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _FloatQueue.prototype;
    dart.addTypeTests(_FloatQueue);
    _FloatQueue.prototype[_is__FloatQueue_default] = true;
    dart.addTypeCaches(_FloatQueue);
    dart.setGetterSignature(_FloatQueue, () => ({
      __proto__: dart.getGetters(_FloatQueue.__proto__),
      [_defaultValue]: core.double
    }));
    dart.setLibraryUri(_FloatQueue, I[43]);
    return _FloatQueue;
  });
  typed_queue._FloatQueue = typed_queue._FloatQueue$();
  dart.addTypeTests(typed_queue._FloatQueue, _is__FloatQueue_default);
  var _add = dart.privateName(typed_queue, "_add");
  var _add$ = dart.privateName(queue_list, "_add");
  var _head$0 = dart.privateName(queue_list, "_head");
  var _writeToList$ = dart.privateName(queue_list, "_writeToList");
  var _grow = dart.privateName(typed_queue, "_grow");
  var _grow$ = dart.privateName(queue_list, "_grow");
  var _preGrow = dart.privateName(typed_queue, "_preGrow");
  var _preGrow$ = dart.privateName(queue_list, "_preGrow");
  var _table$0 = dart.privateName(queue_list, "_table");
  var _tail$0 = dart.privateName(queue_list, "_tail");
  var _head_ = dart.privateName(typed_queue, "_head=");
  var _table_ = dart.privateName(typed_queue, "_table=");
  var _tail_ = dart.privateName(typed_queue, "_tail=");
  typed_queue.Uint8Queue = class Uint8Queue extends typed_queue._IntQueue$(typed_data.Uint8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Uint8Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint8Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Uint8Queue.new = function(initialCapacity = null) {
    typed_queue.Uint8Queue.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8Queue.prototype;
  dart.addTypeTests(typed_queue.Uint8Queue);
  dart.addTypeCaches(typed_queue.Uint8Queue);
  typed_queue.Uint8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint8List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint8Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8Queue, I[43]);
  typed_queue.Int8Queue = class Int8Queue extends typed_queue._IntQueue$(typed_data.Int8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Int8Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int8Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int8Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Int8Queue.new = function(initialCapacity = null) {
    typed_queue.Int8Queue.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int8Queue.prototype;
  dart.addTypeTests(typed_queue.Int8Queue);
  dart.addTypeCaches(typed_queue.Int8Queue);
  typed_queue.Int8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int8Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int8List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int8Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int8Queue, I[43]);
  typed_queue.Uint8ClampedQueue = class Uint8ClampedQueue extends typed_queue._IntQueue$(typed_data.Uint8ClampedList) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8ClampedQueue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Uint8ClampedQueue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8ClampedQueue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint8ClampedBuffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Uint8ClampedQueue.new = function(initialCapacity = null) {
    typed_queue.Uint8ClampedQueue.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8ClampedQueue.prototype;
  dart.addTypeTests(typed_queue.Uint8ClampedQueue);
  dart.addTypeCaches(typed_queue.Uint8ClampedQueue);
  typed_queue.Uint8ClampedQueue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8ClampedQueue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint8ClampedList, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint8ClampedBuffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8ClampedQueue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8ClampedQueue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8ClampedQueue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8ClampedQueue, I[43]);
  typed_queue.Uint16Queue = class Uint16Queue extends typed_queue._IntQueue$(typed_data.Uint16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Uint16Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint16Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint16Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Uint16Queue.new = function(initialCapacity = null) {
    typed_queue.Uint16Queue.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint16Queue.prototype;
  dart.addTypeTests(typed_queue.Uint16Queue);
  dart.addTypeCaches(typed_queue.Uint16Queue);
  typed_queue.Uint16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint16Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint16List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint16Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint16Queue, I[43]);
  typed_queue.Int16Queue = class Int16Queue extends typed_queue._IntQueue$(typed_data.Int16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Int16Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int16Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int16Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Int16Queue.new = function(initialCapacity = null) {
    typed_queue.Int16Queue.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int16Queue.prototype;
  dart.addTypeTests(typed_queue.Int16Queue);
  dart.addTypeCaches(typed_queue.Int16Queue);
  typed_queue.Int16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int16Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int16List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int16Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int16Queue, I[43]);
  typed_queue.Uint32Queue = class Uint32Queue extends typed_queue._IntQueue$(typed_data.Uint32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Uint32Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Uint32Queue.new = function(initialCapacity = null) {
    typed_queue.Uint32Queue.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint32Queue.prototype;
  dart.addTypeTests(typed_queue.Uint32Queue);
  dart.addTypeCaches(typed_queue.Uint32Queue);
  typed_queue.Uint32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint32Queue, I[43]);
  typed_queue.Int32Queue = class Int32Queue extends typed_queue._IntQueue$(typed_data.Int32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Int32Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Int32Queue.new = function(initialCapacity = null) {
    typed_queue.Int32Queue.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32Queue.prototype;
  dart.addTypeTests(typed_queue.Int32Queue);
  dart.addTypeCaches(typed_queue.Int32Queue);
  typed_queue.Int32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32Queue, I[43]);
  typed_queue.Uint64Queue = class Uint64Queue extends typed_queue._IntQueue$(typed_data.Uint64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Uint64Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint64Queue.fromList(elements);
    }
    [_createList](size) {
      return typed_data.Uint64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Uint64Queue.new = function(initialCapacity = null) {
    typed_queue.Uint64Queue.__proto__.new.call(this, typed_data.Uint64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint64Queue.prototype;
  dart.addTypeTests(typed_queue.Uint64Queue);
  dart.addTypeCaches(typed_queue.Uint64Queue);
  typed_queue.Uint64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint64Queue, I[43]);
  typed_queue.Int64Queue = class Int64Queue extends typed_queue._IntQueue$(typed_data.Int64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Int64Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int64Queue.fromList(elements);
    }
    [_createList](size) {
      return typed_data.Int64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Int64Queue.new = function(initialCapacity = null) {
    typed_queue.Int64Queue.__proto__.new.call(this, typed_data.Int64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int64Queue.prototype;
  dart.addTypeTests(typed_queue.Int64Queue);
  dart.addTypeCaches(typed_queue.Int64Queue);
  typed_queue.Int64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int64Queue, I[43]);
  typed_queue.Float32Queue = class Float32Queue extends typed_queue._FloatQueue$(typed_data.Float32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Float32Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Float32Queue.new = function(initialCapacity = null) {
    typed_queue.Float32Queue.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32Queue.prototype;
  dart.addTypeTests(typed_queue.Float32Queue);
  dart.addTypeCaches(typed_queue.Float32Queue);
  typed_queue.Float32Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.double]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32Queue, I[43]);
  typed_queue.Float64Queue = class Float64Queue extends typed_queue._FloatQueue$(typed_data.Float64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Float64Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float64Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Float64Queue.new = function(initialCapacity = null) {
    typed_queue.Float64Queue.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float64Queue.prototype;
  dart.addTypeTests(typed_queue.Float64Queue);
  dart.addTypeCaches(typed_queue.Float64Queue);
  typed_queue.Float64Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.double]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float64Queue, I[43]);
  typed_queue.Int32x4Queue = class Int32x4Queue extends typed_queue._TypedQueue$(typed_data.Int32x4, typed_data.Int32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Int32x4Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32x4Queue.fromList(elements);
    }
    [_createList](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int32x4Buffer.new(size);
    }
    get [_defaultValue]() {
      return typed_queue.Int32x4Queue._zero;
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Int32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Int32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Int32x4Queue);
  dart.addTypeCaches(typed_queue.Int32x4Queue);
  typed_queue.Int32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Int32x4)];
  dart.setMethodSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32x4Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int32x4List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int32x4Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [typed_data.Int32x4]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Int32x4))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32x4Queue.__proto__),
    [_defaultValue]: typed_data.Int32x4,
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32x4Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32x4Queue, I[43]);
  dart.setStaticFieldSignature(typed_queue.Int32x4Queue, () => ['_zero']);
  dart.defineLazy(typed_queue.Int32x4Queue, {
    /*typed_queue.Int32x4Queue._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_queue.Float32x4Queue = class Float32x4Queue extends typed_queue._TypedQueue$(typed_data.Float32x4, typed_data.Float32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t22;
      t22 = new typed_queue.Float32x4Queue.new(elements[$length]);
      return (() => {
        t22.addAll(elements);
        return t22;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32x4Queue.fromList(elements);
    }
    [_createList](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float32x4Buffer.new(size);
    }
    get [_defaultValue]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[157] || CT.C157, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[158] || CT.C158)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[159] || CT.C159, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[162] || CT.C162)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[164] || CT.C164, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
  };
  (typed_queue.Float32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Float32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Float32x4Queue);
  dart.addTypeCaches(typed_queue.Float32x4Queue);
  typed_queue.Float32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Float32x4)];
  dart.setMethodSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32x4Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float32x4List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float32x4Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [typed_data.Float32x4]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Float32x4))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32x4Queue.__proto__),
    [_defaultValue]: typed_data.Float32x4,
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32x4Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32x4Queue, I[43]);
  typed_queue._chooseRealInitialCapacity = function _chooseRealInitialCapacity(initialCapacity) {
    if (initialCapacity == null || dart.notNull(initialCapacity) < 16) {
      return 16;
    } else if (!typed_queue._isPowerOf2(initialCapacity)) {
      return typed_queue._nextPowerOf2(initialCapacity);
    } else {
      return initialCapacity;
    }
  };
  typed_queue._isPowerOf2 = function _isPowerOf2(number) {
    return (number & number - 1) === 0;
  };
  typed_queue._nextPowerOf2 = function _nextPowerOf2(number) {
    if (!(number > 0)) dart.assertFailed(null, I[42], 691, 10, "number > 0");
    number = (number << 1 >>> 0) - 1;
    for (;;) {
      let nextNumber = (number & number - 1) >>> 0;
      if (nextNumber === 0) return number;
      number = nextNumber;
    }
  };
  dart.defineLazy(typed_queue, {
    /*typed_queue._defaultInitialCapacity*/get _defaultInitialCapacity() {
      return 16;
    }
  }, false);
  var _buffer = dart.privateName(typed_buffer, "_buffer");
  var _length = dart.privateName(typed_buffer, "_length");
  var _typedBuffer = dart.privateName(typed_buffer, "_typedBuffer");
  var _defaultValue$ = dart.privateName(typed_buffer, "_defaultValue");
  var _createBuffer$ = dart.privateName(typed_buffer, "_createBuffer");
  var _createBiggerBuffer = dart.privateName(typed_buffer, "_createBiggerBuffer");
  var _grow$0 = dart.privateName(typed_buffer, "_grow");
  var _add$0 = dart.privateName(typed_buffer, "_add");
  var _addAll = dart.privateName(typed_buffer, "_addAll");
  var _insertKnownLength = dart.privateName(typed_buffer, "_insertKnownLength");
  var _ensureCapacity = dart.privateName(typed_buffer, "_ensureCapacity");
  var _setRange = dart.privateName(typed_buffer, "_setRange");
  const _is_TypedDataBuffer_default = Symbol('_is_TypedDataBuffer_default');
  typed_buffer.TypedDataBuffer$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$TypedDataBufferOfE = () => (__t$TypedDataBufferOfE = dart.constFn(typed_buffer.TypedDataBuffer$(E)))();
    class TypedDataBuffer extends collection.ListBase$(E) {
      get [_typedBuffer]() {
        return typed_data.TypedData.as(this[_buffer]);
      }
      get length() {
        return this[_length];
      }
      _get(index) {
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        return this[_buffer][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        this[_buffer][$_set](index, value);
        return value$;
      }
      set length(newLength) {
        if (newLength < this[_length]) {
          let defaultValue = this[_defaultValue$];
          for (let i = newLength; i < this[_length]; i = i + 1) {
            this[_buffer][$_set](i, defaultValue);
          }
        } else if (newLength > this[_buffer][$length]) {
          let newBuffer = null;
          if (this[_buffer][$isEmpty]) {
            newBuffer = this[_createBuffer$](newLength);
          } else {
            newBuffer = this[_createBiggerBuffer](newLength);
          }
          newBuffer[$setRange](0, this[_length], this[_buffer]);
          this[_buffer] = newBuffer;
        }
        this[_length] = newLength;
      }
      [_add$0](value) {
        let t22;
        if (this[_length] === this[_buffer][$length]) this[_grow$0](this[_length]);
        this[_buffer][$_set]((t22 = this[_length], this[_length] = t22 + 1, t22), value);
      }
      add(element) {
        E.as(element);
        this[_add$0](element);
      }
      addAll(values, start = 0, end = null) {
        __t$IterableOfE().as(values);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null && start > dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, null, "end"));
        }
        this[_addAll](values, start, end);
      }
      insertAll(index, values, start = 0, end = null) {
        let t22;
        __t$IterableOfE().as(values);
        core.RangeError.checkValidIndex(index, this, "index", this[_length] + 1);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null) {
          if (start > dart.notNull(end)) {
            dart.throw(new core.RangeError.range(end, start, null, "end"));
          }
          if (start === end) return;
        }
        if (index === this[_length]) {
          this[_addAll](values, start, end);
          return;
        }
        if (end == null && core.List.is(values)) {
          end = values[$length];
        }
        if (end != null) {
          this[_insertKnownLength](index, values, start, end);
          return;
        }
        let writeIndex = this[_length];
        let skipCount = start;
        for (let value of values) {
          if (skipCount > 0) {
            skipCount = skipCount - 1;
            continue;
          }
          if (writeIndex === this[_buffer][$length]) {
            this[_grow$0](writeIndex);
          }
          this[_buffer][$_set]((t22 = writeIndex, writeIndex = t22 + 1, t22), value);
        }
        if (skipCount > 0) {
          dart.throw(new core.StateError.new("Too few elements"));
        }
        if (end != null && writeIndex < dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, writeIndex, "end"));
        }
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], index, this[_length]);
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], this[_length], writeIndex);
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], index, writeIndex);
        this[_length] = writeIndex;
        return;
      }
      static _reverse(buffer, start, end) {
        end = end - 1;
        while (start < end) {
          let first = buffer[$_get](start);
          let last = buffer[$_get](end);
          buffer[$_set](end, first);
          buffer[$_set](start, last);
          start = start + 1;
          end = end - 1;
        }
      }
      [_addAll](values, start = 0, end = null) {
        if (core.List.is(values)) end == null ? end = values[$length] : null;
        if (end != null) {
          this[_insertKnownLength](this[_length], values, start, end);
          return;
        }
        let i = 0;
        for (let value of values) {
          if (i >= start) this.add(value);
          i = i + 1;
        }
        if (i < start) dart.throw(new core.StateError.new("Too few elements"));
      }
      [_insertKnownLength](index, values, start, end) {
        if (core.List.is(values)) {
          if (start > values[$length] || end > values[$length]) {
            dart.throw(new core.StateError.new("Too few elements"));
          }
        }
        let valuesLength = end - start;
        let newLength = this[_length] + valuesLength;
        this[_ensureCapacity](newLength);
        this[_buffer][$setRange](index + valuesLength, this[_length] + valuesLength, this[_buffer], index);
        this[_buffer][$setRange](index, index + valuesLength, values, start);
        this[_length] = newLength;
      }
      insert(index, element) {
        E.as(element);
        if (index < 0 || index > this[_length]) {
          dart.throw(new core.RangeError.range(index, 0, this[_length]));
        }
        if (this[_length] < this[_buffer][$length]) {
          this[_buffer][$setRange](index + 1, this[_length] + 1, this[_buffer], index);
          this[_buffer][$_set](index, element);
          this[_length] = this[_length] + 1;
          return;
        }
        let newBuffer = this[_createBiggerBuffer](null);
        newBuffer[$setRange](0, index, this[_buffer]);
        newBuffer[$setRange](index + 1, this[_length] + 1, this[_buffer], index);
        newBuffer[$_set](index, element);
        this[_length] = this[_length] + 1;
        this[_buffer] = newBuffer;
      }
      [_ensureCapacity](requiredCapacity) {
        if (requiredCapacity <= this[_buffer][$length]) return;
        let newBuffer = this[_createBiggerBuffer](requiredCapacity);
        newBuffer[$setRange](0, this[_length], this[_buffer]);
        this[_buffer] = newBuffer;
      }
      [_createBiggerBuffer](requiredCapacity) {
        let newLength = this[_buffer][$length] * 2;
        if (requiredCapacity != null && dart.notNull(newLength) < dart.notNull(requiredCapacity)) {
          newLength = requiredCapacity;
        } else if (dart.notNull(newLength) < 8) {
          newLength = 8;
        }
        return this[_createBuffer$](newLength);
      }
      [_grow$0](length) {
        let t22;
        this[_buffer] = (t22 = this[_createBiggerBuffer](null), (() => {
          t22[$setRange](0, length, this[_buffer]);
          return t22;
        })());
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        if (end > this[_length]) dart.throw(new core.RangeError.range(end, 0, this[_length]));
        this[_setRange](start, end, iterable, skipCount);
      }
      [_setRange](start, end, source, skipCount) {
        if (__t$TypedDataBufferOfE().is(source)) {
          this[_buffer][$setRange](start, end, source[_buffer], skipCount);
        } else {
          this[_buffer][$setRange](start, end, source, skipCount);
        }
      }
      get elementSizeInBytes() {
        return this[_typedBuffer][$elementSizeInBytes];
      }
      get lengthInBytes() {
        return this[_length] * this[_typedBuffer][$elementSizeInBytes];
      }
      get offsetInBytes() {
        return this[_typedBuffer][$offsetInBytes];
      }
      get buffer() {
        return this[_typedBuffer][$buffer];
      }
    }
    (TypedDataBuffer.new = function(buffer) {
      this[_buffer] = buffer;
      this[_length] = buffer[$length];
      ;
    }).prototype = TypedDataBuffer.prototype;
    dart.addTypeTests(TypedDataBuffer);
    TypedDataBuffer.prototype[_is_TypedDataBuffer_default] = true;
    dart.addTypeCaches(TypedDataBuffer);
    dart.setMethodSignature(TypedDataBuffer, () => ({
      __proto__: dart.getMethods(TypedDataBuffer.__proto__),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [_add$0]: dart.fnType(dart.void, [E]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [_addAll]: dart.fnType(dart.void, [core.Iterable$(E)], [core.int, dart.nullable(core.int)]),
      [_insertKnownLength]: dart.fnType(dart.void, [core.int, core.Iterable$(E), core.int, core.int]),
      [_ensureCapacity]: dart.fnType(dart.void, [core.int]),
      [_createBiggerBuffer]: dart.fnType(core.List$(E), [dart.nullable(core.int)]),
      [_grow$0]: dart.fnType(dart.void, [core.int]),
      [_setRange]: dart.fnType(dart.void, [core.int, core.int, core.Iterable$(E), core.int])
    }));
    dart.setStaticMethodSignature(TypedDataBuffer, () => ['_reverse']);
    dart.setGetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getGetters(TypedDataBuffer.__proto__),
      [_typedBuffer]: typed_data.TypedData,
      length: core.int,
      [$length]: core.int,
      elementSizeInBytes: core.int,
      lengthInBytes: core.int,
      offsetInBytes: core.int,
      buffer: typed_data.ByteBuffer
    }));
    dart.setSetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getSetters(TypedDataBuffer.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(TypedDataBuffer, I[44]);
    dart.setFieldSignature(TypedDataBuffer, () => ({
      __proto__: dart.getFields(TypedDataBuffer.__proto__),
      [_buffer]: dart.fieldType(core.List$(E)),
      [_length]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(TypedDataBuffer, () => ['_initialLength']);
    dart.defineExtensionMethods(TypedDataBuffer, [
      '_get',
      '_set',
      'add',
      'addAll',
      'insertAll',
      'insert',
      'setRange'
    ]);
    dart.defineExtensionAccessors(TypedDataBuffer, ['length']);
    return TypedDataBuffer;
  });
  typed_buffer.TypedDataBuffer = typed_buffer.TypedDataBuffer$();
  dart.defineLazy(typed_buffer.TypedDataBuffer, {
    /*typed_buffer.TypedDataBuffer._initialLength*/get _initialLength() {
      return 8;
    }
  }, false);
  dart.addTypeTests(typed_buffer.TypedDataBuffer, _is_TypedDataBuffer_default);
  typed_buffer._IntBuffer = class _IntBuffer extends typed_buffer.TypedDataBuffer$(core.int) {
    get [_defaultValue$]() {
      return 0;
    }
  };
  (typed_buffer._IntBuffer.new = function(buffer) {
    typed_buffer._IntBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._IntBuffer.prototype;
  dart.addTypeTests(typed_buffer._IntBuffer);
  dart.addTypeCaches(typed_buffer._IntBuffer);
  dart.setGetterSignature(typed_buffer._IntBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._IntBuffer.__proto__),
    [_defaultValue$]: core.int
  }));
  dart.setLibraryUri(typed_buffer._IntBuffer, I[44]);
  typed_buffer._FloatBuffer = class _FloatBuffer extends typed_buffer.TypedDataBuffer$(core.double) {
    get [_defaultValue$]() {
      return 0;
    }
  };
  (typed_buffer._FloatBuffer.new = function(buffer) {
    typed_buffer._FloatBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._FloatBuffer.prototype;
  dart.addTypeTests(typed_buffer._FloatBuffer);
  dart.addTypeCaches(typed_buffer._FloatBuffer);
  dart.setGetterSignature(typed_buffer._FloatBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._FloatBuffer.__proto__),
    [_defaultValue$]: core.double
  }));
  dart.setLibraryUri(typed_buffer._FloatBuffer, I[44]);
  typed_buffer.Uint8Buffer = class Uint8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
  };
  (typed_buffer.Uint8Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint8Buffer.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8Buffer);
  dart.addTypeCaches(typed_buffer.Uint8Buffer);
  dart.setMethodSignature(typed_buffer.Uint8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8Buffer, I[44]);
  typed_buffer.Int8Buffer = class Int8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int8Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
  };
  (typed_buffer.Int8Buffer.new = function(initialLength = 0) {
    typed_buffer.Int8Buffer.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int8Buffer);
  dart.addTypeCaches(typed_buffer.Int8Buffer);
  dart.setMethodSignature(typed_buffer.Int8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int8Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int8Buffer, I[44]);
  typed_buffer.Uint8ClampedBuffer = class Uint8ClampedBuffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8ClampedBuffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
  };
  (typed_buffer.Uint8ClampedBuffer.new = function(initialLength = 0) {
    typed_buffer.Uint8ClampedBuffer.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8ClampedBuffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8ClampedBuffer);
  dart.addTypeCaches(typed_buffer.Uint8ClampedBuffer);
  dart.setMethodSignature(typed_buffer.Uint8ClampedBuffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8ClampedBuffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint8ClampedList, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8ClampedBuffer, I[44]);
  typed_buffer.Uint16Buffer = class Uint16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint16Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
  };
  (typed_buffer.Uint16Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint16Buffer.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint16Buffer);
  dart.addTypeCaches(typed_buffer.Uint16Buffer);
  dart.setMethodSignature(typed_buffer.Uint16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint16Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint16Buffer, I[44]);
  typed_buffer.Int16Buffer = class Int16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int16Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
  };
  (typed_buffer.Int16Buffer.new = function(initialLength = 0) {
    typed_buffer.Int16Buffer.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int16Buffer);
  dart.addTypeCaches(typed_buffer.Int16Buffer);
  dart.setMethodSignature(typed_buffer.Int16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int16Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int16Buffer, I[44]);
  typed_buffer.Uint32Buffer = class Uint32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
  };
  (typed_buffer.Uint32Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint32Buffer.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint32Buffer);
  dart.addTypeCaches(typed_buffer.Uint32Buffer);
  dart.setMethodSignature(typed_buffer.Uint32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint32Buffer, I[44]);
  typed_buffer.Int32Buffer = class Int32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
  };
  (typed_buffer.Int32Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32Buffer.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32Buffer);
  dart.addTypeCaches(typed_buffer.Int32Buffer);
  dart.setMethodSignature(typed_buffer.Int32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int32Buffer, I[44]);
  typed_buffer.Uint64Buffer = class Uint64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return typed_data.Uint64List.new(size);
    }
  };
  (typed_buffer.Uint64Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint64Buffer.__proto__.new.call(this, typed_data.Uint64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint64Buffer);
  dart.addTypeCaches(typed_buffer.Uint64Buffer);
  dart.setMethodSignature(typed_buffer.Uint64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint64Buffer, I[44]);
  typed_buffer.Int64Buffer = class Int64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return typed_data.Int64List.new(size);
    }
  };
  (typed_buffer.Int64Buffer.new = function(initialLength = 0) {
    typed_buffer.Int64Buffer.__proto__.new.call(this, typed_data.Int64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int64Buffer);
  dart.addTypeCaches(typed_buffer.Int64Buffer);
  dart.setMethodSignature(typed_buffer.Int64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int64Buffer, I[44]);
  typed_buffer.Float32Buffer = class Float32Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
  };
  (typed_buffer.Float32Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32Buffer);
  dart.addTypeCaches(typed_buffer.Float32Buffer);
  dart.setMethodSignature(typed_buffer.Float32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float32Buffer, I[44]);
  typed_buffer.Float64Buffer = class Float64Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
  };
  (typed_buffer.Float64Buffer.new = function(initialLength = 0) {
    typed_buffer.Float64Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float64Buffer);
  dart.addTypeCaches(typed_buffer.Float64Buffer);
  dart.setMethodSignature(typed_buffer.Float64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float64Buffer, I[44]);
  typed_buffer.Int32x4Buffer = class Int32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Int32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32x4Buffer.new(initialLength);
    }
    get [_defaultValue$]() {
      return typed_buffer.Int32x4Buffer._zero;
    }
    [_createBuffer$](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
  };
  (typed_buffer.Int32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32x4Buffer);
  dart.addTypeCaches(typed_buffer.Int32x4Buffer);
  dart.setMethodSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32x4Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Int32x4Buffer.__proto__),
    [_defaultValue$]: typed_data.Int32x4
  }));
  dart.setLibraryUri(typed_buffer.Int32x4Buffer, I[44]);
  dart.setStaticFieldSignature(typed_buffer.Int32x4Buffer, () => ['_zero']);
  dart.defineLazy(typed_buffer.Int32x4Buffer, {
    /*typed_buffer.Int32x4Buffer._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_buffer.Float32x4Buffer = class Float32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Float32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32x4Buffer.new(initialLength);
    }
    get [_defaultValue$]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [_createBuffer$](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
  };
  (typed_buffer.Float32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32x4Buffer);
  dart.addTypeCaches(typed_buffer.Float32x4Buffer);
  dart.setMethodSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32x4Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Float32x4Buffer.__proto__),
    [_defaultValue$]: typed_data.Float32x4
  }));
  dart.setLibraryUri(typed_buffer.Float32x4Buffer, I[44]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:http/http.dart": http,
    "file:///zapp/project/lib/schedule_menu.dart": schedule_menu,
    "file:///zapp/project/lib/community_tab.dart": community_tab,
    "file:///zapp/project/lib/loading_screen.dart": loading_screen,
    "file:///zapp/project/lib/profile_page.dart": profile_page,
    "package:http/src/client.dart": client$,
    "package:http/src/exception.dart": exception,
    "package:http/src/request.dart": request$,
    "package:http/src/response.dart": response$,
    "package:http/src/streamed_request.dart": streamed_request,
    "package:http/src/base_client.dart": base_client,
    "package:http/src/base_request.dart": base_request,
    "package:http/src/base_response.dart": base_response,
    "package:http/src/byte_stream.dart": byte_stream,
    "package:http/src/multipart_file.dart": multipart_file,
    "package:http/src/multipart_request.dart": multipart_request,
    "package:http/src/streamed_response.dart": streamed_response,
    "package:table_calendar/table_calendar.dart": table_calendar,
    "package:http/src/browser_client.dart": browser_client,
    "package:http_parser/http_parser.dart": http_parser,
    "package:http/src/utils.dart": utils,
    "package:http/src/multipart_file_stub.dart": multipart_file_stub,
    "package:http/src/boundary_characters.dart": boundary_characters,
    "package:table_calendar/src/customization/calendar_builders.dart": calendar_builders,
    "package:table_calendar/src/customization/calendar_style.dart": calendar_style,
    "package:table_calendar/src/customization/days_of_week_style.dart": days_of_week_style,
    "package:table_calendar/src/customization/header_style.dart": header_style,
    "package:table_calendar/src/shared/utils.dart": utils$,
    "package:table_calendar/src/table_calendar.dart": table_calendar$,
    "package:table_calendar/src/table_calendar_base.dart": table_calendar_base,
    "package:http_parser/src/authentication_challenge.dart": authentication_challenge,
    "package:http_parser/src/case_insensitive_map.dart": case_insensitive_map,
    "package:http_parser/src/chunked_coding.dart": chunked_coding,
    "package:http_parser/src/http_date.dart": http_date,
    "package:http_parser/src/media_type.dart": media_type,
    "package:simple_gesture_detector/simple_gesture_detector.dart": simple_gesture_detector,
    "package:table_calendar/src/widgets/calendar_header.dart": calendar_header,
    "package:table_calendar/src/widgets/cell_content.dart": cell_content,
    "package:table_calendar/src/widgets/calendar_core.dart": calendar_core,
    "package:http_parser/src/scan.dart": scan,
    "package:http_parser/src/utils.dart": utils$0,
    "package:http_parser/src/chunked_coding/decoder.dart": decoder,
    "package:http_parser/src/chunked_coding/encoder.dart": encoder,
    "package:table_calendar/src/widgets/custom_icon_button.dart": custom_icon_button,
    "package:table_calendar/src/widgets/format_button.dart": format_button,
    "package:table_calendar/src/widgets/calendar_page.dart": calendar_page,
    "package:typed_data/typed_data.dart": typed_data$,
    "package:http_parser/src/chunked_coding/charcodes.dart": charcodes,
    "package:typed_data/src/typed_queue.dart": typed_queue,
    "package:typed_data/typed_buffers.dart": typed_buffers,
    "package:typed_data/src/typed_buffer.dart": typed_buffer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/http.dart","/zapp/project/lib/schedule_menu.dart","/zapp/project/lib/community_tab.dart","/zapp/project/lib/loading_screen.dart","/zapp/project/lib/profile_page.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/streamed_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/byte_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_file.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/streamed_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/browser_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_file_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/boundary_characters.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/customization/calendar_builders.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/customization/calendar_style.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/customization/days_of_week_style.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/customization/header_style.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/shared/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/table_calendar.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/table_calendar_base.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/authentication_challenge.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/case_insensitive_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/http_date.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/media_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/simple_gesture_detector-0.2.1/lib/simple_gesture_detector.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/widgets/calendar_header.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/widgets/cell_content.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/widgets/calendar_core.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/scan.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/decoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/encoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/widgets/custom_icon_button.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/widgets/format_button.dart","/zapp/pub/.pub_cache/hosted/pub.dev/table_calendar-3.0.9/lib/src/widgets/calendar_page.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/charcodes.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_buffer.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    http: http,
    zapp__project__lib__schedule_menu: schedule_menu,
    zapp__project__lib__community_tab: community_tab,
    zapp__project__lib__loading_screen: loading_screen,
    zapp__project__lib__profile_page: profile_page,
    src__client: client$,
    src__exception: exception,
    src__request: request$,
    src__response: response$,
    src__streamed_request: streamed_request,
    src__base_client: base_client,
    src__base_request: base_request,
    src__base_response: base_response,
    src__byte_stream: byte_stream,
    src__multipart_file: multipart_file,
    src__multipart_request: multipart_request,
    src__streamed_response: streamed_response,
    table_calendar: table_calendar,
    src__browser_client: browser_client,
    http_parser: http_parser,
    src__utils: utils,
    src__multipart_file_stub: multipart_file_stub,
    src__boundary_characters: boundary_characters,
    src__customization__calendar_builders: calendar_builders,
    src__customization__calendar_style: calendar_style,
    src__customization__days_of_week_style: days_of_week_style,
    src__customization__header_style: header_style,
    src__shared__utils: utils$,
    src__table_calendar: table_calendar$,
    src__table_calendar_base: table_calendar_base,
    src__authentication_challenge: authentication_challenge,
    src__case_insensitive_map: case_insensitive_map,
    src__chunked_coding: chunked_coding,
    src__http_date: http_date,
    src__media_type: media_type,
    simple_gesture_detector: simple_gesture_detector,
    src__widgets__calendar_header: calendar_header,
    src__widgets__cell_content: cell_content,
    src__widgets__calendar_core: calendar_core,
    src__scan: scan,
    src__utils: utils$0,
    src__chunked_coding__decoder: decoder,
    src__chunked_coding__encoder: encoder,
    src__widgets__custom_icon_button: custom_icon_button,
    src__widgets__format_button: format_button,
    src__widgets__calendar_page: calendar_page,
    typed_data: typed_data$,
    src__chunked_coding__charcodes: charcodes,
    src__typed_queue: typed_queue,
    typed_buffers: typed_buffers,
    src__typed_buffer: typed_buffer
  };
}));

//# sourceMappingURL=main.js.map
